<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌云壮志幾多愁</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-05T14:58:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王望</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/05/bottom2top_syntax_parser_lalr/"/>
    <id>http://yoursite.com/2020/05/05/bottom2top_syntax_parser_lalr/</id>
    <published>2020-05-05T14:58:26.000Z</published>
    <updated>2020-05-05T14:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法分析——规范LR和LALR语法分析"><a href="#语法分析——规范LR和LALR语法分析" class="headerlink" title="语法分析——规范LR和LALR语法分析"></a>语法分析——规范LR和LALR语法分析</h1><p>在这篇文章中主要看两种LR语法分析技术，相对于上一篇中SLR，本篇文章的两种LR技术对它进行了扩展，<strong>在输入中向前看一个符号</strong>。这两种技术分别是：</p>
<ul>
<li>“规范LR”：也可以直接叫做”LR”方法，这个方法会使用很大的一个项集，称为LR(1)项集；</li>
<li>“向前看LR”：也可以直接叫做”LALR”方法，它基于LR(0)项集（比LR(1)项集状态要少很多）。<strong>很多情况下LALR是最合适的选择</strong>；</li>
</ul>
<h2 id="一、规范LR-1"><a href="#一、规范LR-1" class="headerlink" title="一、规范LR(1)"></a>一、规范LR(1)</h2><p>我们来看个情况，在SLR方法中，如果项集 $I_{i}$ 包含项 $[A\rightarrow \alpha\ \ \cdot\ ]$，如果当前输入符号 a 存在于FOLLOW(A)中。如果基于SLR来说，那么我们肯定会将 α 归约为A。然而在某些情况下，当状态 i 出现在栈顶时，栈中的可行前缀是 βα ，并且最右句型中 a 都不可能跟在 βA 之后，也就是说我们肯定不能简单就将 α 归约为 A 。</p>
<p>因此我们可以在项中新增一个分量，这个分量为一个终结符号。比如现在项可以表示为 $[A\rightarrow\alpha\cdot \beta,\ a]$，其中 $A\rightarrow\alpha\beta$ 是一个产生式，而a是一个终结符号或者右端结束标记$。我们称这样的项为 <strong>LR(1)项</strong> 。其中的1指的是第二个分量的长度。</p>
<p>第二个分量称为 <strong>向前看符号</strong> 。</p>
<p>正式的说，LR(1)项$[A\rightarrow\alpha \cdot \beta,\ a]$对于可行前缀 γ 有效的条件是存在推导$S\rightarrow xAw\rightarrow x\alpha\beta w$，其中：</p>
<ul>
<li>可行前缀为 xα；</li>
<li>要么 a 是 w 的第一个符号，要么w为空串且a对于结束符；</li>
</ul>
<h4 id="构造LR-1-项集"><a href="#构造LR-1-项集" class="headerlink" title="构造LR(1)项集"></a>构造LR(1)项集</h4><p>LR(1)项集构造方法：一个增广文法G‘，在原来SLR的基础上对CLOSURE函数和GOTO函数进行改造。大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">SetOfItems CLOSURE(I) &#123;</div><div class="line">    repeat</div><div class="line">        for(I中的每个项[A -&gt; α·Bβ, a]) &#123;</div><div class="line">            for(G&apos;中每个产生式B -&gt; γ) &#123; </div><div class="line"></div><div class="line">/// 解释一下，G’表示增广文法（它包含了文法的所有产生式）；B -&gt; γ 表示在增广文法中当存在产生式头部为当前项点号右边的非终结符号时，进行下面的操作</div><div class="line"></div><div class="line">                for(FIRST(βa)中每个终结符号b) &#123;</div><div class="line">                    将[B -&gt; γ, b]项添加到集合I中；</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    until 不能向I中加入更多的项；</div><div class="line">    return I;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SetOfItems GOTO(I,X) &#123;</div><div class="line">    将J初始化为空集；</div><div class="line">    for (I中的每个项 [A -&gt; α·Xβ, a])</div><div class="line">/// 这里我解释一下，循环I中的每一个项，直到出现点号右边的符号和传入的参数符号X相同时进行后续操作</div><div class="line">        将项[A -&gt; αX·β, a]加入到集合J中; </div><div class="line">    return CLOSURE(J);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void items(G&apos;) &#123;</div><div class="line">    将C初始化为&#123;CLOSURE&#125;(&#123;[S&apos; -&gt; ·S, $]&#125;);</div><div class="line">    repeat </div><div class="line">        for(C中每个项集I) &#123;</div><div class="line">            for(每个文法符号X) &#123;</div><div class="line">                if (GOTO(I,X)非空且不在C中)</div><div class="line">                    将GOTO(I,X)加入C中；</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    until 不再有新的项集加入到C中</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的代码是我对上面的表示翻译了一下，看下面代码时可以对照上面的内容对应着看。而且对Item进行了更新，因为在LR(1)项集中Item需要一个向前看运算符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">struct Item &#123;</div><div class="line">int position; /// 点号所处位置</div><div class="line">int id; /// 当前项在产生式集合中的编号</div><div class="line">Symbol *forwardSymbol; /// 向前看符号</div><div class="line">Item()&#123;</div><div class="line">    position = 0;</div><div class="line">    id = 0;</div><div class="line">    forwardSymbol = nullptr;</div><div class="line">&#125;</div><div class="line">Item(int pos, int idt, Symbol *ptr):position(pos),id(idt),forwardSymbol(ptr)&#123;&#125;</div><div class="line">&#125;;</div><div class="line">*/</div><div class="line"></div><div class="line">SetOfItems&lt;Item&gt; LR_1::LRCollection::closure(SetOfItems&lt;Item&gt;&amp; set) </div><div class="line">&#123;</div><div class="line">    for (SetOfItems&lt;Item&gt;::iterator itr = set.begin(); itr != set.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        Item item = *itr;</div><div class="line">        vector&lt;Production&gt; productions = grammer.productions;</div><div class="line">        Production prod = productions[item.id];</div><div class="line">        Symbol *dst_sym = prod.bodies[item.position];</div><div class="line">        for (vector&lt;Production&gt;::iterator p_itr = productions.begin(); p_itr != productions.end(); ++p_itr)</div><div class="line">        &#123;</div><div class="line">            int index = p_itr - productions.begin();</div><div class="line">            if((p_itr-&gt;header).identifier() != dst_sym-&gt;identifier())</div><div class="line">            &#123;</div><div class="line">                continue;</div><div class="line">            &#125; </div><div class="line">            Symbol *beta = prod.bodies[item.position + 1];</div><div class="line">            vector&lt;Symbol *&gt;first = grammer.FIRST(beta);</div><div class="line">            if (first.size() &lt;= 0)</div><div class="line">            &#123;</div><div class="line">                first = grammer.FIRST(item.forwardSymbol);</div><div class="line">            &#125;</div><div class="line">            for (vector&lt;Symbol *&gt;::iterator s_itr = first.begin(); s_itr != first.end(); ++s_itr)</div><div class="line">            &#123;</div><div class="line">                Item itm(0,index, *s_itr);</div><div class="line">                set.push_back(itm); /// &lt;------------------------ 自增长</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return set;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SetOfItems&lt;Item&gt; LR_1::LRCollection::lr_goto(SetOfItems&lt;Item&gt;&amp; set, Symbol *symbol, int *offset)</div><div class="line">&#123;</div><div class="line">    SetOfItems&lt;Item&gt; temp;</div><div class="line">    for (SetOfItems&lt;Item&gt;::iterator itr = set.begin(); itr != set.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        Item item = *itr;</div><div class="line">        Production prod = grammer.productions[item.id];</div><div class="line">        Symbol *sym = prod.bodies[item.position];</div><div class="line">        if (sym-&gt;identifier() != symbol-&gt;identifier())</div><div class="line">        &#123; /// 目标符号不符合</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        int position = item.position + 1;</div><div class="line">        if (position &gt;= prod.bodies.size())</div><div class="line">        &#123; /// 异常</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Item result(item.id, item.position + 1, item.forwardSymbol);</div><div class="line">        temp.push_back(result);</div><div class="line">    &#125;</div><div class="line">    return closure(temp);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void LR_1::LRCollection::items()</div><div class="line">&#123;</div><div class="line">    /// 1、将[S&apos; -&gt; .S, $]作为初始化加入到集合中</div><div class="line">    SetOfItems&lt;Item&gt; set;</div><div class="line">    Item it(0,0,const_cast&lt;Symbol *&gt;(Symbol::EndedSymbolPtr())); /// 产生式集合中第0个为增广表达式</div><div class="line">    set.push_back(it);</div><div class="line">    vector&lt;SetOfItems&lt;Item&gt; &gt; collection(1, set);</div><div class="line">    using vector_type=vector&lt;SetOfItems&lt;Item&gt;&gt;;</div><div class="line">    for(vector_type::iterator itr = collection.begin(); itr != collection.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        vector &lt;Symbol *&gt; symbols = grammer.symbols;</div><div class="line">        for (vector&lt;Symbol *&gt;::iterator s_itr = symbols.begin(); s_itr != symbols.end(); ++s_itr)</div><div class="line">        &#123;</div><div class="line">            int offset = 0;</div><div class="line">            SetOfItems&lt;Item&gt; items = lr_goto(*itr, *s_itr, &amp;offset);</div><div class="line">            int result = contain_set(items);</div><div class="line">            if (result == -1)</div><div class="line">            &#123;</div><div class="line">                collection.push_back(items);</div><div class="line">                Item item = items[0];</div><div class="line">                std::string key  = format(&quot;%d_%d_%d&quot;,item.id,item.position, item.forwardSymbol-&gt;identifier());</div><div class="line">                item_map.insert(make_pair(key, offset));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来看一个增广文法，我们使用上面的知识可以对这个增广文法构造出它对应的项集：</p>
<script type="math/tex; mode=display">
S' \rightarrow S\\
S \rightarrow CC\\
C \rightarrow cC\ |\ d</script><p>下图是对应的项集族：</p>
<p><img src="./img/7.png" alt=""></p>
<p>这个项集中的和上一篇文章中看到的项是不仅仅有了点号位置区分，还有向前看运算符的区分。</p>
<p>下面我们来看一下规范LR中ACTION函数的具体行为：</p>
<ul>
<li>1）、如果 $[A\rightarrow \alpha \cdot a \beta, b]$ 在 $I_{i}$ 中，并且 $GOTO[I_{i}, a] = I_{j}$，那么将 <code>ACTION[i, a]</code> 设置为“移入j”。这里 a 必须是一个终结符号；</li>
<li>2）、如果 $[A\rightarrow \alpha \cdot, a]$ 在 $I_{i}$ 中且 $A \neq S’$ （即当前产生式头部的非终结符，不是产生式集合中的增广文法的开始符号），那么将 <code>ACTION[i, a]</code> 设置为“归约A -&gt; α”；</li>
<li>3）、如果 $[S’ \rightarrow S \cdot , $]$ 在 $I_{i}$ 中，那么将 <code>ACTION[i, a]</code> 设置为“接受”；</li>
<li>4）、不满足上诉规则的，都设置为“报错”；</li>
</ul>
<p>现在我们根据上面的四个规则，写出规范LR对应的ACTION函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">LR_Action* LR_1::LRCollection::action(SetOfItems&lt;Item&gt;&amp; set, Symbol *symbol) </div><div class="line">&#123;</div><div class="line">    if (symbol-&gt;isTerminal() == false)</div><div class="line">    &#123;</div><div class="line">        return nullptr;</div><div class="line">    &#125;</div><div class="line">    LR_Action *action = set.actionForSymbol(symbol-&gt;identifier());</div><div class="line">    if (action != nullptr)</div><div class="line">    &#123;</div><div class="line">        return action;</div><div class="line">    &#125;</div><div class="line">    vector&lt;GrammarParser::Production&gt; productions = grammer.productions;</div><div class="line">    for (SetOfItems&lt;Item&gt;::iterator itr = set.begin; itr != set.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        Item item = *itr;</div><div class="line">        GrammarParser::Production prod = productions[item.id];</div><div class="line">        if (item.position == prod.bodies.size()) /// 当前项的点号在最右边</div><div class="line">        &#123;</div><div class="line">            if (item.id == 0 &amp;&amp; symbol == GrammarParser::Symbol::EndedSymbolPtr())</div><div class="line">            &#123; /// 接受状态</div><div class="line">                AcceptAction *action = new AcceptAction();</div><div class="line">                return action;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            if (item.forwardSymbol-&gt;identifier() == symbol-&gt;identifier)</div><div class="line">            &#123; /// 归约</div><div class="line">                ReduceAction *redue = new ReduceAction(&amp;prod);</div><div class="line">                set.setActionForSymbol(symbol-&gt;identifier(), redue);</div><div class="line">                return redue;</div><div class="line">            &#125;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        int offset = -1;</div><div class="line">        SetOfItems result = lr_goto(set,symbol, &amp;offset);</div><div class="line">        if (result != set) /// 不同的两个状态，说明goto函数有效，此时应该做移入操作</div><div class="line">        &#123;</div><div class="line">            action = new ShiftAction(offset);</div><div class="line">            set.setActionForSymbol(symbol-&gt;identifier(), action);</div><div class="line">            return action;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ErrorAction *aciton = new ErrorAction();</div><div class="line">    return action;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个SLR(1)文法都是LR(1)文法。但是对于一个SLR(1)文法而言，规范LR(1)语法分析器的状态要比一个文法对应的SLR语法分析器的状态多。</p>
<blockquote>
<p>普遍而言，同一个文法的规范LR语法分析器状态要比SLR语法分析器状态多；</p>
</blockquote>
<h2 id="二、LALR"><a href="#二、LALR" class="headerlink" title="二、LALR"></a>二、LALR</h2><p>现在来看最后一个语法分析器LALR语法分析器。在实践中，用这种方法得到的分析表比规范LR分析表 <strong>小很多</strong>，而且大部分常见的程序设计语言构造都可以方便地使用一个LALR文法表示。</p>
<p>现在我们再来看看下面这张图：</p>
<p><img src="./img/7.png" alt=""></p>
<p>图中 $I_{4} 和 I_{7}$ 中项的第一个分量是相同，不同的是向前看符号不同。现在我们将 $I_{4}和I_{7}$ 替换为 $I_{47}$ （即$I_{4} 和 I_{7}$的并集），这个项集中的元素为：$[C \rightarrow d\ \cdot \ ,\ c/d/$ ]$。</p>
<p>原来在从$I_{0}, I_{2}, I_{3}$经过b到达$I_{4}, I_{7}$的转换，都转向为 $I_{47}$ 。这个经过修改之后的语法分析器行为在本质上和原分析器一样。</p>
<p>在这里：</p>
<blockquote>
<p>我们将项第一个分量称为 <strong>核心</strong> 。</p>
</blockquote>
<p>因此上诉的步骤就是在寻找具有相同核心的LR(1)项集，并将这些 “项的集合” 合并为一个项集。关于项、项集、项集族的关系在上一篇文章中有进行说明。</p>
<p>比如$T_{3}和I_{6}$就具有相同的核心 $[C\rightarrow c \cdot C,\ C\rightarrow \cdot cC,\ C\rightarrow \cdot d\ ]$。</p>
<p>一般而言，一个核心就是当前正在处理文法的 <strong>LR(0)</strong> 项集，一个LR(1)文法可能产生多个具有相同核心的项集。</p>
<blockquote>
<p>合并具有相同核心的状态不会产生出原有状态中没有出现的移入\归约冲突。因为移入动作仅有核心决定，不考虑向前看运算符。</p>
</blockquote>
<p>其中提到的“移入动作仅有核心决定，不考虑向前看运算符”，我们可以看上一节ACTION函数具体行为的第一点。</p>
<h4 id="简单地构造LALR分析器"><a href="#简单地构造LALR分析器" class="headerlink" title="简单地构造LALR分析器"></a>简单地构造LALR分析器</h4><p>构造语法分析器主要是从三个方面入手，分别是：确定项集，确定GOTO函数和确定ACTION函数。</p>
<ul>
<li>1）、我们从上面看出，我们可以先构造一个规范LR项集族，然后寻找具有相同核心的项集进行合并；</li>
<li><p>2）、然后根据核心来确定GOTO函数的关系。如果J是一个或多个LR(1)项集的并集，即 $J = I_{1} \bigcup I_{2} \bigcup\ …\ \bigcup I_{n}$，它们能组成并集也就侧面反映了它们具有相同的核心。</p>
<p>  由于它们有相同的核心，那么$GOTO(I_{1},X),\ …,\ GOTO(I_{n},X)$的核心也是相同的。令K是所有和 $GOTO(I_{1},X)$ 具有相同核心项集的并集，那么 <strong>GOTO(J,X) = K</strong> 。</p>
</li>
<li>3）、关于ACTION函数的逻辑和实现规范LR的类似的（移入、归约、接受）；</li>
</ul>
<p>显然，这并不是高效的构造LALR语法分析器的方法。就比如在学习正则表达式转换为确定的有穷自动机（DFA）时，我们最初使用的正则表达式转换为NFA，然后通过子集构造法得到DFA。经过探索之后可以直接使用nullable、firstpos、lastpos以及followpos将正则表达式转换为DFA。</p>
<p>同样的，我们也可以用更加高效的方法来构造LALR语法分析表。</p>
<h4 id="⚠️⚠️⚠️-高效构造LALR语法分析表"><a href="#⚠️⚠️⚠️-高效构造LALR语法分析表" class="headerlink" title="⚠️⚠️⚠️ 高效构造LALR语法分析表"></a>⚠️⚠️⚠️ 高效构造LALR语法分析表</h4><p>我们可以对上面的方法进行修改，使得我们在创建LALR(1)语法分析表的过程中不需要构造出完整的规范LR(1)项集族。</p>
<p>在介绍具体的思想之前，我先解释一下“内核项”。它在上一篇文章中提到，总体来说就是 <strong>点号不在最左边，但是增广文法的第一个产生式除外</strong> 。下面是构造高效LALR语法分析表的大致思路：</p>
<ul>
<li>1）、首先，我们可以只使用内核项来表示任意的LR(0)和LR(1)项集；</li>
<li><p>2）、使用“传播和自生成”的过程来生成向前看符号，根据对应的LR(0)项内核生成LR(1)项内核。</p>
<p>  这里我稍微多说一句，“传播和自生成”都是针对向前看符号而言的，“传播”是指我们从上一个项集对应的向前看符号传到下一个项集，作为对应项的向前看运算符。“自生成”则是指的根据GOTO函数和CLOSURE函数生成的向前看符号，具体的生成规则会在下面讲解；</p>
</li>
<li>3）、当有了内核之后，就可以使用CLOSURE函数对各个内核求其余项，最后生成语法分析表；</li>
</ul>
<p>现在我们需要给LR(0)内核加上正确地向前看符号，创建出正确地LALR(1)内核。现在来看一个内核项 $A \rightarrow \alpha \cdot B \beta,\ a$，以及存在对应产生式 $B\rightarrow \gamma  \theta$ ，我们先来看CLOSURE和GOTO：</p>
<p>其CLOSURE函数结果为： $[A \rightarrow \alpha \cdot B \beta,\ a], [B\rightarrow \cdot\gamma\theta,\ FIRST(\beta a)]$</p>
<p>其中GOTO函数的结果为：GOTO(I, B) = $A \rightarrow \alpha B\cdot \beta,\ a$ ; $GOTO(I, \theta) = B\rightarrow \gamma \cdot \theta,\ FIRST(\beta a)$</p>
<p>这儿我为什么要求这两个函数的值呢？因为它们和“传播和自生成”关系密切，对于GOTO函数之后得到的项集而言：</p>
<ul>
<li>如果<strong>FIRST(βa) == a</strong> 也就是说明FISRT(β)为空，也就是说我们不能在GOTO(I, θ)中自己生成一个向前看符号，因此我们将原来内核项的向前看符号 <strong>传播</strong> 到新的内核项；</li>
<li>如果<strong>FIRST(βa) != a</strong> 也就是说明FISRT(β)不为空，那么我们就可以通过FISRT(β) <strong>自生成</strong> 一个向前看符号；</li>
</ul>
<p>有了上面的基础之后，我相信下面这段话应该就可以看懂了：</p>
<p>令#为一个不在当前文法中的符号，令 $A\rightarrow \alpha \cdot \beta$ 为内核LR(0)项。对于每个 X(文法符号) 计算 $J = GOTO(CLOSURE(\{[A\rightarrow \alpha \cdot \beta, #]\}),\ X)$ 。 对于J中的每个内核项，我们检查它的向前看符号集合：</p>
<p>1、如果#是它的向前看符号，那么向前看符号就是从 $A\rightarrow\alpha\cdot\beta$ 传播到这个项的；</p>
<p>2、除此之外其他的向前看符号都是自发生成的；</p>
<blockquote>
<p>向前看符号 $ (结束符号) 对于初始项集中的项 $S’\rightarrow \cdot S$ 而言是自发生成的</p>
</blockquote>
<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">for (K中的每个项 A -&gt; α·β)</div><div class="line">&#123;</div><div class="line">    J = CLOSURE(&#123;[A -&gt; α·β, #]&#125;);</div><div class="line">    if ([B -&gt; γ·Xδ, a]在J中，并且a不等于#)</div><div class="line">    &#123;</div><div class="line">        那么GOTO(I,X)中的项B -&gt; γX·δ向前看符号a是自生成的；</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if ([B -&gt; γ·Xδ, a]在J中)</div><div class="line">    &#123;</div><div class="line">        那么向前看符号从I中的项A -&gt; α·β传播到了B -&gt; γX·δ上；</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么到这儿应该就在想，这个传播的最初源头在哪儿呢？很明显这个源头就是增广文法的初始项集$[S’\rightarrow \cdot S, $]$。</p>
<p>这块儿主要是理解传播和自生成向前看运算符。</p>
<p>到这儿我们也把规范LR和LALR大致了解了一下，在实际的运用中主要还是使用LALR的语法分析。其原因是它可以通过向前看一个符号来解决移入归约冲突，还有就是可以减少语法分析过程中出现的状态数量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语法分析——规范LR和LALR语法分析&quot;&gt;&lt;a href=&quot;#语法分析——规范LR和LALR语法分析&quot; class=&quot;headerlink&quot; title=&quot;语法分析——规范LR和LALR语法分析&quot;&gt;&lt;/a&gt;语法分析——规范LR和LALR语法分析&lt;/h1&gt;&lt;p&gt;在这
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>语法分析——自顶向下语法分析</title>
    <link href="http://yoursite.com/2020/04/28/bottom2top_syntax_parser_basic/"/>
    <id>http://yoursite.com/2020/04/28/bottom2top_syntax_parser_basic/</id>
    <published>2020-04-28T15:26:16.000Z</published>
    <updated>2020-07-04T04:40:24.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要来看看SLR语法分析，他是一个LR语法分析。其中L表示最左向右扫描，R表示最右推导序列。<br>在本篇文章中，我们会接触 移入-归约 技术。并且还会接触到LR文法类，它是最大的、可以构造出相应移入-归约语法分析器的文法类。</p>
<h2 id="一、归约"><a href="#一、归约" class="headerlink" title="一、归约"></a>一、归约</h2><p>我们可以将自底向上语法分析过程看成将一个符号串“归约”为文法开始符号的过程。<strong>一个与某产生式体相匹配的特定子串被替换为该产生式头部的非终结符号</strong> 。</p>
<blockquote>
<p>在自底向上的语法分析过程中，关键问题是 <strong>何时进行归约以及用哪个产生式进行归约</strong></p>
</blockquote>
<p>对于文法：</p>
<script type="math/tex; mode=display">
E \rightarrow E + T\ |\ T \\
T \rightarrow T * F \ |\ F \\
F \rightarrow (E) \ |\ \mathbf{id}</script><p>词法单元序列 <strong>id * id</strong> 机型自底向上的分析过程：</p>
<p><img src="/uploads/bottom2top_syntax_parser/1.png" alt="自底向上分析过程"></p>
<p>这个序列中从输入串 <strong>id * id</strong> 开始，第一次归约使用产生式 <script type="math/tex">F\rightarrow id</script>，将最左边的id归约为F，得到串 F <em> id。第二次归约将F归约为T，生成 T </em> id。</p>
<p>现在（上图中的第四步）我们可以选择是对串T，还是对第二个id进行归约，其中T是产生式 <script type="math/tex">E \rightarrow T</script> 的体，而第二个id是产生式 <script type="math/tex">F \rightarrow id</script> 的体。在这里我们并没有将T归约为E，而是将id归约为F，得到了串 <strong>T * F</strong> 。然后这个串被归约为T。最后则是将T归约为E，由于E是文法的开始符号，因此整个归约过程便结束了。</p>
<p>因此自底向上的语法分析目的就是反向构造一个推到过程，而 <strong>归约正是最右推到的反向过程</strong>：</p>
<script type="math/tex; mode=display">
E \Rightarrow T \Rightarrow T * F \Rightarrow T * id \Rightarrow F * id \Rightarrow id * id</script><blockquote>
<p>对输入进行从左到右的扫描，并在扫描过程中进行自底向上的语法分析，就可以反向构造出一个最右推到。</p>
</blockquote>
<h3 id="句柄剪枝"><a href="#句柄剪枝" class="headerlink" title="句柄剪枝"></a>句柄剪枝</h3><p>非正式的讲，“句柄”是和某个产生式体匹配的子串.<br>比如上面的归约过程：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">最右句型</th>
<th style="text-align:left">归约目标子串</th>
<th style="text-align:left">归约用的产生式</th>
<th style="text-align:left">句柄</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><script type="math/tex">id_{1}*id_{2}</script></td>
<td style="text-align:left"><script type="math/tex">id_{1}</script></td>
<td style="text-align:left"><script type="math/tex">F \rightarrow id</script></td>
<td style="text-align:left"><script type="math/tex">id_{1}</script></td>
</tr>
<tr>
<td style="text-align:left"><script type="math/tex">F*id_{2}</script></td>
<td style="text-align:left"><script type="math/tex">F</script></td>
<td style="text-align:left"><script type="math/tex">T\rightarrow F</script></td>
<td style="text-align:left"><script type="math/tex">F</script></td>
</tr>
<tr>
<td style="text-align:left"><script type="math/tex">T*id_{2}</script></td>
<td style="text-align:left"><script type="math/tex">id_{2}</script></td>
<td style="text-align:left"><script type="math/tex">F\rightarrow id</script></td>
<td style="text-align:left"><script type="math/tex">id_{2}</script></td>
</tr>
<tr>
<td style="text-align:left"><script type="math/tex">T * F</script></td>
<td style="text-align:left"><script type="math/tex">T*F</script></td>
<td style="text-align:left"><script type="math/tex">T\rightarrow T * F</script></td>
<td style="text-align:left"><script type="math/tex">T*F</script></td>
</tr>
<tr>
<td style="text-align:left"><script type="math/tex">T</script></td>
<td style="text-align:left"><script type="math/tex">T</script></td>
<td style="text-align:left"><script type="math/tex">E\rightarrow T</script></td>
<td style="text-align:left"><script type="math/tex">T</script></td>
</tr>
<tr>
<td style="text-align:left"><script type="math/tex">E</script></td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
</div>
<p>在上表中，虽然T是产生式<script type="math/tex">E\rightarrow T</script>的体，但符号T并不是句型<script type="math/tex">T*id_{2}</script>的句柄。如果我们把T替换为E之后，发现E为开始符号，那我们也就不能从单一的开始符号推导得到<script type="math/tex">E * id_{2}</script> 。</p>
<p>因此：</p>
<blockquote>
<p>和某个产生式体匹配的最左子串不一定是句柄。</p>
</blockquote>
<p>正式的对句柄下一个定义：<br>如果存在产生式 <script type="math/tex">S\Rightarrow \alpha A \omega \Rightarrow \alpha \beta \omega</script>，最右句型<script type="math/tex">\gamma</script> 的一个句柄满足如下条件：</p>
<p>将该句型中的子串<script type="math/tex">\beta</script>替换为A之后得到的串 <script type="math/tex">\mu</script> ，串<script type="math/tex">\mu</script>是最右句型<script type="math/tex">\gamma</script>所处最右推导序列中位于<script type="math/tex">\gamma</script>之前的最右句型（稍微转一下弯，这里说的是最右推导的最右句型序列之前，那也就是上面所说的处于归约序列之后的子串）。</p>
<p>同时为了方便起见，我们就把产生式 <script type="math/tex">A\rightarrow \beta</script> 的体<script type="math/tex">\beta</script> 称作句柄。</p>
<p>由于文法存在二义性，因此对于同一个最右句型可能存在多个句柄；而对于无二义性的文法而言，那么该文法的每个最右句型有且只有一个句柄。</p>
<p>而这里提到的句柄剪枝的目的，便是寻找合适的句柄。使得我们可以按照这个过程得到一个 <strong>只包含开始符号</strong> 的最右句型，因此我们就可以说语法分析过程结束。</p>
<p>而将归约过程中用的产生式反向排序，我们就可以得到输入串的一个最右推导。</p>
<h3 id="移入-归约语法分析技术"><a href="#移入-归约语法分析技术" class="headerlink" title="移入-归约语法分析技术"></a>移入-归约语法分析技术</h3><p>它使用一个栈来保存文法符号，并用一个输入缓冲区来存放将要进行语法分析的其余符号。<strong>句柄在被识别之前，总是出现在栈的顶部</strong>。</p>
<p><img src="/uploads/bottom2top_syntax_parser/2.png" alt="输入串和栈"></p>
<p>在对输入串的一次从左到右扫描过程中，语法分析器将零个或多个输入符号移动到栈的顶端，直到它可以对栈顶的一个文法符号串（比如<script type="math/tex">\beta</script>）进行归约为止。将 <script type="math/tex">\beta</script> 归约为某个产生式的头部（即 <script type="math/tex">A\rightarrow \beta</script>，归约为A）。</p>
<p>语法分析器不断重复这个循环，直到它检测到一个语法错误，或者栈中包含了开始符号且输入缓冲区为空。</p>
<p>下表是对输入串“id*id”进行语法分析时，对应的文法符号为：</p>
<script type="math/tex; mode=display">
E \rightarrow E + T\ |\ T \\
T \rightarrow T * F \ |\ F \\
F \rightarrow (E) \ |\ \mathbf{id}</script><p>移入-归约步骤：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">栈</th>
<th style="text-align:right">输入</th>
<th style="text-align:left">动作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:right"><script type="math/tex">id_{1}*id_{2}</script> $</td>
<td style="text-align:left">移入（栈中）</td>
</tr>
<tr>
<td style="text-align:left">$ $$id_{1}$</td>
<td style="text-align:right">$*id_{2}$$ $</td>
<td style="text-align:left">按照<script type="math/tex">F\rightarrow id</script>进行归约</td>
</tr>
<tr>
<td style="text-align:left">$ F</td>
<td style="text-align:right"><script type="math/tex">*id_{2}</script> $</td>
<td style="text-align:left">按照<script type="math/tex">T\rightarrow F</script>进行归约</td>
</tr>
<tr>
<td style="text-align:left">$ T</td>
<td style="text-align:right"><script type="math/tex">*id_{2}</script> $</td>
<td style="text-align:left">移入（栈中）</td>
</tr>
<tr>
<td style="text-align:left">$ T*</td>
<td style="text-align:right"><script type="math/tex">id_{2}</script> $</td>
<td style="text-align:left">移入（栈中）</td>
</tr>
<tr>
<td style="text-align:left">$ <script type="math/tex">T*id_{2}</script></td>
<td style="text-align:right">$</td>
<td style="text-align:left">按照<script type="math/tex">F\rightarrow id</script>进行归约</td>
</tr>
<tr>
<td style="text-align:left">$T*F</td>
<td style="text-align:right">$</td>
<td style="text-align:left">按照<script type="math/tex">T\rightarrow T*F</script>进行归约</td>
</tr>
<tr>
<td style="text-align:left">$T</td>
<td style="text-align:right">$</td>
<td style="text-align:left">按照<script type="math/tex">E \rightarrow T</script>进行归约</td>
</tr>
<tr>
<td style="text-align:left">$E</td>
<td style="text-align:right">$</td>
<td style="text-align:left">接受</td>
</tr>
</tbody>
</table>
</div>
<p>最后一行我们看到了开始符号E，并且此时输入缓冲区为空。因此我们认为此次移入归约过程结束。</p>
<p>移入-归约语法分析器一共有4种可能的动作：</p>
<ul>
<li>1、移入：将下一个输入符号移入到栈中（句柄）；</li>
<li>2、归约：语法分析器在栈中确定适当的产生式；</li>
<li>3、接受：栈中包含开始符号，并且输入缓冲区为空；</li>
<li>4、报错：发现语法错误；</li>
</ul>
<blockquote>
<p>句柄总是出现在栈的顶端，绝不会出现在栈的中间。</p>
</blockquote>
<h3 id="移入-归约语法分析中的冲突"><a href="#移入-归约语法分析中的冲突" class="headerlink" title="移入-归约语法分析中的冲突"></a>移入-归约语法分析中的冲突</h3><p>假如知道了栈中的所有内容，以及接下来输入串中的k个输入符号：</p>
<ul>
<li><p>移入/归约冲突：当无法判断是进行移入，还是进行归约操作时出现冲突；</p>
<p>  对于产生式集合：</p>
<script type="math/tex; mode=display">
  stmt \rightarrow \mathbf{if}\ expr\ \mathbf{then}\ stmt\\
  stmt \rightarrow \mathbf{if}\ expr\ \mathbf{then}\ stmt\ \mathbf{else}\ stmt\\
  stmt \rightarrow \mathbf{other}\\</script><p>  当栈中元素为<code>$$ if expr then stmt``，而输入串为 ``else ... $$</code>。此时我们都无法确认句柄，因为我们既可以使用第一个产生式进行归约操作，又可以以第二个产生式进行移入操作，这就是移入-归约冲突。</p>
</li>
</ul>
<ul>
<li><p>归约/归约冲突：无法在多个可能的归约方法中选择正确的归约动作；</p>
<p>  对于产生式集合：</p>
<script type="math/tex; mode=display">
  ...\\
  parameter \rightarrow id\\
  expr \rightarrow id\\
  ...</script><p>  此时栈中元素为<code>...id(id</code>，此时id明显需要被归约，但是我们却无法确定使用哪个产生式作为句柄。</p>
</li>
</ul>
<p>在这一节中，我们主要学习了句柄，以及移入-归约的相关知识点。</p>
<h2 id="二、SLR（简单LR技术）"><a href="#二、SLR（简单LR技术）" class="headerlink" title="二、SLR（简单LR技术）"></a>二、SLR（简单LR技术）</h2><p>目前最流行的自底向上语法分析器都是基于所谓的LR(k)语法分析概念。 <strong>其中“L”表示对输入进行从左到右的扫描，“R”表示反向构造出一个最右推导序列，k表示在做出语法分析决定时向前看k个输入符号</strong>。目前我们只考虑k小于等于1的清空。</p>
<p>我们一共有三种LR技术：SLR、规范LR、LALR。本节主要讲SLR，下一篇文章讲规范LR和LALR。</p>
<h3 id="项（item）和LR-0-自动机"><a href="#项（item）和LR-0-自动机" class="headerlink" title="项（item）和LR(0)自动机"></a>项（item）和LR(0)自动机</h3><p>一个LR语法分析器通过维护一些状态，用这些状态来表明我们在语法分析过程中所处的位置，从而做出移入-归约决定。这些状态代表了“项”（item）的集合。</p>
<p>一个文法G的一个LR(0)项是G的一个产生式再加上一个位于它产生式体中某处的点。比如对于产生式 $A \rightarrow XYZ$ 的四个项为：</p>
<script type="math/tex; mode=display">
A \rightarrow \cdot XYZ \\
A \rightarrow X \cdot YZ \\
A \rightarrow XY\cdot Z \\
A \rightarrow XYZ\cdot \\</script><blockquote>
<p>产生式$A \rightarrow \epsilon$ 只生成一个项 $A\rightarrow \cdot$</p>
</blockquote>
<p>一个项可以表示为 <strong>一对整数</strong>，第一个整数是基础文法的产生式编号，第二个整数是点的位置。</p>
<p>项指明了在语法分析过程中，我们已经看到了产生式的哪些部分（由点号来区分）。比如对于项 $A\rightarrow \cdot XYZ$ 表明我们希望接下来在输入中看到一个从XYZ推导得到的串；项 $A\rightarrow X\cdot YZ$ 表明我们刚刚从输入中看到了一个可以由X推导得到的串，并且希望接下来能从YZ中推导得到串；项 $A\rightarrow XYZ \cdot$ 表明我们已经看到了产生式体XYZ，已经可以将其归约为A了。</p>
<p>LR(0)自动机的每个状态代表了规范LR(0)项集族中的一个项集（而项集又由多个项组合而成）。对于文法：</p>
<script type="math/tex; mode=display">
E \rightarrow E + T\ |\ T \\
T \rightarrow T * F \ |\ F \\
F \rightarrow (E) \ |\ \mathbf{id}</script><p>我们构造的LR(0)自动机如下（此时看不懂并不重要，因为这里面涉及到的闭包和GOTO尚未学习，在下面学习了闭包和GOTO函数之后可以对照着看看该自动机）：</p>
<p><img src="/uploads/bottom2top_syntax_parser/3.png" alt="LR(0)有穷自动机"></p>
<p>为了构造一个文法的规范LR(0)项集族，我们需要定一个 <strong>增广文法和两个函数：CLOSURE和GOTO</strong> 。如果文法G的开始符号为S，那么G的增广文法<script type="math/tex">G^{'}</script>就是在文法G的基础上新增一个产生式 <script type="math/tex">S^{'} \rightarrow S</script> 。</p>
<blockquote>
<p>引入新的增广产生式的目的是 <strong>告诉语法分析器何时应该停止语法分析并宣称接受输入符号串</strong> 。</p>
</blockquote>
<p>也就是说当且仅当语法分析器要使用规则 $S^{‘} \rightarrow S$ 进行归约时，输入符号串被接受。</p>
<p>这儿我归纳三个概念：</p>
<ul>
<li>项：单一的个体，在SLR中用一对整数表示（第一个整数是文法的产生式编号，第二个整数是点号在产生式的位置）；</li>
<li>项集：多个项的集合称为项集；</li>
<li>项集族：多个项集的集合称为项集族；</li>
</ul>
<h4 id="项集的闭包"><a href="#项集的闭包" class="headerlink" title="项集的闭包"></a>项集的闭包</h4><p>如果 I 是 文法G 的一个项集（项的集合，其数量大于等于1个）。那么构造CLOSURE(I)的规则如下：</p>
<ul>
<li>1、将I中各个项加入到CLOSURE(I)中；</li>
<li><p>2、如果CLOSURE(I)中存在一个项 <script type="math/tex">A \rightarrow \alpha \cdot B \beta</script>，并存在产生式<script type="math/tex">B \rightarrow \gamma</script>。如果该产生式的项 <script type="math/tex">B \rightarrow \cdot \gamma</script> 不存在与CLOSURE(I)中，则将项<script type="math/tex">B \rightarrow \cdot \gamma</script> 加入到 CLOSURE(I)中。<br>  一直循环下去，直到没有新的项可以加入到CLOSURE(I)中。</p>
<p>  <img src="/uploads/bottom2top_syntax_parser/4.png" alt="I0"></p>
</li>
</ul>
<p>这个可能比较抽象，可以对照上图 <script type="math/tex">I_{0}</script> 项集来理解这两个规则，<script type="math/tex">I_{0}</script> 中白色部分即规则1的方式添加到CLOSURE( <script type="math/tex">I_{0}</script> )中；而灰色部分则是因为点号右边存在非终结符，并且有对应的产生式，那么我们就可以应用规则2 循环将其添加到CLOSURE( <script type="math/tex">I_{0}</script> ) 中。 </p>
<p>使用项集闭包的目的就是为了希望能够找到对应的产生式可以推导出点号右边的符号，而项集就是收集所有可能出现的产生式集合。从归约的角度来看，比如对于产生式 <script type="math/tex">A \rightarrow \alpha \cdot B \beta</script> ，此时我们希望能够出现对应的产生式（ <script type="math/tex">B\rightarrow \gamma</script> ）能够归约点号右边即将出现的符号。 反过来看，比如id可以归约为F，F可以归约T，T可以归约为E，而最后E可以归约为 <script type="math/tex">E^{'}</script> ，则归约过程结束。</p>
<p>下面是一个简单的closure函数实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">SetOfItems SLR::CanonicalLR::closure(SetOfItems&amp; set) &#123;</div><div class="line">    SLR::ContextFreeGrammar grammer = this-&gt;grammer;</div><div class="line">    SetOfItems result(set);</div><div class="line">    /// SLR::SetOfItems::items_iterator</div><div class="line">    /// 循环当前项集，需要注意的是是result集合自己在发生变动，同时也是该集合在循环。也就是说如果有新的项被添加到集合内之后，还会继续查看这个新项的产生式情况</div><div class="line">    for (SLR::items_iterator itr = result.begin(); itr != result.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">       Item item = *itr;</div><div class="line">       /// 在书中我们知道项的表示方式是：数对</div><div class="line">       /// item.id: 一个数表示当前项在产生式集合中和的下标（第几个具体的产生式）</div><div class="line">       /// item.position: 另一个数是表示点号在产生式体中的下标</div><div class="line">       SLR::Production production = grammer.productions[item.id]; /// 没有做越界保护</div><div class="line">       vector&lt;Symbol *&gt;bodies = production.bodies;</div><div class="line">       if (item.position &gt;= bodies.size())</div><div class="line">       &#123; /// 说明此时点号在产生式的最右边，也就是说此时我们已经可以把产生式体归约为产生式头部了，无需继续添加</div><div class="line">           continue;</div><div class="line">       &#125;</div><div class="line">       Symbol* symbol = production.bodies[item.position];</div><div class="line">       bool isTerminal = symbol-&gt;isTerminal();</div><div class="line">       if (isTerminal)</div><div class="line">       &#123;</div><div class="line">           continue;</div><div class="line">       &#125;</div><div class="line">       /// 此时点号右边是非终结符，需要查看该非终结符是否有对应的产生式</div><div class="line">       int id = symbol-&gt;identifier();</div><div class="line">       vector&lt;Production&gt; productions = grammer.productions;</div><div class="line">       bool contain_grammer = false;</div><div class="line">       for (vector&lt;Production&gt;::iterator itr = productions.begin(); itr != productions.end(); ++itr)</div><div class="line">       &#123;</div><div class="line">           int idx = itr-productions.begin();</div><div class="line">           if ((itr-&gt;header).identifier() == id)</div><div class="line">           &#123;</div><div class="line">                Item new_item(idx,0);</div><div class="line">                result.push_back(new_item);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    return result; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们通过观察上图可以知道，如果点在最左边的某个产生式（比如上面的 <script type="math/tex">E^{'}\rightarrow \cdot\ E</script> ）被加入到项集族 I 中，那么该产生式所有依据<code>closure</code>函数添加到项集中的项（比如上图中灰色区域部分的项）我们是没有必要全部列出来的，因此我们将上图中白色区域中的项称为 <strong>内核项</strong>，灰色区域的项称为 <strong>非内核项</strong>。</p>
<ul>
<li><strong>内核项</strong>：包括初始项<script type="math/tex">E{'} \rightarrow \cdot E</script>，以及<strong>所有点不在最左边的项</strong>；</li>
<li><strong>非内核项</strong>：除了初始项之外，所有<strong>点在最左边的项</strong>；</li>
</ul>
<p>通过求闭包时加入的项不可能是内核项，因此我们抛弃所有非内核项，就可以用很少的内存来表示真正感兴趣项的集合。</p>
<h4 id="GOTO函数"><a href="#GOTO函数" class="headerlink" title="GOTO函数"></a>GOTO函数</h4><p>函数<code>GOTO(I,X)</code>，其中 I 是项集族中的一个项集，X为一个文法符号。该函数用于定义一个文法的LR(0)自动机中的转换，这个自动机的状态对应于项集族中的项集，而GOTO函数描述了当输入为X时，离开状态X的转换。</p>
<p>比如我截取了上面大图中的一个部分 ：<br><img src="/uploads/bottom2top_syntax_parser/5.png" alt="GOTO(I_{1}, +)"></p>
<p>它就表示了函数 <script type="math/tex">GOTO(I_{1},\ +)</script> 。 下面的代码大致的实现了一下GOTO函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">SetOfItems SLR::CanonicalLR::lr_goto(SetOfItems&amp; set, Symbol *symbol, int *offset) &#123;</div><div class="line"></div><div class="line">    int index = set.cacheForSymbol(symbol-&gt;identifier);</div><div class="line">    if (index &gt;= 0)</div><div class="line">    &#123;</div><div class="line">        if (offset != nullptr)</div><div class="line">        &#123;</div><div class="line">           *offset = index;</div><div class="line">        &#125;    </div><div class="line">        return item_set[index];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ContextFreeGrammar grammer = this-&gt;grammer;</div><div class="line">    SetOfItems result;</div><div class="line">    for (SLR::items_iterator itr = set.begin(); itr != set.end(); ++itr) </div><div class="line">    &#123;</div><div class="line">        Item item = *itr;</div><div class="line">        /// 在书中我们知道项的表示方式是：数对</div><div class="line">        /// item.id: 一个数表示当前项在产生式集合中和的下标（第几个具体的产生式）</div><div class="line">        /// item.position: 另一个数是表示点号在产生式体中的下标</div><div class="line">        uint idx = item.id;</div><div class="line">        if (idx &gt;= grammer.productions.size())</div><div class="line">        &#123;</div><div class="line">            return set; /// 异常</div><div class="line">        &#125;</div><div class="line">        Production production = grammer.productions[idx];</div><div class="line">        vector&lt;Symbol *&gt; bodies = production.bodies;</div><div class="line">        if (item.position &gt;= bodies.size())</div><div class="line">        &#123;</div><div class="line">            continue; /// 点号在产生式的最右边；</div><div class="line">        &#125;</div><div class="line">        Symbol *current_sym = bodies[item.position];</div><div class="line">        if (current_sym-&gt;identifier() != symbol-&gt;identifier())</div><div class="line">        &#123;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Item new_item(idx,item.position+1); /// 点号右移</div><div class="line">        int index = contain_item(new_item);</div><div class="line">        if (index &gt;= 0)</div><div class="line">        &#123; /// 如果生成的item已经存在于某一个项集中，则返回当前项集</div><div class="line">            return item_set[index];</div><div class="line">        &#125;</div><div class="line">        /// 新生成的item并未存在，将该项放入新的项集中</div><div class="line">        std::string key  = format(&quot;%d_%d&quot;,item.id,item.position);</div><div class="line">        item_map.insert(make_pair(key, item_set.size()));</div><div class="line">        result.push_back(new_item);</div><div class="line">    &#125;</div><div class="line">    if (result.count() &gt; 0)</div><div class="line">    &#123;</div><div class="line">        if (offset)</div><div class="line">        &#123;</div><div class="line">            *offset = item_set.size();</div><div class="line">            item_set.push_back(result);</div><div class="line">            set.setCache(*offset, symbol-&gt;identifier());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="LR-0-自动机的用法（帮助我们进行移入-归约操作）"><a href="#LR-0-自动机的用法（帮助我们进行移入-归约操作）" class="headerlink" title="LR(0)自动机的用法（帮助我们进行移入-归约操作）"></a>LR(0)自动机的用法（帮助我们进行移入-归约操作）</h4><p>下面是通过使用CLOSURE函数和GOTO函数构造规范LR(0)项集族的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void SLR::CanonicalLR::items() &#123;</div><div class="line">    /// 获取增广文法的初始化产生式，并构造初始的项集</div><div class="line">    SetOfItems set;</div><div class="line">    Item augmented_item(0,0);</div><div class="line">    set.push_back(augmented_item);</div><div class="line">    (this-&gt;item_set).push_back(set); /// 初始项集族</div><div class="line">    /// 遍历每一个项集</div><div class="line">    for (vector&lt;SetOfItems&gt;::iterator vitr = (this-&gt;item_set).begin(); vitr != (this-&gt;item_set).end(); ++vitr)</div><div class="line">    &#123;</div><div class="line">        /// 遍历当前文法所有的符号</div><div class="line">        for (vector&lt;SLR::Symbol *&gt;::iterator itr = grammer.symbols.begin(); itr != grammer.symbols.end() ++itr)</div><div class="line">        &#123;</div><div class="line">            SetOfItems result = lr_goto(*vitr, *itr);</div><div class="line">            int contain = contain_set(result);</div><div class="line">            if (contain == -1)</div><div class="line">            &#123;</div><div class="line">                item_set.push_back(result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SLR的中心思想是根据文法构造出LR(0)自动机。这个自动机的状态是规范LR(0)项集族中的元素，而它的转换由GOTO函数给出。我们再来看看LR(0)自动机</p>
<p><img src="/uploads/bottom2top_syntax_parser/3.png" alt="LR(0)有穷自动机"></p>
<p>LR(0)自动机可以帮助我们决定何时进行移入，何时进行规约操作。 假设文法符号串 γ 使得LR(0)自动机从开始状态0运行到某个状态 j 。此时如果下一个输入符号为 a，并且状态 j 有一个在 a 上的转换（即存在GOTO(j, a)），那么此时我们就 <strong>移入</strong> a；否则我们就选择 <strong>归约</strong> 动作。我们可以通过查看状态 j （项集）内各个项点号的位置，来决定如何进行归约操作（具体可以看本节开头部分关于点号存在不同位置所表达的含义）。</p>
<p>比如，<script type="math/tex">E^{'} \rightarrow E\cdot</script> 的点号在最右边，它的意思是说我们已经收到期望归约所需的全部符号，可以进行归约了；<br>而 <script type="math/tex">E\rightarrow E\cdot+T</script> 的点号右边存在符号”+”，说明此时我们收到了符号E，如果想要以该产生式进行归约的话，我期望下一个输入串是”+”。因此当输入“+”号，LR(0)自动机认为此时需要做移入操作；而当输入为非”+”号时，LR(0)将以项集中第一个项进行归约操作。</p>
<p><img src="/uploads/bottom2top_syntax_parser/5.png" alt="GOTO(I_{1}, +)"></p>
<h4 id="ACTION函数"><a href="#ACTION函数" class="headerlink" title="ACTION函数"></a>ACTION函数</h4><p>在前面我们已经知道如何编写和使用GOTO函数，但是并不知道ACTION函数是如何实现的。那么现在我们就来具体的看看是如何构造ACTION函数的:</p>
<ul>
<li>1）、如果项 <script type="math/tex">[A \rightarrow \alpha \cdot a \beta]</script> 在状态i中。并且GOTO(Ii, a) 为新状态 j，那么 ACTION(i,a) 函数对应的输出值为 <strong>“移入 j”</strong>；</li>
<li>2）、如果项 <script type="math/tex">[A \rightarrow \alpha \cdot]</script> 在状态i中，那么对于FOLLOW(A)中所有的a，将 ACTION(i,a) 的输出值为 <strong>“归约 A -&gt; α”</strong>。这里A不是增广文法的开始符号；</li>
<li>3）、如果增广文法的开始项，比如 <script type="math/tex">[S' \rightarrow S]</script> 在状态i中，那么 ACTION(i, $) 输出值为 <strong>“接受”</strong>；</li>
</ul>
<p>如果使用上诉规则时，发生了任何冲突动作。我们就说这个文法不是SLR(1)的。</p>
<p><code>ACTION(i,a)</code> 存在两个参数，分别是表示状态的i，以及 <strong>终结符号</strong> a（下面我已经把ACTION函数的伪代码实现已列出）。而ACTION函数的返回值有四种可能，分别是：</p>
<ul>
<li><strong>移入</strong>：语法分析器采取的动作是把输入符号 a 高效的移入栈中；</li>
<li><strong>归约</strong>：语法分析器的动作是把栈顶元素高效地归约为对应产生式的头部（比如产生式$A \rightarrow \beta$，将β归约为A）；</li>
<li><strong>接受</strong>：语法分析器接受输入并完成语法分析过程；</li>
<li><strong>报错</strong>：语法分析器在它的输入中发现了一个错误，并执行某个纠正错误动作；</li>
</ul>
<p>下面是Action函数的一个伪代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">SLR::LR_Action* SLR::CanonicalLR::action(SetOfItems&amp; set, SLR::Symbol *symbol) &#123;</div><div class="line">    if (symbol-&gt;isTerminal() == false) /// 非终结符直接返回</div><div class="line">    &#123;</div><div class="line">        return nullptr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LR_Action *action = set.actionForSymbol(symbol-&gt;identifier());</div><div class="line">    if (action != nullptr)</div><div class="line">    &#123;</div><div class="line">        return action;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int offset = -1;</div><div class="line">    SetOfItems result = lr_goto(set,symbol, &amp;offset);</div><div class="line">    if (result != set) /// 不同的两个状态，说明goto函数有效，此时应该做移入操作</div><div class="line">    &#123;</div><div class="line">        action = new ShiftAction(offset);</div><div class="line">        set.setActionForSymbol(symbol-&gt;identifier(), action);</div><div class="line">        return action;</div><div class="line">    &#125;</div><div class="line">    ContextFreeGrammar grammer = this-&gt;grammer;</div><div class="line">    SetOfItems result;</div><div class="line">    for (SLR::items_iterator itr = set.begin(); itr != set.end(); ++itr) </div><div class="line">    &#123;</div><div class="line">        Item item = *itr;</div><div class="line">        /// 在书中我们知道项的表示方式是：数对</div><div class="line">        /// item.id: 一个数表示当前项在产生式集合中和的下标（第几个具体的产生式）</div><div class="line">        /// item.position: 另一个数是表示点号在产生式体中的下标</div><div class="line">        uint idx = item.id;</div><div class="line">        if (idx &gt;= grammer.productions.size())</div><div class="line">        &#123;</div><div class="line">            continue; /// 异常</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Production production = grammer.productions[idx];</div><div class="line">        vector&lt;Symbol *&gt; bodies = production.bodies;</div><div class="line">        if (item.position != bodies.size())</div><div class="line">        &#123;</div><div class="line">            continue; </div><div class="line">        &#125;</div><div class="line">        /// 点号在最左边，并且当前产生式为产生式集合中的第一个，即增广文法的产生式</div><div class="line">        if (idx == 0)</div><div class="line">        &#123;</div><div class="line">            action = new AcceptAction();</div><div class="line">            set.setActionForSymbol(symbol-&gt;identifier(), action);</div><div class="line">            return action;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        /// 点号在产生式的最右边的一般情况</div><div class="line">        vector&lt;Symbol *&gt; syms = grammer.FOLLOW(&amp;(production.header));</div><div class="line">        for (vector&lt;Symbol *&gt;::iterator itr = syms.begin(); itr != syms.end(); ++itr)</div><div class="line">        &#123;</div><div class="line">            if (symbol -&gt; identifier() == (*itr)-&gt;identifier()) </div><div class="line">            &#123;</div><div class="line">                action = new ReduceAction(&amp;production);</div><div class="line">                set.setActionForSymbol(symbol-&gt;identifier(), action);</div><div class="line">                return action;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    action = new ErrorAction();</div><div class="line">    set.setActionForSymbol(symbol-&gt;identifier(), action);</div><div class="line">    return action;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="LR语法分析算法"><a href="#LR语法分析算法" class="headerlink" title="LR语法分析算法"></a>LR语法分析算法</h4><p>下图是一个LR语法分析器的示意图，它由一个输入、一个输出、一个栈、一个驱动程序和一个语法分析表组成，其中语法分析表包括了两个部分，分别是ACTION和GOTO：</p>
<p><img src="/uploads/bottom2top_syntax_parser/6.png" alt="LR语法分析器示意图"></p>
<ul>
<li>1）、栈中保存的是LR(0)自动机中的状态，<strong>各个状态都和某个项集对应</strong>；</li>
<li>2）、语法分析表是随着语法分析器的不同而变化的。GOTO对应于自动机的转换；而ACTION则表示当前的动作；</li>
</ul>
<p>我们定义LR语法分析器的配置如下：</p>
<script type="math/tex; mode=display">
(s_{0}s_{1}...s_{m},\ a_{i}a_{i+1}...a_{n},\ \$);</script><p>其中第一个分量表示栈中的内容（上图中左侧的栈，其中s<sub>m</sub> 为栈顶 ），第二个分量是余下的输入串。我们可以来看看ACTION函数和LR语法分析器配置是如何配合使用的：</p>
<ul>
<li><script type="math/tex">ACTION[s_{m},a_{i}]=移入\ s</script> ：那么语法分析器就执行一次移入动作，将下一个状态s移入栈中，此时的配置为：</li>
</ul>
<script type="math/tex; mode=display">
(s_{0}s_{1}...s_{m}s,\ a_{i+1}...a_{n},\ \$);</script><ul>
<li><p><script type="math/tex">ACTION[s_{m},a_{i}] = 归约 A\rightarrow \beta</script> ：那么语法分析器执行一次归约动作，其中r是β的长度，$s = GOTO[s_{m-r}, A]$</p>
<p>  语法分析器首先将r个状态符号弹出栈，使得状态 s<sub>m-r</sub> 位于栈顶，然后语法分析器将 s 压入栈中。 <strong>在一个归约动作中，当前输入符号不发生改变</strong> 。</p>
</li>
</ul>
<script type="math/tex; mode=display">
(s_{0}s_{1}...s_{m-r}s,\ a_{i}a_{i+1}...a_{n},\ \$);</script><ul>
<li><p><script type="math/tex">ACTION[s_{m},a_{i}] = 接受</script> ： 表示语法分析过程完成；</p>
</li>
<li><p><script type="math/tex">ACTION[s_{m},a_{i}] = 报错</script> ： 表明语法分析器发生了一个语法错误；</p>
</li>
</ul>
<blockquote>
<p>两个LR语法分析器之间唯一的区别是他们的语法分析表ACTION表项和GOTO表项中包含的信息不同；</p>
</blockquote>
<p>现在我们可以综合上面已有的知识来写一个简单的SLR语法分析程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">class CanonicalLR &#123;</div><div class="line">private:</div><div class="line">    ContextFreeGrammar grammer;</div><div class="line">    vector &lt;SetOfItems&gt; item_set;</div><div class="line">    map&lt;string,int&gt; item_map; /// key: item.id+item.position; value: item_set index</div><div class="line">public:</div><div class="line">    SetOfItems closure(SetOfItems&amp; set);</div><div class="line">    SetOfItems lr_goto(SetOfItems&amp; set, SLR::Symbol *symbol, int *offset);</div><div class="line">    SLR::LR_Action* SLR::CanonicalLR::action(SetOfItems&amp; set, SLR::Symbol *symbol);</div><div class="line">    void items();</div><div class="line">    int contain_set(SetOfItems&amp; set); /// 不包含返回-1，包含返回非负数</div><div class="line">    int contain_item(Item&amp; item); /// 不包含返回-1，包含返回非负数</div><div class="line">    friend class SLRAnalyser;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class SLRAnalyser &#123;</div><div class="line">    vector&lt;Symbol *&gt; inputTokens; /// 输入串</div><div class="line">    stack&lt;int&gt; stack_;</div><div class="line">    CanonicalLR lr;</div><div class="line">public:</div><div class="line">    /// 出现错误时，信息记录</div><div class="line">    struct Error&#123;</div><div class="line">        Symbol *sym;</div><div class="line">        stack&lt;int&gt; stck;</div><div class="line">        Error(Symbol *s, stack&lt;int&gt;&amp; sk):sym(s),stck(sk)&#123;&#125;</div><div class="line">        Error() &#123;</div><div class="line">            sym = nullptr;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">private:</div><div class="line">    Error error;</div><div class="line">public:   </div><div class="line">    SLRAnalyser() &#123;</div><div class="line">        stack_.push(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SLRAnalyser::Error slrError() &#123; /// 当出现异常时，获取错误信息</div><div class="line">        return error;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vector&lt;Production&gt; start() &#123;</div><div class="line">        vector&lt;Production&gt; result;</div><div class="line">        int i = 0;</div><div class="line">        Symbol *input_sym = inputTokens[i];</div><div class="line">        while (1)</div><div class="line">        &#123;</div><div class="line">            int idx = stack_.top();</div><div class="line">            SetOfItems set = lr.item_set[idx];  </div><div class="line">            LR_Action *action = lr.action(set, input_sym);</div><div class="line">            if (action-&gt;isShiftAction()) /// 移入</div><div class="line">            &#123;</div><div class="line">                ShiftAction *shift_action = dynamic_cast&lt;ShiftAction *&gt;(action);</div><div class="line">                int dst = shift_action-&gt;opNum;</div><div class="line">                stack_.push(dst);</div><div class="line">                i++;</div><div class="line">                input_sym = inputTokens[i];</div><div class="line">            &#125;</div><div class="line">            else if (action-&gt;isReduceAction()) /// 归约</div><div class="line">            &#123;</div><div class="line">                stack_.pop();</div><div class="line">                ReduceAction *reduce_action = dynamic_cast&lt;ReduceAction *&gt;(action);</div><div class="line">                Symbol *sym = &amp;(reduce_action-&gt;production-&gt;header);</div><div class="line">                SetOfItems c_set = lr.item_set[stack_.top()];</div><div class="line">                int dst;</div><div class="line">                lr.lr_goto(c_set, sym, &amp;dst);</div><div class="line">                stack_.push(dst);</div><div class="line">                result.push_back(reduce_action-&gt;production);</div><div class="line">            &#125;</div><div class="line">            else if (action-&gt;isAcceptAction()) /// 接受</div><div class="line">            &#123;</div><div class="line">                error.sym = nullptr;</div><div class="line">                stack&lt;int&gt; sk;</div><div class="line">                error.stck = sk;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            else /// 报错</div><div class="line">            &#123; </div><div class="line">                SLRAnalyser::Error err(input_sym, stack_);</div><div class="line">                error = err;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="可行前缀"><a href="#可行前缀" class="headerlink" title="可行前缀"></a>可行前缀</h4><p>在结束SLR相关内容之前，我们来看看“可行前缀”。可以出现在移入-归约语法分析器栈中的最右句型前缀被称为 <strong>可行前缀</strong> ，详细定义为：</p>
<blockquote>
<p>一个可行前缀是一个最右句型的前缀，并且该前缀没有越过该句型最右句柄的右端。</p>
</blockquote>
<p>因此我们可以在可行前缀之后增加一些终结符号来得到一个最右句型。这里再说一下上面的提到的几个概念：</p>
<ul>
<li><p><strong>最右句型</strong>：从开始符号推导得到终结符的过程中出现的产生式，我们说这就叫句型。而最右句型指的是使用最右推导时出现的句型（最右推导，总是选择最右边的非终结符号）；</p>
<p>  句子是不包含非终结符号的特殊句型；</p>
</li>
<li><strong>最右句柄</strong>：在本篇文章的开头有讲，简单来说在最右句型归约时选择的产生式，而句柄正式该产生式的产生式体；</li>
</ul>
<p>比如对于一个推导过程 <script type="math/tex">S \rightarrow \alpha A w \rightarrow \alpha \beta_{1}\beta_{2}w</script>，对于产生式<script type="math/tex">A\rightarrow\beta_{1}\beta_{2}</script> ，我们就可以说前缀 <script type="math/tex">\alpha\beta_{1}</script> 对于句柄 <script type="math/tex">\beta_{1}\beta_{2}</script> 是有效的，因为前缀 <script type="math/tex">\alpha\beta_{1}</script> 并未包含 <script type="math/tex">\beta_{2}</script> ，所以<script type="math/tex">\alpha \beta_{1}</script>是一个可行前缀。</p>
<p>这里的<script type="math/tex">\alpha \beta_{1}\beta_{2}w</script>称为最右句型（因为对于句型<script type="math/tex">\alpha A w</script>而言，w为终结符号，最右边的非终结符号为A）；</p>
<p>这里 <script type="math/tex">\beta_{1}\beta_{2}</script> 作为产生式 <script type="math/tex">A\rightarrow\beta_{1}\beta_{2}</script> 的产生式体，而w不能进行归约，而最右边可以进行的只有<script type="math/tex">\beta_{1}\beta_{2}</script>，因此它就是该句型的最右句柄。而<script type="math/tex">\beta_{2}</script>是作为该句柄的最右端。</p>
<p>现在综合上面所有的信息来看可行前缀，即该前缀是最右句型的一个前缀，而且该前缀没有包含完整的句柄，因为如果包含了完整的句柄之后，那么该最右句型就可以将产生式体归约为产生式头。</p>
<p>而可行前缀的作用是：可行前缀信息可以帮助我们决定是进行归约还是移入操作。比如当我们遇到了可行前缀之后，很明显目前还不能进行归约操作，因为进行归约操作的句柄还不完整。因此遇到可行前缀之后大多数情况下是要进行移入操作的；只有当句柄的最右端为空串时，此时应该做归约操作。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在这篇文章中，我们主要是接触了一些LR语法分析的基本概念。以及最简单的SLR语法分析技术，并且给出了相应的伪代码，包括有CLOSURE\GOTO\ACTION等等（关于相关类之间的关系在我的Github上能找到）。最后介绍了一个很重要的概念——可行前缀，这在后续的两个LR语法分析器中都有涉及。</p>
<p>说个题外话，之前在学习这方面知识的时候一直在思考这个产生式（包括对应的语法分析树）具体的作用是什么，体现在了什么地方。很显然在日常开发工作中基本上是不需要关心的。直到最近我在看<a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html#grammar-additions" target="_blank" rel="external">clang文档-Grammar Additions</a>时，里面看到了关于”@”相关语法的产生式，瞬间感觉到了亲切感：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">objc-at-expression : &apos;@&apos; (string-literal | encode-literal | selector-literal | protocol-literal | object-literal)</div><div class="line">                   ;</div><div class="line"></div><div class="line">object-literal : (&apos;+&apos; | &apos;-&apos;)? numeric-constant</div><div class="line">               | character-constant</div><div class="line">               | boolean-constant</div><div class="line">               | array-literal</div><div class="line">               | dictionary-literal</div><div class="line">               ;</div><div class="line"></div><div class="line">boolean-constant : &apos;__objc_yes&apos; | &apos;__objc_no&apos; | &apos;true&apos; | &apos;false&apos;  /* boolean keywords. */</div><div class="line">                 ;</div><div class="line"></div><div class="line">array-literal : &apos;[&apos; assignment-expression-list &apos;]&apos;</div><div class="line">              ;</div><div class="line"></div><div class="line">assignment-expression-list : assignment-expression (&apos;,&apos; assignment-expression-list)?</div><div class="line">                           | /* empty */</div><div class="line">                           ;</div><div class="line"></div><div class="line">dictionary-literal : &apos;&#123;&apos; key-value-list &apos;&#125;&apos;</div><div class="line">                   ;</div><div class="line"></div><div class="line">key-value-list : key-value-pair (&apos;,&apos; key-value-list)?</div><div class="line">               | /* empty */</div><div class="line">               ;</div><div class="line"></div><div class="line">key-value-pair : assignment-expression &apos;:&apos; assignment-expression</div><div class="line">               ;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章主要来看看SLR语法分析，他是一个LR语法分析。其中L表示最左向右扫描，R表示最右推导序列。&lt;br&gt;在本篇文章中，我们会接触 移入-
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="语法分析" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>语法分析——自顶向下语法分析</title>
    <link href="http://yoursite.com/2020/04/20/top2bottom_syntax_parser/"/>
    <id>http://yoursite.com/2020/04/20/top2bottom_syntax_parser/</id>
    <published>2020-04-20T15:47:58.000Z</published>
    <updated>2020-07-04T04:24:11.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自顶向下语法分析可以被看作是为输入串构造语法分析树的问题，它从语法分析的根节点开始，按照深度优先的规则创建这棵语法分析树的各个结点，自顶向下语法分析也可以被看作寻找输入串最左推导的过程。</p>
<p>本文的行文以下面的顺序展开：</p>
<p>1）、首先是以一个自顶向下语法分析的例子，为自顶向下语法分析有个大致的认识；</p>
<p>2）、其次我们就需要深入地了解自顶向下语法分析中使用到的“ <strong>递归下降语法分析</strong>”；</p>
<p>3）、但递归下降的语法分析存在一个很大的弊端就是有回溯的可能性，为了减少回溯的次数，因此我们需要向前看多个字符。 <strong>LL(k)</strong> ，其中k表示向前看的字符数；</p>
<p>4）、为了能够更加准确地知道向前看字符，我们需要构造“ <strong>预测分析表</strong> ”，而 <code>FIRST</code> 和 <code>FOLLOW</code> 集合是构造预测分析表必不可少的部分；</p>
<p>好吧，那我们先来看一个自顶向下的语法分析例子。</p>
<h2 id="一、自顶向下语法分析示例"><a href="#一、自顶向下语法分析示例" class="headerlink" title="一、自顶向下语法分析示例"></a>一、自顶向下语法分析示例</h2><p>我们消除了左递归之后的文法（关于消除左递归可在上一篇文章中查看）：</p>
<script type="math/tex; mode=display">
E \rightarrow TE^{'} \\ 
E^{'} \rightarrow +TE^{'}\ |\ \epsilon\\ 
T \rightarrow FT^{'}\\ 
T^{'} \rightarrow *FT^{'}\ |\ \epsilon \\ 
F \rightarrow (E)\ |\ \mathbf{id}</script><p>对于输入串 <code>id + id*id</code> 语法分析树推导序列如下图所示：</p>
<p><img src="/uploads/top2bottom_syntax_parser/1.png" alt=""></p>
<p>这里使用的最左推导，每次都是寻找当前语法分析树中最左边的非终结符进行推导操作。在自顶向下的分析过程中，对于同一非终结符号的选择指定产生式成为了关键问题，比如对于非终结符F来说，它存在两个产生式 <script type="math/tex">F \rightarrow (E)</script> 和 <script type="math/tex">F \rightarrow \mathbf{id}</script> ，如果我们选择错误之后，则难免需要进行回溯，并替换为另一个正确地产生式。这种分析方式就是我们首先要学习的 <strong>递归下降语法分析</strong> 。</p>
<p>但我们可以使用预测分析技术来避免回溯的发生，它通过向前看固定多个符号来选择正确地产生式。比如我们向前看 k 个符号，那么这类文法为 <strong>LL(k)</strong> 文法。而我们后续要学习的LL(1)文法，就是该文法的特例。即我们向前看1个符号。</p>
<h2 id="递归下降的语法分析"><a href="#递归下降的语法分析" class="headerlink" title="递归下降的语法分析"></a>递归下降的语法分析</h2><p>一个递归下降语法分析程序由一组过程（也可以理解为C语言里面的函数）组成，每个非终结符号有一个对应的过程。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void expr() &#123;...&#125;</div><div class="line">void statement() &#123;...&#125;</div><div class="line">void S() &#123;...&#125;</div></pre></td></tr></table></figure>
<p>程序的执行从开始符号对应的过程开始，如果这个过程完整地扫描了整个输入串，它就停止执行并宣布语法分析成功完成。</p>
<p>下面是一段伪代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void X1() &#123;...&#125;</div><div class="line">void X2() &#123;...&#125;</div><div class="line">...</div><div class="line">void Xk() &#123;...&#125;</div><div class="line"></div><div class="line">void A() &#123;</div><div class="line">    选择一个A产生式：A -&gt; X1X2X3... Xk； /// 需要注意的是这里X1, X2, X3, ... Xk组成的一个符号串，并不是非终结符号A的多个产生式</div><div class="line">    for(i = 1 to k) &#123;</div><div class="line">        if (Xi 是一个非终结符号) &#123; 调用Xi(); &#125;</div><div class="line">        else if (Xi等于当前的输入符号a) &#123; 读取下一个输入符号; &#125;</div><div class="line">        else &#123; 发生错误; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的Xi有可能就是非终结符号<code>A</code>自身，因此可能会形成递归调用的场景。通用的递归下降分析技术可能需要回溯，也就是说我们可能需要重复扫描输入。要支持回溯的话，那我们就需要修改上面的代码：</p>
<p>1）、首先需要按照非终结符号产生式的顺序逐个尝试各个产生式；</p>
<p>2）、然后需要一个局部指针变量来保存当前进行匹配的符号；</p>
<p>3）、如果发生当前既不是非终结符号，又不等于当前的输入符号时。我们需要将输入符号回溯到局部指针变量指向的符号；</p>
<p>4）、如果再也没有当前非终结符号产生式可尝试时，我们才认为发生了错误；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">void X1() &#123;...&#125;</div><div class="line">void X2() &#123;...&#125;</div><div class="line">...</div><div class="line">void Xk() &#123;...&#125;</div><div class="line"></div><div class="line">char *input_char; /// 输入字符</div><div class="line"></div><div class="line">void A() &#123;</div><div class="line">    非终结符号A的产生式集合：&#123;</div><div class="line">        A-&gt;X1X2X3... Xk,</div><div class="line">        A-&gt;Y1Y2Y3... Yk,</div><div class="line">        A-&gt;Z1Z2Z3... Zk</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for (选择一个A产生式：A -&gt; X1X2X3... Xk) &#123; /// -----&gt; 1</div><div class="line">        char *pivot = &amp;a; /// -----&gt; 2</div><div class="line">        for(i = 1 to k) &#123;</div><div class="line">            if (Xi 是一个非终结符号) &#123; 调用Xi(); &#125;</div><div class="line">            else if (Xi等于当前的输入符号*input_char) &#123; </div><div class="line">                读取下一个输入符号; </div><div class="line">                input_char++;</div><div class="line">            &#125; else &#123; </div><div class="line">                input_char = pivot; /// -----&gt; 3</div><div class="line">                break; </div><div class="line">            &#125; /// 继续读取下一个产生式</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (*input_char == *pivot) &#123;</div><div class="line">        发生了错误; /// -----&gt; 4</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Ⅰ、具体实例"><a href="#Ⅰ、具体实例" class="headerlink" title="Ⅰ、具体实例"></a>Ⅰ、具体实例</h3><p>下面我们来看一个具体的例子，对于文法：</p>
<script type="math/tex; mode=display">
S \rightarrow c A d \\
A \rightarrow ab\ |\ a</script><p>对于输入串 <code>w = cad</code>，其递归下降的语法分析过程为：</p>
<ul>
<li>1、对于开始符号<script type="math/tex">S \rightarrow c A d</script> ，并且此时的输入指针为 <code>c</code>，此时我们展开开始符号S</li>
</ul>
<p><img src="/uploads/top2bottom_syntax_parser/2.png" alt=""></p>
<ul>
<li>2、从输入指针指向的输入符号 <code>c</code> 和当前开始符号S展开的语法分析树最左边的叶子结点c相匹配，此时我们将指针移动到 <code>a</code>，并且考虑当前语法分析树的非终结符号A（从左到右扫描符号）。</li>
</ul>
<p><img src="/uploads/top2bottom_syntax_parser/3.png" alt=""></p>
<ul>
<li>3、我们使用产生式 <script type="math/tex">A \rightarrow ab</script> 进行展开。很明显第二个输入符号 <code>a</code> 匹配成功。</li>
</ul>
<p><img src="/uploads/top2bottom_syntax_parser/4.png" alt=""></p>
<ul>
<li>4、现在我们将输入指针移动到 <code>d</code> ，并且把语法分析树的当前结点移动到结点 <code>b</code> 。很明显可以看出来 d 和 b 并不匹配。</li>
</ul>
<p><img src="/uploads/top2bottom_syntax_parser/5.png" alt=""></p>
<ul>
<li>5、此时我们需要查看对于非终结符号A，是否存在尚未尝试过的产生式。在回到A时，我们需要将输入指针回退到上一个位置处，并且使用产生式 <script type="math/tex">A \rightarrow a</script> 进行推导：</li>
</ul>
<p><img src="/uploads/top2bottom_syntax_parser/6.png" alt=""></p>
<p>叶子结点 <code>a</code> 和当前输入指针指向的输入符号成功匹配。同样的移动输入指针到 <code>d</code> ，并且将目光移向语法分析树最右边的叶子结点处，它们同样是匹配的。因此上图中的语法分析树就是通过递归下降得到的结果。</p>
<blockquote>
<p>一个左递归的文法会使得它的递归下降语法分析器进入一个无限循环。</p>
</blockquote>
<p>由于回溯不是很高效，我们可以使用动态规划算法，构造基于表格的的方法。我会在单独的一篇文章来介绍一下动态规划。</p>
<h2 id="二、🍺🍺🍺-FIRST和FOLLOW集合（终结符号）"><a href="#二、🍺🍺🍺-FIRST和FOLLOW集合（终结符号）" class="headerlink" title="二、🍺🍺🍺 FIRST和FOLLOW集合（终结符号）"></a>二、🍺🍺🍺 FIRST和FOLLOW集合（终结符号）</h2><p>关于FIRST集合和FOLLOW集合一定要弄懂，因为这是在后续进行预测分析时必备的技能。在自顶向下的语法分析过程中，FIRST和FOLLOW使得我们可以根据下一个输入符号来选择应用哪个产生式。</p>
<h3 id="Ⅰ、FIRST"><a href="#Ⅰ、FIRST" class="headerlink" title="Ⅰ、FIRST"></a>Ⅰ、FIRST</h3><p><code>FIRST(α)</code> ：从 α 可以推导出一个串集合，而FIRST为这些串首个符号组成的集合；</p>
<p>如果 <script type="math/tex">\alpha \overset{*}{\rightarrow} \epsilon</script> (箭头上方的星号 * 表示 α 可以通过多个步骤之后得到 ε )，那么 ε 就在 FIRST(α) 中。又或者存在推导 </p>
<script type="math/tex; mode=display">
\alpha \overset{*}{\rightarrow} c\gamma</script><p>那么终结符号 c 也在 FIRST(α) 中。</p>
<p>计算文法符号X的FIRST(X)时，不断应用下面的规则，直到再没有新的 <strong>终结符号或者ε</strong> 可以被加入到任何FIRST集合中为止：</p>
<ul>
<li>1）、如果X是终结符号，那么FIRST(X) = X；</li>
<li><p>2）、如果X是一个非终结符号，且存在产生式 <script type="math/tex">X \rightarrow Y_{1}Y_{2}...Y_{k}</script> （其中k&gt;1）：</p>
<p>  如果终结符号 a 在 <script type="math/tex">FIRST(Y_{i})</script> 中的必要条件是 <script type="math/tex">FIRST(Y_{1})、FIRST(Y_{2})、...、FIRST(Y_{i-1})</script> 中包含有 ε 符号；</p>
<p>  比如 <script type="math/tex">FIRST(Y_{1})</script> 中所有符号一定都在 <script type="math/tex">FIRST(X)</script> 中，如果 <script type="math/tex">Y_{1}</script> 不能推导出 ε，那么我们就没有必要再向 <script type="math/tex">FIRST(X)</script> 加入任何符号。但是如果 <script type="math/tex">Y_{1}</script> 能推导出 ε，那么我们就需要查看其后非终结符号的推导情况了。</p>
<p>  简单来说就是，对于文法中非终结符号的产生式而言，观察其产生式体能够推导出终结符号的集合。</p>
</li>
<li>3）、如果 <script type="math/tex">X \rightarrow ε</script> 是一个产生式，那么 ε 加入到 FIRST(X) 中；</li>
</ul>
<p>也就是说：</p>
<blockquote>
<p><strong>对于FIRST(α)我们看产生式头可以推导得到的产生式体中的首个符号集合</strong>，即计算FIRST时非终结符号处于产生式的头部。</p>
</blockquote>
<p>下面是FIRST集合求解的代码（靠着自己理解编写，难免存在问题，如有问题麻烦指出）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">vector&lt;Symbol *&gt; GrammarParser::ContextFreeGrammar::FIRST(Symbol *sym) &#123;</div><div class="line">    /// 视角总是把当前符号当做产生式的头部</div><div class="line">    vector&lt;Symbol *&gt;firsts;</div><div class="line">    /// 1、如果是一个终结符号，那么FIRST返回它自身</div><div class="line">    if (sym-&gt;isTerminal())</div><div class="line">    &#123;</div><div class="line">        firsts.push_back(sym);</div><div class="line">        return firsts;</div><div class="line">    &#125;</div><div class="line">    /// 2、如果是一个非终结符号，并且是一个产生式</div><div class="line">    for (vector&lt;Production&gt;::iterator itr = this-&gt;productions.begin(); itr != this-&gt;productions.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        Nonterminal header = itr-&gt;header; /// &lt;--------- 产生式头部</div><div class="line">        if (header.identifier() != sym-&gt;identifier())</div><div class="line">        &#123;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        vector&lt;Symbol *&gt;bodies = itr-&gt;bodies;</div><div class="line">        for (vector&lt;Symbol *&gt;::iterator s_itr = bodies.begin(); s_itr != bodies.end(); ++s_itr)</div><div class="line">        &#123;</div><div class="line">            if (*s_itr == Symbol::EmptySymbolPtr())</div><div class="line">            &#123; /// 3、如果是一个推出空串的产生式</div><div class="line">                firsts.push_back(*s_itr);</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            vector&lt;Symbol *&gt;temp = FIRST(*s_itr);</div><div class="line">            firsts.insert(firsts.end(),temp.begin(),temp.end()); /// 递归查看当前符号的FIRST集合情况</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return firsts;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Ⅱ、FOLLOW"><a href="#Ⅱ、FOLLOW" class="headerlink" title="Ⅱ、FOLLOW"></a>Ⅱ、FOLLOW</h3><p><code>FOLLOW(A)</code>：定义为在某些句型中，紧跟在非终结符号A右边的终结符号集合。</p>
<p>比如对于句型 <script type="math/tex">S \overset{*}{\rightarrow} \alpha A a \beta</script> ，终结符号 a 就在 FOLLOW(A) 中。如果非终结符号A是某些句型的最右符号，那么特殊的 “结束标记” <strong>$</strong> 也在FOLLOW(A)中。</p>
<p>和FIRST集合类似，计算所有非终结符号A的FOLLOW(A)集合时，不断应用下面的规则，直到再没有 <strong>新的终结符号</strong> 可以被加入到任意FOLLOW集合中为止：</p>
<ul>
<li>1）、将 $ 放到FOLLOW(S)中，其中S是开始符号，而 $ 是输入右端的结束标记；</li>
<li>2）、如果存在一个产生式 <script type="math/tex">A\rightarrow\alpha B \beta</script> ，那么FIRST(β)中除了ε之外的所有符号都在FOLLOW(B)中。即这块儿需要查看符号串β的推导；</li>
<li>3）、如果存在一个产生式 <script type="math/tex">A\rightarrow\alpha B</script>，那么FOLLOW(A)中所有的符号同时也都在FOLLOW(B)中；</li>
</ul>
<p>也就是说：</p>
<blockquote>
<p>计算FOLLOW时非终结符号位于产生式体中，查看当前产生式体中（或者叫句型的右边部分）非终结符号紧挨着的 <strong>终结符号</strong> 集合。</p>
</blockquote>
<p>下面是FOLLOW集合的请求代码（和上面相同，同样可能存在问题）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">vector&lt;Symbol *&gt; GrammarParser::ContextFreeGrammar::FOLLOW(Symbol *sym) &#123;</div><div class="line">    /// 视角总是将当前符号放在产生式体中</div><div class="line">    vector &lt;Symbol *&gt; follows;</div><div class="line">    /// 1、如果当前符号时开始符号，那么将结束标记加入到follows中</div><div class="line">    if (sym-&gt;identifier() == productions[0].header.identifier())</div><div class="line">    &#123;</div><div class="line">        Symbol *end = const_cast&lt;Symbol *&gt;(Symbol::EndedSymbolPtr());</div><div class="line">        follows.push_back(end);</div><div class="line">        return follows;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (sym-&gt;isTerminal())</div><div class="line">    &#123;</div><div class="line">        return follows;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /// 判断当前迭代器是否是body中的最后一个符号，</div><div class="line">    auto expr_last = [&amp;follows,this](vector&lt;Symbol *&gt;::iterator current, vector&lt;Symbol *&gt;::iterator begin, size_t count, Symbol *header_ptr) -&gt; bool &#123;</div><div class="line">        size_t idx = current - begin;</div><div class="line">        bool result = false;</div><div class="line">        if (idx == count - 1) /// 当前符号处于产生式体的末尾</div><div class="line">        &#123;</div><div class="line">            /// 如果存在一个产生式 A --&gt; aB，那么FOLOOW(A)中所有符号都在FOLLOW(B)中</div><div class="line">            vector&lt;Symbol *&gt; temp = FOLLOW(header_ptr);    </div><div class="line">            follows.insert(follows.end(), temp.begin(), temp.end());</div><div class="line">            result = true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /// 2、如果存在一个产生式 A --&gt; aBb，那么FIRST(b)中除了空串以外，所有符号都在FOLLOW(B)中</div><div class="line">    for (vector&lt;Production&gt;::iterator itr = this-&gt;productions.begin(); itr != this-&gt;productions.end(); ++itr)</div><div class="line">    &#123;</div><div class="line">        Nonterminal header = itr-&gt;header;</div><div class="line">        Symbol *header_ptr = &amp;header;</div><div class="line">        vector&lt;Symbol *&gt;bodies = itr-&gt;bodies;</div><div class="line">        size_t count = bodies.size();</div><div class="line">        vector&lt;Symbol *&gt;::iterator sym_itr = bodies.end(); /// 求解当前FOLLOW集合的符号指针；</div><div class="line">        for (vector&lt;Symbol *&gt;::iterator s_itr = bodies.begin(); s_itr != bodies.end(); ++s_itr)</div><div class="line">        &#123;</div><div class="line">            if (sym_itr != bodies.end())</div><div class="line">            &#123; /// 第2种情况求解</div><div class="line">                size_t first_index = s_itr - sym_itr;</div><div class="line">                if (first_index &lt;= 0) </div><div class="line">                &#123;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">                vector&lt;Symbol *&gt; firsts = FIRST(*s_itr);</div><div class="line">                for (vector&lt;Symbol *&gt;::iterator first_itr = firsts.begin(); first_itr != firsts.end(); ++first_itr)</div><div class="line">                &#123;</div><div class="line">                    if (*first_itr == Symbol::EmptySymbolPtr())</div><div class="line">                    &#123;</div><div class="line">                        /// 3、如果存在一个产生式 A --&gt; aB，或者产生式 A --&gt;aBb（FIRST(b)包含空串），那么FOLOOW(A)中所有符号都在FOLLOW(B)中</div><div class="line">                        bool result = expr_last(s_itr, bodies.begin(), count, header_ptr);</div><div class="line">                        size_t idx = s_itr - bodies.begin();</div><div class="line">                        if (result)</div><div class="line">                        &#123;</div><div class="line">                            sym_itr = bodies.end();</div><div class="line">                        &#125;</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                    follows.push_back(*first_itr);</div><div class="line">                    sym_itr = bodies.end();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (sym-&gt;identifier() != (*s_itr)-&gt;identifier())</div><div class="line">            &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            /// 3、如果存在一个产生式 A --&gt; aB，或者产生式 A --&gt;aBb（FIRST(b)包含空串），那么FOLOOW(A)中所有符号都在FOLLOW(B)中</div><div class="line">            bool result = expr_last(s_itr, bodies.begin(), count, header_ptr);</div><div class="line">            if (result)</div><div class="line">            &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            sym_itr = s_itr;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return follows;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Ⅲ、示例"><a href="#Ⅲ、示例" class="headerlink" title="Ⅲ、示例"></a>Ⅲ、示例</h3><p>我们对下面文法来求解FIRST和FOLLOW集合：</p>
<script type="math/tex; mode=display">
E \rightarrow TE^{'} \\ 
E^{'} \rightarrow +TE^{'}\ |\ \epsilon\\ 
T \rightarrow FT^{'}\\ 
T^{'} \rightarrow *FT^{'}\ |\ \epsilon \\ 
F \rightarrow (E)\ |\ \mathbf{id}</script><p>首先我们以非终结符号出现的顺序，将它们按照顺序排列起来（有点像消除左递归时，我们创建的非终结符号集合）： <script type="math/tex">E,\ T,\ E^{'},\ F,\ T^{'}</script></p>
<p>1）、 <strong>非终结符号E</strong> ：</p>
<p>FIRST(E) = { ( , <strong>id</strong> }，其推导过程为： <script type="math/tex">E \Rightarrow TE^{'} \Rightarrow FT^{'}E^{'} \Rightarrow (E)T^{'}E^{'}\ |\ \mathbf{id}</script>；</p>
<p>FOLLOW(E) = { ), $ }。从产生式 <script type="math/tex">F \rightarrow (E)</script> 我们可以得到一个终结符号。而且从求FOLLOW的第一点可知，对于开始符号，我们需要将$添加进去。</p>
<p>2）、 <strong>非终结符号E’</strong>：</p>
<p>FIRST(E’) = { +, ε }，其推导过程为：<script type="math/tex">E^{'} \rightarrow +TE^{'}\ |\ \epsilon</script>。</p>
<p>FOLLOW(E’) = { ), $ }，这是因为产生式 <script type="math/tex">E \rightarrow TE^{'}</script> 可知，FOLLOW(E)和FOLLOW(E’)是完全等价的。</p>
<p>3）、 <strong>非终结符号T</strong>：<br>FIRST(T) = { ( , <strong>id</strong> }，其推导过程为： <script type="math/tex">T \Rightarrow FT^{'} \Rightarrow (E)T^{'}E^{'}\ |\ \mathbf{id}</script></p>
<p>FOLLOW(T)的计算从上述的文法中可以看出，非终结符号T出现在产生式体中的有 <script type="math/tex">TE^{'},\ +TE^{'}</script> ，也就是在其后面的均为非终结符号E’。因此FOLLOW(T)包含FIRST(E’)；</p>
<p>由于E’可以推导出空串ε，而且根据产生式 <script type="math/tex">E \rightarrow TE^{'}</script> 。我们可以知道FOLLOW(T)同样等于FOLLOW(E)。因此求出上面两个的并集为：</p>
<p>FOLLOW(T) = { +, ), $ }。</p>
<p>4）、 <strong>非终结符号T‘</strong>：<br>FIRST(T’) = { <em>, $ }，其推导过程为：$$ T’\rightarrow </em>FT’$$；</p>
<p>FOLLOW(T’) = { +, ), $ }。这是因为根据产生式 <script type="math/tex">T \rightarrow FT^{'}</script> 可知，FOLLOW(T’)和FOLLOW(T)是相同的；</p>
<p>5）、 <strong>非终结符号F</strong>：<br>FIRST(F) = { (, <strong>id</strong> }，其推导过程为 <script type="math/tex">F \rightarrow (E)\ |\ \mathbf{id}</script> ；</p>
<p>FOLLOW(F)的计算和非终结符号T是类似的，首先我们根据产生式 <script type="math/tex">T \rightarrow FT^{'},\ T^{'} \rightarrow *FT^{'}</script>可知，非终结符号F其后紧跟着非终结符号T’，因此FOLLOW(F)则包含了FIRST(T’)；</p>
<p>而且我们从产生式 <script type="math/tex">T \rightarrow FT^{'},\ T^{'} \rightarrow *FT^{'}\ |\ \epsilon</script> 可知，T’可以推导出空串ε，因此FOLLOW(F)也包含有FOLLOW(T)；</p>
<p>因此最终的结论为：FOLLOW(F) = { *, +, ), $ }</p>
<p>如果这块儿存在无法理解的部分，可以对照例子，返回查看FIRST和FOLLOW的计算方式。</p>
<h2 id="三、🍭🍭🍭LL-1-文法"><a href="#三、🍭🍭🍭LL-1-文法" class="headerlink" title="三、🍭🍭🍭LL(1)文法"></a>三、🍭🍭🍭LL(1)文法</h2><p>LL(1)中的第一个“L”表示从左向右扫描输入，第二个“L”表示产生最左推导，而“1”则表示在每一步中只需要向前看一个输入符号来决定语法分析动作。我们利用LL(1)的文法，可以构造出不需要回溯的递归下降语法分析器（即预测分析器）。</p>
<blockquote>
<p>左递归文法和二义性文法都不可能是LL(1)的</p>
</blockquote>
<p>对于任意两个不同的产生式：<script type="math/tex">A\rightarrow\alpha\ |\ \beta</script>，只有满足下面条件时，它们才是LL(1)文法：</p>
<p>1）、不存在终结符号a，使得 α 和 β 都能够推导出以 a 开头的串；</p>
<p>意思也就是说，FIRST(α) 和 FIRST(β) 是不相交的集合。</p>
<p>2）、 <strong>α和β中最多只有一个可以推导出空串</strong>；</p>
<p>当然这里一样的，FIRST(α) 和 FIRST(β) 是不相交的集合。如果出现了相交的集合，那么交集就是 ε 集。</p>
<p>3）、如果 <script type="math/tex">\beta \overset{*}{\rightarrow} \epsilon</script>，那么 α 不能推导出任何以 FOLLOW(A) 中某个终结符号开头的串。类似的，对于 α 也一样；</p>
<p>这里我仔细的说一下，如果要推导出以FOLLOW(A)中某个终结符号开头的串，那也就是说 FIRST(α) 和 FOLLOW(A) 要存在交集。对于推导 <script type="math/tex">\beta \overset{*}{\rightarrow} \epsilon</script> 而言，我们从第二点可以知道，那么此时 α 不能推导出 ε。这样看来要 FIRST(α) 和 FOLLOW(A) 存在交集，那是不可能发生的。</p>
<h3 id="👏👏👏构建预测分析表"><a href="#👏👏👏构建预测分析表" class="headerlink" title="👏👏👏构建预测分析表"></a>👏👏👏构建预测分析表</h3><p>我们构造一个预测分析表 M 。该表是一个二维数组，其中第一列为文法中出现的各个非终结符号；其中第一行为文法中出现的终结符号。</p>
<p>NT：非终结符号<br>t：终结符号</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:left">+</th>
<th style="text-align:left">*</th>
<th style="text-align:left">(</th>
<th style="text-align:left">)</th>
<th style="text-align:left">id</th>
<th style="text-align:left">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:left">.</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">E’</td>
<td style="text-align:left"></td>
<td style="text-align:left">.</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">.</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">T’</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">.</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">.</td>
</tr>
</tbody>
</table>
</div>
<p>对于文法G的每个产生式 <script type="math/tex">A\rightarrow\alpha</script>，处理如下：</p>
<ul>
<li><p>1、对于FIRST(α)中每个终结符号a，将 <script type="math/tex">A\rightarrow\alpha</script> 加入到 <code>M[A,a]</code> 中。首先查看该产生式的FIRST集合，找到该集合中存在的所有终结符号a、b、c…</p>
<p>  如果FIRST(α)不存在ε空串，那么对应非终结符号构造结束，寻找下一个产生式。</p>
</li>
<li><p>2、如果FIRST(α)中存在ε空串：</p>
<p>  1）、对于FOLLOW(A)中每个终结符号b，将 <script type="math/tex">A\rightarrow\alpha</script> 加入到 <code>M[A,b]</code> 中；</p>
<p>  2）、如果$在FOLLOW(A)中，将 <script type="math/tex">A\rightarrow\alpha</script> 加入到 <code>M[A,$]</code>中；</p>
</li>
</ul>
<blockquote>
<p>通俗一点来说就是，先看FIRST集合，如果FIRST集合里面包含了空串，然后再看对应的FOLLOW集合</p>
</blockquote>
<p>简单一点来说就是，先查看对应产生式的FIRST集合，如果FIRST集无法推导出空串ε，那么该产生式结束，寻找下一个产生式；如果当前产生式FIRST可以推导出空串，那么求该非终结符号对应的FOLLOW集合和结束标记$。</p>
<p>同样的，我们还是以文法</p>
<script type="math/tex; mode=display">
E \rightarrow TE^{'} \\ 
E^{'} \rightarrow +TE^{'}\ |\ \epsilon\\ 
T \rightarrow FT^{'}\\ 
T^{'} \rightarrow *FT^{'}\ |\ \epsilon \\ 
F \rightarrow (E)\ |\ \mathbf{id}</script><p>举例：</p>
<p>下面使用的到FIRST集合FOLLOW集合的结果，是上一节里面求得的各个非终结符号的结果。具体可以对照上面内容一起看。</p>
<p>1）、对于非终结符号E而言，FIRST(E) = { ( , <strong>id</strong> }，因此我们将产生式 <script type="math/tex">E \rightarrow TE^{'}</script> 填入到对应的格子里面：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E \rightarrow TE^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E \rightarrow TE^{'}</script></td>
</tr>
</tbody>
</table>
</div>
<p>2）、对于非终结符号E’而言，FIRST(E’) = { +, ε }。由可知FIRST(E’)可以推导出空串ε，因此我们需要获取FOLLOW(E’)，得到 FOLLOW(E’) = { ), $ }。填写对应的格子如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E’</td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow +TE^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow \epsilon</script></td>
</tr>
</tbody>
</table>
</div>
<p>3）、对于非终结符号T而言，FIRST(T) = { ( , <strong>id</strong> }，可知其不能推导出空串。因此我们只需要填写FIRST集合里面对应表格即可：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow FT^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow FT^{'}</script></td>
</tr>
</tbody>
</table>
</div>
<p>4）、对于非终结符号T’而言，它和E‘有点相似之处。即我们从FIRST(T’) = { *, $ } 可知，其可以推导出空串。同样的我们需要查看 FOLLOW(T’) = { +, ), $ }</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T’</td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow *FT^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
</tr>
</tbody>
</table>
</div>
<p>5）、对于非终结符号F而言，其FIRST(F) = { ( , <strong>id</strong> }</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow (E)</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow \mathbf{id}</script></td>
</tr>
</tbody>
</table>
</div>
<p>将上面的表格汇总之后就得到了我们最终的预测分析表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">NT\t</th>
<th style="text-align:center">+</th>
<th style="text-align:center">*</th>
<th style="text-align:center">(</th>
<th style="text-align:center">)</th>
<th style="text-align:center">id</th>
<th style="text-align:center">$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E \rightarrow TE^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E \rightarrow TE^{'}</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">E’</td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow +TE^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">E^{'} \rightarrow \epsilon</script></td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow FT^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow FT^{'}</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T’</td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow *FT^{'}</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">T^{'} \rightarrow \epsilon</script></td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow (E)</script></td>
<td style="text-align:center"></td>
<td style="text-align:center"><script type="math/tex">F \rightarrow \mathbf{id}</script></td>
</tr>
</tbody>
</table>
</div>
<p>下面的代码是对LL(1)文法的语法预测分析表的一个伪代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">class ll_prediction_analysis_table &#123;</div><div class="line">private:</div><div class="line">    ContextFreeGrammar grammar;</div><div class="line">    map&lt;int,int&gt; row_map; /// key: symbol id, value: table row index</div><div class="line">    map&lt;int,int&gt; col_map; /// key: symbol id, value: table col index</div><div class="line">    vector &lt; vector&lt;int&gt; &gt; table;</div><div class="line">private:</div><div class="line">    void extract_symbol() &#123; /// 从文法的各个产生式中分离出终结符和非终结符</div><div class="line">        int terminal_index = 0;</div><div class="line">        for (vector&lt;Production&gt;::iterator itr = grammar.productions.begin(); itr != grammar.productions.end(); ++itr)</div><div class="line">        &#123;</div><div class="line">            int index = itr - grammar.productions.begin();</div><div class="line">            vector&lt;Symbol *&gt; bodies = itr-&gt;bodies;</div><div class="line">            for (vector&lt;Symbol *&gt;::iterator body_itr = bodies.begin(); body_itr != bodies.end(); ++body_itr)</div><div class="line">            &#123;</div><div class="line">                if ((*body_itr)-&gt;isTerminal())</div><div class="line">                &#123;</div><div class="line">                    col_map.insert((*body_itr)-&gt;identifier(), terminal_index);</div><div class="line">                    ++terminal_index;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            row_map.insert((itr-&gt;header).identifier(),index);</div><div class="line">        &#125;</div><div class="line">        /// 添加结束符</div><div class="line">        int ended_key = (const_cast&lt;Symbol *&gt;(Symbol::EndedSymbolPtr()))-&gt;identifier();</div><div class="line">        col_map.insert(ended_key,terminal_index);        </div><div class="line"></div><div class="line">        vector &lt;int&gt; inner(col_map.size(),-1);</div><div class="line">        vector &lt;vector&lt;int&gt; &gt;tb(row_map.size(), inner);</div><div class="line">        table = tb;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void create_table() &#123;</div><div class="line">        /// 这里我默认是对应产生式有对应的LL(1)文法，也就是说表内每一项只包含一个产生式，不会包含多重定义的项。</div><div class="line">        auto map_itr = row_map.cbegin();</div><div class="line">        while (map_itr != row_map.cend())</div><div class="line">        &#123;</div><div class="line">            int table_row_index = map_itr-&gt;second;</div><div class="line">            int key = map_itr-&gt;first;</div><div class="line">        &#125;</div><div class="line">        for (vector&lt;Production&gt;::iterator itr = grammar.productions.begin(); itr != grammar.productions.end(); ++itr)</div><div class="line">        &#123;</div><div class="line">            int index = itr-grammar.productions.begin();</div><div class="line">            Nonterminal header = itr-&gt;header;</div><div class="line">            int row_index = col_map[header.identifier()];</div><div class="line">            /// 1.对于FIRST中每个终结符号a，将产生式 A --&gt; α 加入到 table[A][a] 中</div><div class="line">            vector&lt;Symbol *&gt; first = grammar.FIRST(&amp;header);</div><div class="line">            if (first.size() &lt;= 0)</div><div class="line">            &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            bool empty = false;</div><div class="line">            for (vector&lt;Symbol *&gt;::iterator f_itr = first.begin(); f_itr != first.end(); ++f_itr)</div><div class="line">            &#123;</div><div class="line">                if (*f_itr == Symbol::EmptySymbolPtr())</div><div class="line">                &#123;</div><div class="line">                    empty = true;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                int f_key = (*f_itr)-&gt;identifier();</div><div class="line">                int col_index = col_map[f_key];</div><div class="line">                table[row_index][col_index] = index;</div><div class="line">            &#125;</div><div class="line">            /// 2. 如果FIRST中包含有空串时,FOLLOW(A)中每个终结符号b，将产生式 A --&gt; α 加入到 table[A][b] 中</div><div class="line">            /// 3. 如果结束符号$在FOLLOW(A)中，将产生式 A --&gt; α 加入到 table[A][$] 中</div><div class="line">            if (!empty)</div><div class="line">            &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            vector&lt;Symbol *&gt;follows = grammar.FOLLOW(&amp;header);</div><div class="line">            for (vector&lt;Symbol *&gt;::iterator f_itr = follows.begin(); f_itr != follows.end(); ++f_itr)</div><div class="line">            &#123;</div><div class="line">                int f_key = (*f_itr)-&gt;identifier();</div><div class="line">                int col_index = col_map[f_key];</div><div class="line">                table[row_index][col_index] = index;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">public:</div><div class="line">    ll_prediction_analysis_table(ContextFreeGrammar&amp; grammar) &#123;</div><div class="line">        this-&gt;grammar = grammar;</div><div class="line">        extract_symbol();</div><div class="line">        create_table();</div><div class="line">    &#125;</div><div class="line">    Production&amp; objectForPair(pair&lt;Symbol*, Symbol*&gt; row_col);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="四、非递归的预测分析"><a href="#四、非递归的预测分析" class="headerlink" title="四、非递归的预测分析"></a>四、非递归的预测分析</h2><p>我们可以显式地维护一个栈结构，来构造出一个非递归的预测分析器。如下图所示：</p>
<p><img src="/uploads/top2bottom_syntax_parser/7.png" alt=""></p>
<p>上图中的语法分析器有一个输入缓冲区，一个包含了文法符号序列的栈，一个上一节我们学习到的语法分析表，以及一个输出流。其中输入缓冲区中包含要进行语法分析的串。</p>
<p>其大致的执行过程如下：</p>
<p>1）、考虑栈顶符号X和当前输入符号a；</p>
<p>2）、如果X是一个非终结符号，该分析器查询预测分析表M中的条目<code>M[X,a]</code>来选择一个产生式；</p>
<p>3）、如果X不是一个非终结符号，那么检查终结符号X和当前的输入符号a是否匹配；</p>
<p>下面是表驱动的预测分析方法伪代码，其中输入为待匹配的字符串，和一个预测分析表；上图中栈第一个元素值为文法的开始符号，栈底存在一个哨兵，用于判断当前栈是否为空：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">bool ll_syntax::syntax() &#123;</div><div class="line">    Symbol *ended = const_cast&lt;Symbol *&gt;(Symbol::EndedSymbolPtr());</div><div class="line">    char* ip = &amp;input_string[0];</div><div class="line">    </div><div class="line">    for (Symbol *sym = stack.back(); sym-&gt;identifier() != ended-&gt;identifier(); sym = stack.back())</div><div class="line">    &#123;</div><div class="line">            if (sym-&gt;identifier() == *ip)</div><div class="line">        &#123;</div><div class="line">            stack.pop_back();</div><div class="line">            ip++;  </div><div class="line">            continue;  </div><div class="line">        &#125;</div><div class="line">        if (sym-&gt;isTerminal())</div><div class="line">        &#123;</div><div class="line">            return false; /// 语法错误</div><div class="line">        &#125;</div><div class="line">        Terminal ip_sym(*ip);</div><div class="line">        int status = 0;</div><div class="line">        Production prodction = table.objectForPair(make_pair(sym, &amp;ip_sym), &amp;status);</div><div class="line">        if (status != 0)</div><div class="line">        &#123;</div><div class="line">            return false; /// 语法错误</div><div class="line">        &#125;</div><div class="line">        /// 移除栈顶元素，然后将产生式体加入到栈中</div><div class="line">        stack.pop_back();</div><div class="line">        vector&lt;Symbol *&gt; bodies = prodction.bodies;</div><div class="line">        for (vector&lt;Symbol *&gt;::const_reverse_iterator itr = bodies.rbegin; itr != bodies.rend(); ++itr)</div><div class="line">        &#123;</div><div class="line">            stack.push_back(*itr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这儿我用代码简单地实现了一下，到这儿我们基本上把LL语法分析初步学习完了。 本篇文章中最主要部分还是对产生式求解FIRST集合和FOLLOW集合，这个是务必要掌握的，切记切记！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自顶向下语法分析可以被看作是为输入串构造语法分析树的问题，它从语法分析的根节点开始，按照深度优先的规则创建这棵语法分析树的各个结点，自顶向下
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="语法分析" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>简单了解2-3树、2-3-4树和红黑树</title>
    <link href="http://yoursite.com/2020/01/11/two_three_four_red_black_tree/"/>
    <id>http://yoursite.com/2020/01/11/two_three_four_red_black_tree/</id>
    <published>2020-01-11T13:45:28.000Z</published>
    <updated>2020-01-11T15:18:12.290Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章中，我主要是将数据结构中的2-3树、2-3-4树、红黑树进行了整理。由于本篇字数、图片以及代码较多，可选择自己比较在于的部分阅读，但我建议是从上往下依次阅读。</p>
<p>毕竟大部分人可能比较关心红黑树。但是怎么是从2-3到红黑树的，这个过程是很值得了解的。而在文章的最后，我也大致手撸了一套2-3树相关操作的代码。</p>
<h2 id="一、2-3树"><a href="#一、2-3树" class="headerlink" title="一、2-3树"></a>一、2-3树</h2><blockquote>
<p>一颗2-3树中的每个结点的度为2，或者3；其中度为2的称为2节点，度为3的称为3节点。</p>
</blockquote>
<p>该树或者为空，或者满足以下性质：</p>
<ul>
<li><p>每个内部节点可以是2节点，也可以是一个3节点。<strong>2节点存放一个元素，3节点存放两个元素</strong> ；</p>
</li>
<li><p><strong>2节点</strong> ：的两个子节点分别是：left_child, middle_child；该节点的存放元素为data_l，该元素的关键字为data_l.key。<br>以left_child为根的子树中所有节点的关键字（data_l.key）都小于该节点的data_l.key；以middle_child为根的子树中所有节点的关键字都大于该节点的data_l.key；</p>
</li>
<li><p><strong>3节点</strong> ：的三个子节点分别是：left_child, middle_child, right_child；该节点存放的两个元素分别为data_l, data_r。它们对应的元素关键字为data_l.key，data_r.key。<br>以left_child为根的子树中所有节点关键字(data_l.key)都小于data_l.key；以middle_child为根的子树所有节点都大于data_l.key，小于data_r.key；以right_child为根的子树所有节点都大于data_r.key；</p>
</li>
<li><p>4、<strong>所有的外部节点都位于同一层</strong> （null节点）。</p>
</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/1.png" alt=""></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>1）、首先我们查看是2节点，还是3节点。通过查看data_r是否为INT_MAX（由于0可能是正常存储的元素，因此这里取的是INT_MAX）来确定，如果为INT_MAX则为2节点；</p>
<p>2）、如果是2节点：小于则沿着left_child查找，大于则沿着middle_child查找；相等则查找成功；</p>
<p>3）、如果是3节点：小于data_l则沿着left_child，大于data_l且小于data_r则沿着middle_child，大于data_r则沿着right_child；如果相等则查找成功</p>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>当待查关键字不在2-3树中时，查找过程中将遇到唯一的叶节点（空节点）。如果节点只包含一个元素，那么就可以将新元素插入到该节点中。以构成3节点；</p>
<p>插入操作相对来说要复杂一点，但是理解透彻了也并不复杂。下面来仔细看一下插入过程，这里以插入数字30为例；</p>
<p>1）、首先我们的初始2-3树如下：</p>
<p><img src="/uploads/two_three_four_red_black/2.png" alt=""></p>
<p>2）、现在我们插入数字30，它大于20，因此它应该处于3节点（B）的right_child里面。但是我们看看上面2-3树的性质4：所有的外部节点都位于同一层，所以现在我将30放入节点B这一层：</p>
<p><img src="/uploads/two_three_four_red_black/3.png" alt=""></p>
<p>3）、但这明显不是2-3树，它存在了既不是2节点，也不是三节点的节点，因此我们需要改造它。改造的方法就是将20向上提：</p>
<p><img src="/uploads/two_three_four_red_black/4.png" alt=""></p>
<p>4）、没办法，这又不符合预期。它依然违反了性质4，因此我们还需要改动。继续提20：</p>
<p><img src="/uploads/two_three_four_red_black/5.png" alt=""></p>
<p>到这里我们大致上完成了2-3树中插入30的操作。主要就是先找到最直观的插入地址，然后一步一步的去更新该树，以符合2-3树的性质。</p>
<blockquote>
<p>可以简单的理解2-3树的插入操作是从叶子节点向上生长的过程</p>
</blockquote>
<p>下面我们来看一个更加复杂的插入例子。为了画图简单起见，2-3节点中的2节点的另一个data_r，以及每个为空的叶子节点就不画出了，因此下图中只有一个数据域的为2节点，有两个数据域的为3节点。下面以插入数字50为例：</p>
<p><img src="/uploads/two_three_four_red_black/6.png" alt=""></p>
<p>这是类似的，就是节点向上移动的过程。我们大致看了一下插入操作，就是不断去满足2-3树的性质的同时去做节点上移的事儿。</p>
<p>下面我们再来看看2-3树的删除操作。</p>
<h3 id="删除操作（旋转和合并）"><a href="#删除操作（旋转和合并）" class="headerlink" title="删除操作（旋转和合并）"></a>删除操作（旋转和合并）</h3><p>后面的删除都以下面这棵树为基础进行：</p>
<p><img src="/uploads/two_three_four_red_black/7.png" alt=""></p>
<h4 id="非叶节点删除"><a href="#非叶节点删除" class="headerlink" title="非叶节点删除"></a>非叶节点删除</h4><p>首先，如果要删除的元素不在叶节点中，则可以用一个叶节点中的适当元素与待删除元素进行交换，从而将该删除操作转化为在叶节点上的删除操作。</p>
<blockquote>
<p>一般情况下，我们可以用被删除元素的左子树中关键字最大的元素，或者右子树中关键字最小的元素与该元素交换。</p>
</blockquote>
<p>总的来说就是把非叶节点的删除转换为叶节点的删除操作，而叶节点的删除操作又分为2节点和3节点删除操作。</p>
<h4 id="3叶节点删除"><a href="#3叶节点删除" class="headerlink" title="3叶节点删除"></a>3叶节点删除</h4><p>3节点的删除操作相对比较简单，大致的规则如下：</p>
<ul>
<li><p>1）、如果要删除3节点的data_l时，当删除之后需要将data_r的关键字移动到data_l处。并且将data_r清零或者置为一个最大值即可；</p>
<p>  <img src="/uploads/two_three_four_red_black/8.png" alt=""></p>
</li>
</ul>
<p>这是以上面基础2-3树删除3节点中的data_l（10）域之后的结果。</p>
<ul>
<li><p>2）、如果要删除3节点的data_r时，直接将其清零或者置为一个最大值即可；</p>
<p>  <img src="/uploads/two_three_four_red_black/9.png" alt=""></p>
</li>
</ul>
<p>这里是将基础2-3树删除3节点中data_r（70）域之后的结果。</p>
<h4 id="2叶节点删除"><a href="#2叶节点删除" class="headerlink" title="2叶节点删除"></a>2叶节点删除</h4><p>对于2节点的删除操作相对比较复杂一点，它并不能像3节点那样简单的删除就行了。因为2节点直接删除对应的data_l域的话，将会导致整个节点变为空。因此需要分多种情况来讨论：</p>
<h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>待删除节点为2节点，且该节点的相邻兄弟子树有一个是3节点时我们使用旋转的操作。</p>
<ul>
<li>1）、待删除元素为左儿子，并且其中右边的兄弟子树（只看相邻兄弟子树）为3节点；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/10.png" alt=""></p>
<p>其中x为待删除节点的元素。</p>
<ul>
<li>2）、待删除元素为中儿子，并且其左兄弟或者右兄弟为3节点；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/11.png" alt=""></p>
<p>其中x为待删除节点的元素。</p>
<ul>
<li>3）、待删除元素为右儿子，并且其中左边兄弟子树（只看相邻兄弟子树）为3节点；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/12.png" alt=""></p>
<blockquote>
<p><strong>旋转操作不删除节点</strong>！！！</p>
</blockquote>
<h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><p>旋转解决了当被删除元素为2节点，并且其左右两边的兄弟子树存在3节点的情况。那如果被删除节点左右两边都不存在3节点时，需要怎么处理呢？<br>这时候就需要用到合并操作。</p>
<blockquote>
<p>合并操作用于2节点删除时，其左右兄弟同样为2节点时！<br><strong>合并操作会删除节点</strong>！！！</p>
</blockquote>
<p>和旋转类似，我们同样需要看被删除元素所在节点的位置。由于待删除节点左右兄弟子树存在3节点时都可以使用旋转的操作，所以以下所有的情形中所有待删除元素的相邻子树中都不会不会存在3节点。</p>
<p>下面具体的合并分类：</p>
<ul>
<li>1）、待删除节点为左儿子；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/13.png" alt=""><br>这里当父节点未3节点时，变换的第二步时如果其右子树为2节点时，我们同样可以将b下降到右子树中，而a保持不变。</p>
<ul>
<li>2）、待删除节点为中儿子；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/14.png" alt=""></p>
<p>过渡态中：c&lt;a&lt;b&lt;d，结果的合并基于该大小关系。</p>
<ul>
<li>3）、待删除节点为右儿子；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/15.png" alt=""></p>
<p>过渡态中：c&lt;a&lt;d&lt;b，结果的合并基于该大小关系。</p>
<h4 id="删除操作总结"><a href="#删除操作总结" class="headerlink" title="删除操作总结"></a>删除操作总结</h4><p>1）、非叶子节点，先将其转换为叶子节点之后操作；</p>
<p>2）、3节点删除直接删除即可，只不过需要注意剩下元素必须在data_l中；</p>
<p>3）、2节点的删除一定要牢记2-3树的四条性质来进行旋转和合并操作；</p>
<p>4）、节点变化的基础是我们在定义2-3树时，左儿子、中儿子、右儿子，以及节点的左右数据域的大小关系。</p>
<p>很显然，执行一次旋转和执行一次合并操作的时间复杂度为O(1)。如果执行的是（删除中的）旋转操作，那么一次旋转完成后删除就会结束；</p>
<p>在删除过程中，执行的合并操作次数不会超过2-3树的高度。因此对于包含n个节点的2-3树，其删除操作的时间复杂度为O(logn)；</p>
<h2 id="二、2-3-4树"><a href="#二、2-3-4树" class="headerlink" title="二、2-3-4树"></a>二、2-3-4树</h2><p>2-3-4树是对2-3树的扩展，其中允许4节点（也就是最多有4个儿子）。它满足的性质和2-3树是类似的，主要还是在他们的大小关系上。下图主要是描述的4节点的结构，2节点和3节点从左到右依次为一个元素（data_l）和两个元素（data_l, data_m）已经对应的子节点：</p>
<p><img src="/uploads/two_three_four_red_black/16.png" alt=""></p>
<p>大小关系如下：</p>
<p>1）、<code>left_child.data_l.key &lt; lef_child.data_m.key &lt; left_child.data_r.key &lt; root.data_l.key</code>;</p>
<p>2）、<code>root.data_l.key &lt; left_mid_child.data_l.key &lt; ... &lt; root.data_m.key</code>;</p>
<p>3）、<code>root.data_m.key &lt; right_mid_child.data_l.key &lt; ... &lt; root.data_r.key</code>;</p>
<p>4）、<code>root.data_r.key &lt; right_child.data_l.key &lt; ... &lt; right_child.data_r.key</code>;</p>
<blockquote>
<p>2-3-4树也要满足所有的外部节点都在同一层上；</p>
</blockquote>
<p>如果一颗高度为h的2-3-4树中只包含2节点，那么该树共有(2^h) - 1个元素（元素个数，不是节点个数）；如果只包含4节点，那么该树共有(4^h) - 1个元素。因此一颗2-3-4树的元素个数为2^h - 1 到 4^h - 1个元素。<br>同样来说包含n个元素的2-3-4树，其高度范围log4(n+1)到log2(n+1)之间。下图是一个2-3-4树的具体例子：</p>
<p><img src="/uploads/two_three_four_red_black/17.png" alt=""></p>
<h3 id="插入操作（拆分4节点、向上移动）"><a href="#插入操作（拆分4节点、向上移动）" class="headerlink" title="插入操作（拆分4节点、向上移动）"></a>插入操作（拆分4节点、向上移动）</h3><p>插入操作我们可以和2-3树做一样的操作，即先从根节点到叶节点向下执行，然后从叶节点到根节点的向上扫描，并逐级调整以满足2-3-4树的性质。</p>
<p>但是对于2-3-4树存在更加高效的方式：</p>
<p> <strong>我们从根节点开始扫描，当扫描到4节点时就对该节点进行拆分操作，主要是看当前4节点父节点来进行适当的拆分操作。依次循环下去，那么到叶子节点时就能保证叶子节点为2节点或者3节点</strong>。</p>
<p>对于一个4节点，需要考虑以下三种不同的情况：</p>
<ul>
<li>1）、<strong>4节点是2-3-4树的根节点</strong>；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/18.png" alt=""></p>
<p>根节点的拆分会使得2-3-4树的高度增加1。并且拆分之后得到的两个节点都是 <strong>2节点</strong> ；</p>
<ul>
<li>2）、<strong>4节点的父节点是一个2节点</strong>；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/19.png" alt=""><br>上半部分中4节点作为2节点的左子树，下半部分为4节点作为2节点的右子树。拆分之后得到的两个节点同样都是 <strong>2节点</strong> ；</p>
<ul>
<li>3）、<strong>4节点的父节点是一个3节点</strong>；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/20.png" alt=""></p>
<p>拆分之后得到的两个节点同样都是 <strong>2节点</strong> ；</p>
<p>到这儿我们就能大致看出规律了：</p>
<blockquote>
<p><strong>4节点的data_m向上提，data_l和data_r自成一个2节点</strong>；</p>
</blockquote>
<h4 id="2-3-4树插入实例"><a href="#2-3-4树插入实例" class="headerlink" title="2-3-4树插入实例"></a>2-3-4树插入实例</h4><p>以下图为原2-3-4树执行插入操作：</p>
<p><img src="/uploads/two_three_four_red_black/21.png" alt=""></p>
<p>1、首先我们插入元素5：从根节点开始扫描，发现根节点为4节点。因此使用第一点中的拆分过程，将4节点的中data_m向上提，独立成一个2节点。此时会使得树的总体高度增加1。然后依次寻找5所在的位置，发现目标叶子节点为一个3节点，符合插入要求，直接插入即可。</p>
<p><img src="/uploads/two_three_four_red_black/22.png" alt=""></p>
<p>2、插入元素14：从根节点开始扫描，发现包含元素【5，12，15】的节点为4节点，而该节点父节点为2节点。因此我们可以使用上面第二点“4节点为父节点是一个2节点”的拆分方法。拆分完成后继续寻找元素14的插入点，发现节点【15】为2节点直接插入。</p>
<p><img src="/uploads/two_three_four_red_black/23.png" alt=""></p>
<p>比如这里插入一个元素77和这个例子很类似。发现节点【72，80，90】为4节点，把元素80向上提，构成新的节点【70，80，99】。然后把元素77插入到节点【72】的右子节点中即可。</p>
<p><img src="/uploads/two_three_four_red_black/24.png" alt=""></p>
<p>因此2-3-4树的插入操作对于2-3树插入操作的优势在于，只需自顶向下单次扫描就可以完成；而2-3树需向下扫描之后，还有元素向上提的过程。</p>
<h3 id="删除操作（合并4节点、向下移动）"><a href="#删除操作（合并4节点、向下移动）" class="headerlink" title="删除操作（合并4节点、向下移动）"></a>删除操作（合并4节点、向下移动）</h3><p>插入操作虽然和2-3树类似，但是需要有效率上的改进。如果没有优势的话，那该查找树存在也没有什么意义。</p>
<p>删除任何元素都可以化简为删除某个叶子节点中的元素。</p>
<blockquote>
<p>如果 <strong>删除元素所在的叶节点是3节点或者4节点</strong> ，直接删除即可。结果分别变成2节点和3节点 ；</p>
</blockquote>
<p>我们可以从根节点到叶节点的向下扫描过程中对2-3-4树进行更新，以达到删除元素时，元素所在叶节点为3节点或者4节点。这样我们就可以避免在类似2-3树删除操作（从叶节点到根节点向上）出现的重建步骤。</p>
<p>向下扫描2-3-4树并进行更新时要求：<strong>每当查找移向下一层节点时，该节点必须是3节点或者4节点</strong>。 </p>
<p>为了描述方便，这里假设当前节点为p，而将要移到的下一个节点为q，也就是说q是p的子节点。r节点为q节点的兄弟节点，当q是p的left_child时，r节点为p的left_mid_child；否则q最近的兄弟节点r就是其左边的兄弟节点。如果看起来有点不顺口，直接对应下面图就行了。<br>下面列出5种情况：</p>
<ul>
<li><p>1）、<strong>p(父节点)是叶子节点</strong> ：此时待删除元素要么在节点p中，要么不存在；</p>
</li>
<li><p>2）、<strong>q不是2节点</strong>：那就是3节点或者4节点，不需要更新。继续寻找下一个节点；</p>
</li>
<li><p>3）、<strong>q是2节点且其兄弟节点r为2节点</strong>：将p、q、r合并成一个4节点。这个过程其实就是2-3-4树插入过程的逆过程（也就是插入里面的三种情况）。其中p节点分为2节点、3节点、4节点；</p>
</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/25.png" alt=""></p>
<ul>
<li>4）、<strong>q是2节点且其兄弟节点为3节点</strong>：</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/26.png" alt=""></p>
<p>这里有个错误，下半部分的应该是y上移动.</p>
<ul>
<li>5）、<strong>q是2节点且其兄弟节点为4节点</strong>：</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/27.png" alt=""></p>
<p>第四种和第五种非常类似。</p>
<h4 id="2-3-4树删除实例"><a href="#2-3-4树删除实例" class="headerlink" title="2-3-4树删除实例"></a>2-3-4树删除实例</h4><p>下面我们来看一个2-3-4树删除元素的实例。在下面的例子中我们删除元素74：</p>
<p><img src="/uploads/two_three_four_red_black/28.png" alt=""></p>
<h2 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h2><h3 id="从2-3-4树到红黑树"><a href="#从2-3-4树到红黑树" class="headerlink" title="从2-3-4树到红黑树"></a>从2-3-4树到红黑树</h3><p>红黑树相对于2-3-4树能够更有效地节省存储空间，因为对于2-3-4树而言，它如果存在2节点或者3节点是存在data_l或者data_m是没有使用而浪费了。在红黑树中，每个节点的儿子指针分为：红色和黑色两种。在本文中：</p>
<p>1）、红色指针：红色节点表示从父节点指向该节点的指针为红色指针。红色指针用虚线表示；</p>
<p>2）、黑色指针：黑色节点表示从父节点指向该节点的指针为黑色指针。黑色指针用实线表示；</p>
<p>红黑树是2-3-4树的二叉树表示，因此我们来看一下2-3-4树到红黑树的转变过程：</p>
<ul>
<li><strong>2-3-4树种的2节点</strong>：把一个2节点p表示为一个红黑树节点q。红黑树该节点左右子节点均为黑色；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/29.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">q.data = p.data_l;</div><div class="line">q-&gt;left_child = p-&gt;left_child;</div><div class="line">q-&gt;right_child = p-&gt;left_mid_child;</div></pre></td></tr></table></figure>
<ul>
<li><strong>2-3-4树种的3节点</strong>：把一个3节点表示为2个红黑树节点，其中一个节点作为另一个节点的子节点。并且子节点为红色；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/30.png" alt=""></p>
<ul>
<li><strong>2-3-4树种的4节点</strong>：把一个4节点表示为3个红黑树节点，其中data_m所在节点为父节点，左右子节点用红色表示；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/31.png" alt=""></p>
<p>下面是将上面2-3-4树转换成红黑树的例子：</p>
<p><img src="/uploads/two_three_four_red_black/32.png" alt=""></p>
<h3 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质"></a>红黑树性质</h3><p>我们从上面一节得出的红黑树，可以知道红黑树具有如下性质：</p>
<ul>
<li>1）、红黑树是一颗二叉查找树；</li>
<li>2）、根节点为黑色节点；</li>
<li>3）、所有根节点到外部节点的路径上黑色指针个数相同（同样的黑色节点也相同）。这是因为在2-3-4树中所有外部节点都位于同一层，而在该树种指针都是黑色指针；</li>
<li>4）、任何从根节点到外部节点的路径上都不存在两个连续的红色指针；</li>
</ul>
<p>下面是红黑树大致的结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">typedef struct red_black_tree* red_black_ptr;</div><div class="line">typedef struct red_black_tree &#123;</div><div class="line">        element data;</div><div class="line">        /// 左右儿子</div><div class="line">        red_black_ptr left_child;</div><div class="line">        red_black_ptr right_child;</div><div class="line">        /// 两个颜色域</div><div class="line">        color left_color;</div><div class="line">        color right_color;</div><div class="line">&#125;red_black;</div></pre></td></tr></table></figure>
<h3 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h3><p>红黑树的插入可以按照两种方式：自顶向下（Top-To-Down），自底向上（Down-To-Top）。自顶向下只需从根到叶节点一次扫描即可；而自底向上需要从根节点到叶节点扫描之后，还需要继续从叶节点到根节点扫描一次。</p>
<h4 id="👻🍄👻自顶向下的插入"><a href="#👻🍄👻自顶向下的插入" class="headerlink" title="👻🍄👻自顶向下的插入"></a>👻🍄👻自顶向下的插入</h4><p>通过观察当前节点的两个颜色域是否都为红色。如果都为红色，那么该节点对应2-3-4树中的4节点（详细可以看上面2-3-4树到红黑树的转换过程）。当发现4节点时：</p>
<ul>
<li>第一步、将该节点的两个颜色域都变为黑色（由红变黑）；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/33.png" alt=""></p>
<ul>
<li>第二步、如果该节点是其父节点的左儿子、或者右儿子，则将其父节点的左颜色域、或者右颜色域变为红色；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/34.png" alt=""></p>
<ul>
<li>第三步、如果此时树中出现两个连续的红色指针时，则需要类似AVL树的LL、LR、RL、RR旋转操作；</li>
</ul>
<p><img src="/uploads/two_three_four_red_black/35.png" alt=""></p>
<p>由于前面有了2-3-4树的基础知识，我们以2-3-4树的2节点、3节点、4节点，来总结红黑树插入时旋转和变色的规律：</p>
<p>每插入一个元素时，我们自顶向下遍历每一个节点:</p>
<p>1）、如果是2节点、或者3节点，则保持它们性质不发生改变（至于怎么判断红黑树中当前节点是2节点，还是3节点。请看“从2-3-4树到红黑树”一节）；</p>
<p><strong>变色</strong></p>
<p>2）、如果当前节点是4节点时（红黑树中其左右指针必定指向红色节点），则将其左右指针和左右子节点变为黑色。这里是将当前4节点作为父节点而言的；</p>
<p>3）、如果当前节点是4节点时，并且该节点作为其父节点左子节点、或者右子节点，那么将其父节点对应的左指针或者右指针变为红色，并且当前节点也变为红色；<br>这里是将该节点作为其父节点的子结点而言的。</p>
<p><strong>旋转</strong></p>
<p>4）、如果出现连续两个红色指针时，就需要做对应的旋转操作；</p>
<h4 id="红黑树插入实例例一："><a href="#红黑树插入实例例一：" class="headerlink" title="红黑树插入实例例一："></a>红黑树插入实例例一：</h4><p>下面先来看一个最简单的例子，我们一次将1，2，3，4，5，6，7，8 插入到红黑树中：</p>
<p><img src="/uploads/two_three_four_red_black/36.png" alt=""></p>
<p>自顶向下的插入过程，是在从根节点到需要插入的目的节点开始进行遍历，并且在遍历过程中对红黑树进行变色和旋转。</p>
<h4 id="自底向上插入"><a href="#自底向上插入" class="headerlink" title="自底向上插入"></a>自底向上插入</h4><p>自底向上的插入，首先需要查找关键字在红黑树的插入位置。显然这个插入操作是不成功的查找，且在该 <strong>向下查找过程中不需要进行旋转变换，只需要将待插元素作为最后遇到的节点的某个子节点，并用红色指针将其与它父节点连接</strong> 。</p>
<p>由于每次以红色指针插入，所以此时所有根节点到外部节点路径上黑色节点的数量相同，但有可能存在两个连续红色指针。</p>
<h4 id="出现两个连续的红色指针时"><a href="#出现两个连续的红色指针时" class="headerlink" title="出现两个连续的红色指针时"></a>出现两个连续的红色指针时</h4><p>假设连续出现的两个红色指针分别为 <p,q> 和 <q,r> 。 这表示q作为p的子节点，r作为q的子节点： p —&gt; q —&gt; r；因此p、q、r之间存在四种情况：</q,r></p,q></p>
<p>1）、<strong>LL</strong>: q作为p的左子节点，r作为q的左子节点；</p>
<p>2）、<strong>LR</strong>: q作为p的左子节点，r作为q的右子节点；</p>
<p>3）、<strong>RL</strong>: q作为p的右子节点，r作为q的左子节点；</p>
<p>4）、<strong>RR</strong>: q作为p的右子节点，r作为q的右子节点；</p>
<p>现在假设s作为q的兄弟（如果s不为空，即存在兄弟节点），</p>
<h4 id="变色"><a href="#变色" class="headerlink" title="变色"></a>变色</h4><p>当s节点（q的兄弟节点）为红色节点时需要做变色操作：</p>
<p><img src="/uploads/two_three_four_red_black/37.png" alt=""></p>
<p>节点p变为红色节点；节点q，s变为黑色节点；节点r不变。这样做变色操作可能会导致红色指针冲突沿着树向上传播，所以颜色调整过程需要多次重复。</p>
<blockquote>
<p><strong>颜色调整不会影响从根节点到外部节点路径上黑色指针的个数</strong>；</p>
</blockquote>
<h4 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h4><p>当出现连续两个红色指针，并且节点s为黑色节点时，此时需要做旋转操作。</p>
<p><img src="/uploads/two_three_four_red_black/38.png" alt=""></p>
<blockquote>
<p><strong>旋转操作不会引起红色指针冲突的传播，因此最多只需要执行一次旋转操作</strong>；</p>
</blockquote>
<h4 id="红黑树插入实例例二："><a href="#红黑树插入实例例二：" class="headerlink" title="红黑树插入实例例二："></a>红黑树插入实例例二：</h4><p>现在使用自底向上的方式按顺序插入元素10，9，8，7，6，5，4，3：</p>
<p><img src="/uploads/two_three_four_red_black/39.png" alt=""></p>
<p>1）、插入节点颜色为红色；</p>
<p>2）、节点s为红色时，并且q和r为两个连续的红色节点，此时则需要变色；</p>
<p>3）、如果节点s为黑色，或者为空。当q和r为两个连续红色节点时，此时只需要旋转即可；</p>
<h4 id="自顶向下和自底向上的总结"><a href="#自顶向下和自底向上的总结" class="headerlink" title="自顶向下和自底向上的总结"></a>自顶向下和自底向上的总结</h4><p>1）、对于自顶向下的插入方法，需要执行O(logN)次旋转操作；而自底向上的插入方法只需要执行一次旋转操作；</p>
<p>2）、两种方式都需要执行O(logN)颜色调整操作；</p>
<p>使用自底向上的插入方式就和网上大部分提到的红黑树操作方式一样。但我们还是需要知道自顶向下的操作方式。</p>
<h3 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h3><p>其实讲到这里，红黑树已经没有什么讲的必要了。只需要套用2-3-4树的删除节点策略即可。最主要的是在自顶向下扫描的过程中，明确当前红黑树节点处于对应2-3-4树节点的类型。</p>
<p>扫描过程：</p>
<ul>
<li><p>1）、尚未命中待删除元素时，则以二叉树大小关系，去寻找合适的左右子树；</p>
</li>
<li><p>2）、命中待删除元素时，如果元素所处节点为叶子节点。那么直接删除即可；</p>
</li>
<li><p>3）、命中待删除元素时，如果元素所处节点不是叶子节点，此时我们可以像2-3树/2-3-4树的规则继续向下寻找叶子节点。寻找的目标可以是命中节点的左子树中最大子节点，或者右子树中最小子节点；</p>
</li>
</ul>
<p>明确节点类型：</p>
<ul>
<li><p>1）、如果当前节点是红色节点，那么该节点一定对应于2-3-4树中的3节点、或者4节点；<br><strong>由于2-3-4树中，3节点和4节点无需变换直接向下继续遍历即可</strong>；</p>
</li>
<li><p>2）、如果当前节点是黑色节点，那么再去查看该节点左右子节点是否存在红色节点。<br>如果没有红色节点，那么该节点即对应2-3-4树中的2节点。此时则需要看该节点相邻子树的情况，进行对应2节点到4节点的变换（具体变换过程见2-3-4树的删除一节）。</p>
</li>
</ul>
<p>下面是一个具体的例子，在这个例子中我将要删除元素80：<br><img src="/uploads/two_three_four_red_black/40.png" alt=""></p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>由于需要写的代码太多了，而且我又比较懒。所以我就写了一下2-3树的增加、删除等相关操作，我将代码全部贴在这里，也可以直接去<a href="https://github.com/wangwangok/two_three_tree" target="_blank" rel="external">Github</a>上查看源代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;list&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">/// 这里假设对于element来说，如果该域值不存在，我们使得element的value部分设置为INT_MAX</div><div class="line">class element &#123;</div><div class="line">private:</div><div class="line">	int value;</div><div class="line">public:</div><div class="line">	element(int val) :value(val) &#123;&#125;</div><div class="line">	element() &#123; value = INT_MAX; &#125;</div><div class="line">	void setValue(int val) &#123;value = val;&#125;</div><div class="line">	int getValue() const &#123; return value; &#125;</div><div class="line"></div><div class="line">	static inline element invalid() &#123;</div><div class="line">		return element(INT_MAX);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">bool operator == (const element&amp; lhs,const element&amp; rhs) &#123;</div><div class="line">	return lhs.getValue() == rhs.getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool operator != (const element&amp; lhs,const element&amp; rhs) &#123;</div><div class="line">	return !(lhs.getValue() == rhs.getValue());</div><div class="line">&#125;</div><div class="line"></div><div class="line">class two_three_tree_node &#123;</div><div class="line">public:</div><div class="line">	element data_l;</div><div class="line">	element data_r;</div><div class="line">	two_three_tree_node* left_child;</div><div class="line">	two_three_tree_node* middle_child;</div><div class="line">	two_three_tree_node* right_child;</div><div class="line">public:</div><div class="line"></div><div class="line">	two_three_tree_node()</div><div class="line">	&#123;</div><div class="line">		data_l = element::invalid();</div><div class="line">		data_r = element::invalid();</div><div class="line">		left_child = NULL;</div><div class="line">		middle_child = NULL;</div><div class="line">		right_child = NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	virtual ~two_three_tree_node()</div><div class="line">	&#123;</div><div class="line">		data_l = element::invalid();</div><div class="line">		data_r = element::invalid();</div><div class="line">		if (left_child != nullptr)</div><div class="line">		&#123;</div><div class="line">			delete left_child;</div><div class="line">		&#125;</div><div class="line">		if (middle_child != nullptr)</div><div class="line">		&#123;</div><div class="line">			delete middle_child;</div><div class="line">		&#125;</div><div class="line">		if (right_child != nullptr)</div><div class="line">		&#123;</div><div class="line">			delete right_child;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class node_strategy &#123;</div><div class="line">protected:</div><div class="line">	const two_three_tree_node* node;</div><div class="line">	element value;</div><div class="line">public:</div><div class="line">	node_strategy():node(NULL),value(element::invalid()) &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	virtual void setValue(const element&amp; ele) = 0;</div><div class="line">	virtual void setNode(const two_three_tree_node* nd) = 0;</div><div class="line">	virtual two_three_tree_node* next() = 0;</div><div class="line">	virtual ~node_strategy()</div><div class="line">	&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class left_child_strategy:public node_strategy &#123;</div><div class="line">	two_three_tree_node* next() &#123;</div><div class="line">		element data_left = node-&gt;data_l;</div><div class="line">		if (value.getValue() &lt; data_left.getValue()) &#123; return node-&gt;left_child; &#125;</div><div class="line">		return nullptr;</div><div class="line">	&#125;</div><div class="line">	void setValue(const element&amp; ele) &#123;</div><div class="line">		value = ele;</div><div class="line">	&#125;</div><div class="line">	void setNode(const two_three_tree_node* nd) &#123;</div><div class="line">		node = nd;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class middle_child_strategy :public node_strategy &#123;</div><div class="line">	two_three_tree_node* next() &#123;</div><div class="line">		element data_left = node-&gt;data_l;</div><div class="line">		element data_right = node-&gt;data_r;</div><div class="line">		if (value.getValue() &gt; data_left.getValue() &amp;&amp; value.getValue() &lt; data_right.getValue()) &#123; return node-&gt;middle_child; &#125;</div><div class="line">		return nullptr;</div><div class="line">	&#125;</div><div class="line">	void setValue(const element&amp; ele) &#123;</div><div class="line">		value = ele;</div><div class="line">	&#125;</div><div class="line">	void setNode(const two_three_tree_node* nd) &#123;</div><div class="line">		node = nd;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class right_child_strategy :public node_strategy &#123;</div><div class="line">	two_three_tree_node* next() &#123;</div><div class="line">		element data_right = node-&gt;data_r;</div><div class="line">		if (value.getValue() &gt; data_right.getValue()) &#123;</div><div class="line">			return node-&gt;right_child;</div><div class="line">		&#125;</div><div class="line">		return nullptr;</div><div class="line">	&#125;</div><div class="line">	void setValue(const element&amp; ele) &#123;</div><div class="line">		value = ele;</div><div class="line">	&#125;</div><div class="line">	void setNode(const two_three_tree_node* nd) &#123;</div><div class="line">		node = nd;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">/// #### 查找</div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">class search_strategy &#123;</div><div class="line">	two_three_tree_node* root;</div><div class="line">public:</div><div class="line">	search_strategy(two_three_tree_node* rt) &#123;</div><div class="line">		root = rt;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	two_three_tree_node* search(element&amp; ele) &#123;</div><div class="line">		two_three_tree_node* node = root;</div><div class="line">		node_strategy *left = new left_child_strategy();</div><div class="line">		node_strategy *middle = new middle_child_strategy();</div><div class="line">		node_strategy *right = new right_child_strategy();</div><div class="line">		while (node)</div><div class="line">		&#123;</div><div class="line">			if (node-&gt;data_l == ele)</div><div class="line">			&#123;</div><div class="line">				return node;</div><div class="line">			&#125;</div><div class="line">			if (node-&gt;data_r == ele)</div><div class="line">			&#123;</div><div class="line">				return node;</div><div class="line">			&#125;</div><div class="line">			left-&gt;setNode(node);</div><div class="line">			left-&gt;setValue(ele);</div><div class="line">			if (two_three_tree_node *temp = left-&gt;next())</div><div class="line">			&#123;</div><div class="line">				node = temp;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			middle-&gt;setNode(node);</div><div class="line">			middle-&gt;setValue(ele);</div><div class="line">			if (two_three_tree_node * temp = middle-&gt;next())</div><div class="line">			&#123;</div><div class="line">				node = temp;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			right-&gt;setNode(node);</div><div class="line">			right-&gt;setValue(ele);</div><div class="line">			if (two_three_tree_node * temp = right-&gt;next())</div><div class="line">			&#123;</div><div class="line">				node = temp;</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			node = nullptr;</div><div class="line">		&#125;</div><div class="line">		delete left;</div><div class="line">		delete middle;</div><div class="line">		delete right;</div><div class="line">		return nullptr;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">/// #### 插入</div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">class insert_strategy &#123;</div><div class="line">private:</div><div class="line">	/// 创建一个栈结构，将从叶节点到根节点路径上左右的节点保存下来</div><div class="line">	struct find_stack &#123;</div><div class="line">		struct find_stack_node &#123;</div><div class="line">			two_three_tree_node* tree_node;</div><div class="line">			find_stack_node* next;</div><div class="line">		&#125;;</div><div class="line">		void push(const two_three_tree_node* tree_node) &#123;</div><div class="line">			if (!tree_node)</div><div class="line">			&#123;</div><div class="line">				return;</div><div class="line">			&#125;</div><div class="line">			find_stack_node* node = new find_stack_node();</div><div class="line">			node-&gt;tree_node = const_cast&lt;two_three_tree_node*&gt;(tree_node);</div><div class="line">			node-&gt;next = top;</div><div class="line">			top = node;</div><div class="line">		&#125;</div><div class="line">		two_three_tree_node* pop() &#123;</div><div class="line">			find_stack_node* node = top;</div><div class="line">			top = top-&gt;next;</div><div class="line">			two_three_tree_node* tree_node = node-&gt;tree_node;</div><div class="line">			node-&gt;next = nullptr;</div><div class="line">			node-&gt;tree_node = nullptr;</div><div class="line">			delete node;</div><div class="line">			return tree_node;</div><div class="line">		&#125;</div><div class="line">		find_stack_node* stack_top() &#123;</div><div class="line">			return top;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		~find_stack()</div><div class="line">		&#123;</div><div class="line">			while (top)</div><div class="line">			&#123;</div><div class="line">				pop();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	private:</div><div class="line">		find_stack_node* top;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line"></div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">///#####寻找节点</div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">	class find_element &#123;</div><div class="line">	private:</div><div class="line">		two_three_tree_node* root;</div><div class="line">		element value;</div><div class="line">		find_stack* stack;</div><div class="line">	public:</div><div class="line">		find_element(const two_three_tree_node* rt, element val) &#123;</div><div class="line">			root = const_cast&lt;two_three_tree_node*&gt;(rt);</div><div class="line">			value = val;</div><div class="line">			stack = new find_stack();</div><div class="line">		&#125;</div><div class="line">		void set_value(element val) &#123;</div><div class="line">			value = val;</div><div class="line">		&#125;</div><div class="line">		/// 修改版查找：根据根节点和指定元素：如果查找到指定元素，则认为查找成功，返回null；否则返回查找过程中遇到的叶子节点；</div><div class="line">		two_three_tree_node* node() &#123;</div><div class="line">			two_three_tree_node* node = root;</div><div class="line">			node_strategy* left = new left_child_strategy();</div><div class="line">			node_strategy* middle = new middle_child_strategy();</div><div class="line">			node_strategy* right = new right_child_strategy();</div><div class="line">			two_three_tree_node* result = nullptr;</div><div class="line">			while (node)</div><div class="line">			&#123;</div><div class="line">				stack-&gt;push(node);</div><div class="line">				if (node-&gt;data_l == value)</div><div class="line">				&#123;</div><div class="line">					goto release;</div><div class="line">				&#125;</div><div class="line">				if (node-&gt;data_r == value)</div><div class="line">				&#123;</div><div class="line">					goto release;</div><div class="line">				&#125;</div><div class="line">				left-&gt;setNode(node);</div><div class="line">				left-&gt;setValue(value);</div><div class="line">				if (two_three_tree_node * temp = left-&gt;next())</div><div class="line">				&#123;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				middle-&gt;setNode(node);</div><div class="line">				middle-&gt;setValue(value);</div><div class="line">				if (two_three_tree_node * temp = middle-&gt;next())</div><div class="line">				&#123;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				right-&gt;setNode(node);</div><div class="line">				right-&gt;setValue(value);</div><div class="line">				if (two_three_tree_node * temp = right-&gt;next())</div><div class="line">				&#123;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				node = nullptr;</div><div class="line">			&#125;</div><div class="line">			if (stack-&gt;stack_top())</div><div class="line">			&#123;</div><div class="line">				result = stack-&gt;stack_top()-&gt;tree_node;</div><div class="line">			&#125;</div><div class="line">			release:</div><div class="line">			delete left;</div><div class="line">			delete middle;</div><div class="line">			delete right;</div><div class="line">			return result;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		find_stack* get_stack() &#123;</div><div class="line">			return stack;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		~find_element()</div><div class="line">		&#123;</div><div class="line">			root = nullptr;</div><div class="line">			delete stack;</div><div class="line">			stack = nullptr;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//// 拼接</div><div class="line">	class split_element &#123;</div><div class="line">	private:</div><div class="line">		find_stack* stack;</div><div class="line">		element ele;</div><div class="line">	public:</div><div class="line">		split_element(const find_stack* steck,const element&amp; val) &#123;</div><div class="line">			stack = const_cast&lt;find_stack *&gt;(steck);</div><div class="line">			ele = val;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		two_three_tree_node* split(bool (*two_node_insert_handle)(two_three_tree_node* node,const two_three_tree_node* insert_node))&#123;</div><div class="line">			find_stack::find_stack_node* top = stack-&gt;stack_top();</div><div class="line">			two_three_tree_node* be_insert_node = new two_three_tree_node();</div><div class="line">			be_insert_node-&gt;data_l = ele;</div><div class="line">			int breakpoint = ele.getValue();</div><div class="line">			while(be_insert_node-&gt;data_l != element::invalid() &amp;&amp; top)&#123;</div><div class="line">				two_three_tree_node* current = top-&gt;tree_node;</div><div class="line">				if (two_node_insert_handle(current, be_insert_node)) &#123;</div><div class="line">					return nullptr;</div><div class="line">				&#125;</div><div class="line">				/// current 存放三个元素里面最小的一个</div><div class="line">				/// max 存放三个元素里面最大的一个</div><div class="line">				two_three_tree_node* max_item = new two_three_tree_node();</div><div class="line">				if (be_insert_node-&gt;data_l.getValue() &lt; current-&gt;data_l.getValue())</div><div class="line">				&#123;</div><div class="line">					max_item-&gt;data_l = current-&gt;data_r;</div><div class="line">					max_item-&gt;data_r = element::invalid();</div><div class="line">					max_item-&gt;left_child = current-&gt;middle_child;</div><div class="line">					max_item-&gt;middle_child = current-&gt;right_child;</div><div class="line"></div><div class="line">					element temp = current-&gt;data_l;</div><div class="line">					current-&gt;data_l = be_insert_node-&gt;data_l;</div><div class="line">					current-&gt;data_r = element::invalid();</div><div class="line">					current-&gt;left_child = be_insert_node-&gt;left_child;</div><div class="line">					current-&gt;middle_child = be_insert_node-&gt;middle_child;</div><div class="line">					current-&gt;right_child = nullptr;</div><div class="line">					</div><div class="line">					be_insert_node-&gt;data_l = temp;</div><div class="line">					be_insert_node-&gt;data_r = element::invalid();</div><div class="line">					be_insert_node-&gt;left_child = current;</div><div class="line">					be_insert_node-&gt;middle_child = max_item;</div><div class="line"></div><div class="line">					top = top-&gt;next;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				if (be_insert_node-&gt;data_l.getValue() &gt; current-&gt;data_r.getValue()) &#123;</div><div class="line">					max_item-&gt;data_l = be_insert_node-&gt;data_l;</div><div class="line">					max_item-&gt;data_r = element::invalid();</div><div class="line">					max_item-&gt;left_child = be_insert_node-&gt;left_child;</div><div class="line">					max_item-&gt;middle_child = be_insert_node-&gt;middle_child;</div><div class="line"></div><div class="line">					current-&gt;right_child = nullptr;</div><div class="line">					element temp = current-&gt;data_r;</div><div class="line">					current-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">					be_insert_node-&gt;data_l = temp;</div><div class="line">					be_insert_node-&gt;left_child = current;</div><div class="line">					be_insert_node-&gt;middle_child = max_item;</div><div class="line">					be_insert_node-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">					top = top-&gt;next;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				if (be_insert_node-&gt;data_l.getValue() &lt; current-&gt;data_r.getValue() &amp;&amp; be_insert_node-&gt;data_l.getValue() &gt; current-&gt;data_l.getValue()) &#123;</div><div class="line">					max_item-&gt;data_l = current-&gt;data_r;</div><div class="line">					max_item-&gt;left_child = be_insert_node-&gt;middle_child;</div><div class="line">					max_item-&gt;middle_child = current-&gt;right_child;</div><div class="line">					max_item-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">					current-&gt;middle_child = be_insert_node-&gt;left_child;</div><div class="line">					current-&gt;data_r = element::invalid();</div><div class="line">					current-&gt;right_child = nullptr;</div><div class="line"></div><div class="line">					be_insert_node-&gt;left_child = current;</div><div class="line">					be_insert_node-&gt;middle_child = max_item;</div><div class="line">					be_insert_node-&gt;right_child = nullptr;</div><div class="line">					be_insert_node-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">					top = top-&gt;next;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			return be_insert_node;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	static bool two_node_insert(two_three_tree_node* node, const two_three_tree_node* insert_node) &#123;</div><div class="line">		if (node-&gt;data_r != element::invalid())</div><div class="line">		&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		if (node-&gt;data_l.getValue() &lt; const_cast&lt;two_three_tree_node*&gt;(insert_node)-&gt;data_l.getValue())</div><div class="line">		&#123;</div><div class="line">			node-&gt;data_r = insert_node-&gt;data_l;</div><div class="line">			node-&gt;middle_child = insert_node-&gt;left_child;</div><div class="line">			node-&gt;right_child = insert_node-&gt;middle_child;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			element temp = node-&gt;data_l;</div><div class="line">			node-&gt;data_l = insert_node-&gt;data_l;</div><div class="line">			node-&gt;data_r = temp;</div><div class="line">			node-&gt;right_child = node-&gt;middle_child;</div><div class="line">			node-&gt;left_child = insert_node-&gt;left_child;</div><div class="line">			node-&gt;middle_child = insert_node-&gt;middle_child;</div><div class="line">		&#125;</div><div class="line">		return true;</div><div class="line">	&#125;</div><div class="line">public:</div><div class="line"></div><div class="line">	two_three_tree_node* insert(two_three_tree_node* root ,const element &amp;ele) &#123;</div><div class="line">		find_element* fele = new find_element(root,ele);</div><div class="line">		two_three_tree_node* leaf = fele-&gt;node();</div><div class="line">		if (nullptr == leaf)</div><div class="line">		&#123;/// 待插入元素已存在于树中</div><div class="line">			delete fele;</div><div class="line">			return root;</div><div class="line">		&#125;</div><div class="line">		split_element* se = new split_element(fele-&gt;get_stack(), ele);</div><div class="line">		two_three_tree_node* root_node = se-&gt;split(two_node_insert);</div><div class="line">		if (root_node == nullptr) &#123;/// 2节点</div><div class="line">			delete fele;</div><div class="line">			return root;</div><div class="line">		&#125;</div><div class="line">		/// 3节点</div><div class="line">		delete fele;</div><div class="line">		return root_node;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">/// #### 删除</div><div class="line">///#######################################################################################################################</div><div class="line">///#######################################################################################################################</div><div class="line">class delete_strategy &#123;</div><div class="line">	two_three_tree_node* root;</div><div class="line">	element ele;</div><div class="line">private:</div><div class="line">	/// 获取兄弟节点;</div><div class="line">	two_three_tree_node* get_bro_node(two_three_tree_node * const node, two_three_tree_node * const parent) &#123;</div><div class="line">		if (node == parent-&gt;left_child)</div><div class="line">		&#123;</div><div class="line">			return parent-&gt;middle_child;</div><div class="line">		&#125;</div><div class="line">		if (node == parent-&gt;middle_child)</div><div class="line">		&#123;</div><div class="line">			if (is_three_node(parent-&gt;right_child))</div><div class="line">			&#123;</div><div class="line">				return parent-&gt;right_child;</div><div class="line">			&#125;</div><div class="line">			return parent-&gt;left_child;</div><div class="line">		&#125;</div><div class="line">		if (node == parent-&gt;right_child) </div><div class="line">		&#123;</div><div class="line">			return parent-&gt;middle_child;</div><div class="line">		&#125;</div><div class="line">		return nullptr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">protected:</div><div class="line">	static inline bool is_three_node(two_three_tree_node* node) &#123;</div><div class="line">		if (nullptr == node)</div><div class="line">		&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		if (node-&gt;data_l != element::invalid() &amp;&amp; node-&gt;data_r != element::invalid())</div><div class="line">		&#123;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	static bool remove_element(two_three_tree_node* node, element ele) &#123;</div><div class="line">		if (node-&gt;data_r == ele)</div><div class="line">		&#123;</div><div class="line">			node-&gt;data_r = element::invalid();</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (node-&gt;data_l == ele) &#123;</div><div class="line">			node-&gt;data_l = node-&gt;data_r;</div><div class="line">			node-&gt;data_r = element::invalid();</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">	class delete_ttt_node &#123;</div><div class="line">	public:</div><div class="line">		two_three_tree_node* node;</div><div class="line">		element* isptr;</div><div class="line"></div><div class="line">		delete_ttt_node(const two_three_tree_node* rt, const element* is) &#123;</div><div class="line">			node = const_cast&lt;two_three_tree_node*&gt;(rt);</div><div class="line">			isptr = const_cast&lt;element*&gt;(is);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	/// 叶节点转移</div><div class="line">	class leaf_swap &#123;</div><div class="line">		delete_ttt_node* ttt_node;</div><div class="line">		element ele;</div><div class="line">		/// 返回值为目标节点</div><div class="line">		/// leaf为叶节点</div><div class="line">	private:</div><div class="line">		two_three_tree_node* leaf_node;</div><div class="line">		two_three_tree_node* leaf_parent_node;</div><div class="line">	public:</div><div class="line">		leaf_swap(const two_three_tree_node* rt, element&amp; el) &#123;</div><div class="line">			ttt_node = new delete_ttt_node(rt, nullptr);</div><div class="line">			ele = el;</div><div class="line">			leaf_node = nullptr;</div><div class="line">			leaf_parent_node = nullptr;</div><div class="line">		&#125;</div><div class="line">		leaf_swap() &#123;</div><div class="line">			ttt_node = new delete_ttt_node(nullptr, nullptr);</div><div class="line">			ele = element::invalid();</div><div class="line">			leaf_node = nullptr;</div><div class="line">			leaf_parent_node = nullptr;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		~leaf_swap()</div><div class="line">		&#123;</div><div class="line">			delete ttt_node;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		two_three_tree_node* get_leaf_node() &#123;</div><div class="line">			return leaf_node;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		two_three_tree_node* get_leaf_parent_node() &#123;</div><div class="line">			return leaf_parent_node;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		delete_ttt_node* get_swap_info(two_three_tree_node** leaf) &#123;</div><div class="line">			two_three_tree_node* node = ttt_node-&gt;node;</div><div class="line">			delete_ttt_node* des_node = new delete_ttt_node(ttt_node-&gt;node, nullptr);</div><div class="line">			node_strategy* left = new left_child_strategy();</div><div class="line">			node_strategy* middle = new middle_child_strategy();</div><div class="line">			node_strategy* right = new right_child_strategy();</div><div class="line">			/// 命中待删除元素</div><div class="line">			while (node)</div><div class="line">			&#123;</div><div class="line">				if (node-&gt;data_l == ele)</div><div class="line">				&#123;</div><div class="line">					des_node-&gt;node = node;</div><div class="line">					des_node-&gt;isptr = &amp;(node-&gt;data_l);</div><div class="line">					break;</div><div class="line">				&#125;</div><div class="line">				if (node-&gt;data_r == ele)</div><div class="line">				&#123;</div><div class="line">					des_node-&gt;node = node;</div><div class="line">					des_node-&gt;isptr = &amp;(node-&gt;data_r);</div><div class="line">					break;</div><div class="line">				&#125;</div><div class="line">				left-&gt;setNode(node);</div><div class="line">				left-&gt;setValue(ele);</div><div class="line">				if (two_three_tree_node * temp = left-&gt;next())</div><div class="line">				&#123;</div><div class="line">					leaf_parent_node = node;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				middle-&gt;setNode(node);</div><div class="line">				middle-&gt;setValue(ele);</div><div class="line">				if (two_three_tree_node * temp = middle-&gt;next())</div><div class="line">				&#123;</div><div class="line">					leaf_parent_node = node;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				right-&gt;setNode(node);</div><div class="line">				right-&gt;setValue(ele);</div><div class="line">				if (two_three_tree_node * temp = right-&gt;next())</div><div class="line">				&#123;</div><div class="line">					leaf_parent_node = node;</div><div class="line">					node = temp;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				node = nullptr;</div><div class="line">			&#125;</div><div class="line">			delete left;</div><div class="line">			delete middle;</div><div class="line">			delete right;</div><div class="line">			/// 寻找叶子节点</div><div class="line">			/// 左子树的最大子节点；或者右子树的最小子节点；</div><div class="line">			/// 这里我选择左子树的最大子节点；</div><div class="line">			if (des_node == nullptr)</div><div class="line">			&#123;</div><div class="line">				leaf_parent_node = nullptr;</div><div class="line">				return des_node;</div><div class="line">			&#125;</div><div class="line">			*leaf = des_node-&gt;node;</div><div class="line">			</div><div class="line">			for (node = (des_node-&gt;isptr-&gt;getValue() == des_node-&gt;node-&gt;data_r.getValue()) ? des_node-&gt;node-&gt;middle_child : des_node-&gt;node-&gt;left_child;</div><div class="line">				node; </div><div class="line">				node = node-&gt;middle_child)</div><div class="line">			&#123;</div><div class="line">				/// 非叶节点</div><div class="line">				leaf_parent_node = *leaf;</div><div class="line">				*leaf = node;</div><div class="line">			&#125;</div><div class="line">			return des_node;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		bool swap() &#123;/// 仅仅交换两个指针的数据域的值，指针域不做改变</div><div class="line">			two_three_tree_node* leaf = nullptr;</div><div class="line">			delete_ttt_node* des_node = get_swap_info(&amp;leaf);</div><div class="line">			leaf_node = leaf;</div><div class="line">			if (nullptr == des_node || nullptr == leaf)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			if (des_node-&gt;node == leaf)</div><div class="line">			&#123;/// 叶节点，不做交换</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">			if (leaf-&gt;data_r != element::invalid())</div><div class="line">			&#123;</div><div class="line">				element r_temp = leaf-&gt;data_r;</div><div class="line">				leaf-&gt;data_r = *(des_node-&gt;isptr);</div><div class="line">				*(des_node-&gt;isptr) = r_temp;</div><div class="line">			&#125;</div><div class="line">			else </div><div class="line">			&#123;</div><div class="line">				element l_temp = leaf-&gt;data_l;</div><div class="line">				leaf-&gt;data_l = *(des_node-&gt;isptr);</div><div class="line">				*(des_node-&gt;isptr) = l_temp;</div><div class="line">			&#125;</div><div class="line">			delete des_node;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	class two_node_delete_interface &#123;</div><div class="line">	protected:</div><div class="line">		two_three_tree_node* leaf;</div><div class="line">		two_three_tree_node* bro;</div><div class="line">		two_three_tree_node* parent;</div><div class="line">		two_node_delete_interface(two_three_tree_node* lf, two_three_tree_node* bo, two_three_tree_node* pt) :leaf(lf), bro(bo), parent(pt) &#123;&#125;</div><div class="line">		virtual ~two_node_delete_interface()&#123;&#125;</div><div class="line">	&#125;;</div><div class="line">	/// 旋转</div><div class="line">	class rotate : public two_node_delete_interface &#123;/// 兄弟节点为3节点时，旋转</div><div class="line">	private:</div><div class="line">		bool left_leaf_rotate() &#123;</div><div class="line">			leaf-&gt;data_l = parent-&gt;data_l;</div><div class="line">			leaf-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">			parent-&gt;data_l = bro-&gt;data_l;</div><div class="line"></div><div class="line">			bro-&gt;data_l = bro-&gt;data_r;</div><div class="line">			bro-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">			leaf-&gt;middle_child = bro-&gt;left_child;</div><div class="line">			bro-&gt;left_child = bro-&gt;middle_child;</div><div class="line">			bro-&gt;middle_child = bro-&gt;right_child;</div><div class="line"></div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		bool right_leaf_rorate() &#123;</div><div class="line">			leaf-&gt;data_l = parent-&gt;data_l;</div><div class="line">			parent-&gt;data_l = bro-&gt;data_r;</div><div class="line">			leaf-&gt;left_child = bro-&gt;right_child;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		bool middle_leaf_rorate() &#123;</div><div class="line">			if (bro == parent-&gt;right_child) &#123;</div><div class="line">				leaf-&gt;data_l = parent-&gt;data_r;</div><div class="line">				leaf-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">				parent-&gt;data_r = bro-&gt;data_l;</div><div class="line">				bro-&gt;data_l = bro-&gt;data_r;</div><div class="line">				bro-&gt;data_r = element::invalid();</div><div class="line"></div><div class="line">				leaf-&gt;middle_child = bro-&gt;left_child;</div><div class="line">				bro-&gt;left_child = bro-&gt;middle_child;</div><div class="line">				bro-&gt;middle_child = bro-&gt;right_child;</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">			leaf-&gt;data_l = parent-&gt;data_l;</div><div class="line">			parent-&gt;data_l = bro-&gt;data_r;</div><div class="line">			leaf-&gt;left_child = bro-&gt;right_child;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	public:</div><div class="line">		rotate(two_three_tree_node* lf, two_three_tree_node* bo, two_three_tree_node* pt):two_node_delete_interface(lf, bo, pt) &#123;&#125;</div><div class="line">		bool execute() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			if (leaf == parent-&gt;left_child) </div><div class="line">			&#123;</div><div class="line">				return left_leaf_rotate();</div><div class="line">			&#125;</div><div class="line">			else if (leaf == parent-&gt;middle_child)</div><div class="line">			&#123;</div><div class="line">				return middle_leaf_rorate();</div><div class="line">			&#125;</div><div class="line">			else </div><div class="line">			&#123;</div><div class="line">				return right_leaf_rorate();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	/// 合并</div><div class="line">	class combine : public two_node_delete_interface &#123;</div><div class="line">	protected:</div><div class="line">		bool left_leaf_combine() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			bool parent_is_three_node = is_three_node(parent);</div><div class="line">			if (false == parent_is_three_node)</div><div class="line">			&#123;</div><div class="line">				parent-&gt;data_r = bro-&gt;data_l;</div><div class="line">				parent-&gt;left_child = leaf-&gt;left_child;</div><div class="line">				parent-&gt;middle_child = bro-&gt;left_child;</div><div class="line">				parent-&gt;right_child = bro-&gt;right_child;</div><div class="line">				delete bro;</div><div class="line">				delete leaf;</div><div class="line">				bro = nullptr;</div><div class="line">				leaf = nullptr;</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">			bro-&gt;data_r = bro-&gt;data_l;</div><div class="line">			bro-&gt;data_l = parent-&gt;data_l;</div><div class="line"></div><div class="line">			parent-&gt;data_l = parent-&gt;data_r;</div><div class="line">			parent-&gt;data_r = element::invalid();</div><div class="line">			parent-&gt;left_child = parent-&gt;middle_child;</div><div class="line">			parent-&gt;middle_child = parent-&gt;right_child;</div><div class="line">			parent-&gt;right_child = nullptr;</div><div class="line"></div><div class="line">			bro-&gt;right_child = bro-&gt;middle_child;</div><div class="line">			bro-&gt;middle_child = bro-&gt;left_child;</div><div class="line">			bro-&gt;left_child = leaf-&gt;left_child;</div><div class="line">			delete leaf;</div><div class="line">			leaf = nullptr;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		bool middle_leaf_combine() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			bool parent_is_three_node = is_three_node(parent);</div><div class="line">			if (false == parent_is_three_node)</div><div class="line">			&#123;</div><div class="line">				parent-&gt;data_r = parent-&gt;data_l;</div><div class="line">				parent-&gt;data_l = bro-&gt;data_l;</div><div class="line">				parent-&gt;left_child = nullptr;</div><div class="line">				parent-&gt;middle_child = nullptr;</div><div class="line">				delete leaf;</div><div class="line">				delete bro;</div><div class="line">				leaf = nullptr;</div><div class="line">				bro = nullptr;</div><div class="line">				return true;</div><div class="line">			&#125;</div><div class="line">			bro-&gt;data_r = parent-&gt;data_l;</div><div class="line">			parent-&gt;data_l = parent-&gt;data_r;</div><div class="line">			parent-&gt;data_r = element::invalid();</div><div class="line">			parent-&gt;middle_child = parent-&gt;right_child;</div><div class="line">			parent-&gt;right_child = nullptr;</div><div class="line">			bro-&gt;middle_child = leaf-&gt;left_child;</div><div class="line">			bro-&gt;right_child = leaf-&gt;middle_child;</div><div class="line">			delete leaf;</div><div class="line">			leaf = nullptr;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		bool right_leaf_combine() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			bro-&gt;data_r = parent-&gt;data_r;</div><div class="line">			parent-&gt;data_r = element::invalid();</div><div class="line">			parent-&gt;right_child = nullptr;</div><div class="line">			bro-&gt;middle_child = leaf-&gt;left_child;</div><div class="line">			bro-&gt;right_child = leaf-&gt;middle_child;</div><div class="line">			delete leaf;</div><div class="line">			leaf = nullptr;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	public:</div><div class="line">		combine(two_three_tree_node* lf, two_three_tree_node* bo, two_three_tree_node* pt) :two_node_delete_interface(lf, bo, pt) &#123;&#125;</div><div class="line"></div><div class="line">		bool execute() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			if (leaf == parent-&gt;left_child)</div><div class="line">			&#123;</div><div class="line">				return left_leaf_combine();</div><div class="line">			&#125;</div><div class="line">			else if(leaf == parent-&gt;middle_child)</div><div class="line">			&#123;</div><div class="line">				return middle_leaf_combine();</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				return right_leaf_combine();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	class two_node_delete : public two_node_delete_interface &#123;</div><div class="line">	public:</div><div class="line">		two_node_delete(two_three_tree_node* lf, two_three_tree_node* bo, two_three_tree_node* pt):two_node_delete_interface(lf, bo, pt) &#123;&#125;</div><div class="line"></div><div class="line">		bool execute() &#123;</div><div class="line">			if (nullptr == leaf || nullptr == parent || nullptr == bro)</div><div class="line">			&#123;</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			/// 查看兄弟节点为2节点，还是3节点；</div><div class="line">			bool three_node = is_three_node(bro);</div><div class="line">			if (true == three_node) /// 兄弟节点为3节点，旋转</div><div class="line">			&#123;</div><div class="line">				rotate* rtt = new rotate(leaf, bro, parent);</div><div class="line">				return rtt-&gt;execute();</div><div class="line">			&#125;</div><div class="line">			else  /// 兄弟节点为2节点，合并</div><div class="line">			&#123;</div><div class="line">				combine* cbn = new combine(leaf, bro, parent);</div><div class="line">				return cbn-&gt;execute();</div><div class="line">			&#125;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">public:</div><div class="line">	delete_strategy(const two_three_tree_node*rt, element&amp; el) &#123;</div><div class="line">		root = const_cast&lt;two_three_tree_node*&gt;(rt);</div><div class="line">		ele = el;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	bool execute() &#123;</div><div class="line">		leaf_swap* ls = new leaf_swap(root, ele);</div><div class="line">		bool result = ls-&gt;swap();</div><div class="line">		if (false == result)</div><div class="line">		&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		two_three_tree_node* leaf = ls-&gt;get_leaf_node();</div><div class="line">		if (nullptr == leaf)</div><div class="line">		&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		two_three_tree_node* leaf_parent = ls-&gt;get_leaf_parent_node();</div><div class="line">		/// 3节点</div><div class="line">		if (is_three_node(leaf))</div><div class="line">		&#123;</div><div class="line">			remove_element(leaf, ele);</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">		/// 2节点</div><div class="line">		two_three_tree_node* bro = get_bro_node(leaf, leaf_parent);</div><div class="line">		if (nullptr == bro)</div><div class="line">		&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		two_node_delete* tnd = new two_node_delete(leaf, bro, leaf_parent);</div><div class="line">		tnd-&gt;execute();</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	vector&lt;int&gt; randoms;</div><div class="line">	/// 插入</div><div class="line">	//cout &lt;&lt; &quot;input root node value: &quot; &lt;&lt; endl;</div><div class="line">	int rootvalue = 50;</div><div class="line">	//cin &gt;&gt; rootvalue;</div><div class="line">	two_three_tree_node* root = new two_three_tree_node();</div><div class="line">	root-&gt;data_l = element(rootvalue);</div><div class="line"></div><div class="line">	/* 自行定制输入数字</div><div class="line">	int inputvalue = 0;</div><div class="line">	while (cout &lt;&lt; &quot;input node (-1 exit): &quot;, cin &gt;&gt; inputvalue,inputvalue != -1)</div><div class="line">	&#123;</div><div class="line">		randoms.push_back(inputvalue);</div><div class="line">	&#125;</div><div class="line">	*/</div><div class="line">	randoms = &#123; 33 ,85 ,68 ,80 ,62 ,15 ,97 ,10 &#125;;</div><div class="line"></div><div class="line">	insert_strategy* ins = new insert_strategy();</div><div class="line">	for (vector&lt;int&gt;::iterator itr = randoms.begin(); itr != randoms.end(); itr++)</div><div class="line">	&#123;</div><div class="line">		root = ins-&gt;insert(root, element(*itr));</div><div class="line">	&#125;</div><div class="line">	/// 查找</div><div class="line">	search_strategy* search = new search_strategy(root);</div><div class="line">	element search_item(12);</div><div class="line">	bool search_result = search-&gt;search(search_item);</div><div class="line"></div><div class="line">	/// 删除</div><div class="line">	int val;</div><div class="line">	while (cout&lt;&lt;&quot;input delete item: &quot;&lt;&lt;endl,cin&gt;&gt;val,val!=-1) &#123;</div><div class="line">		element be_deleted(val);</div><div class="line">		delete_strategy* delete_s = new delete_strategy(root, be_deleted);</div><div class="line">		delete_s-&gt;execute();</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文章内容较长，到这里基本上算是把2-3树、2-3-4树、以及红黑树都捋了一遍。如果存在错误，麻烦帮忙指出（可以微博联系我）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章中，我主要是将数据结构中的2-3树、2-3-4树、红黑树进行了整理。由于本篇字数、图片以及代码较多，可选择自己比较在于的部分阅读，但我建议是从上往下依次阅读。&lt;/p&gt;
&lt;p&gt;毕竟大部分人可能比较关心红黑树。但是怎么是从2-3到红黑树的，这个过程是很值得了解的。而在
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="查找结构" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>语法分析——文法的基础概念</title>
    <link href="http://yoursite.com/2019/10/28/SyntaxParser_context_free_grammar/"/>
    <id>http://yoursite.com/2019/10/28/SyntaxParser_context_free_grammar/</id>
    <published>2019-10-28T06:29:13.863Z</published>
    <updated>2020-06-29T16:21:19.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在语法分析一章中会出现很多的专业术语，我会在这一节将语法分析涉及到的术语都大致捋一遍。这些专业术语是学习语法分析的必备技能，务必记住并理解，下面我们进入正题。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>语法分析通常用于编译器中。在我们的编译器模型中，语法分析器从词法分析器获得一个词法单元组成的串，并验证这个串可以由源语言的文法（比如上下文无关文法，在后面会详细解释）生成。</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/1.png" alt=""></p>
<p>处理文法的语法分析器大体上可以分分为三种类型：通用的、自顶向下的和自底向上的。而编译器中常用的的方法分为自顶向下和自底向上。顾名思义：</p>
<p>1）、自顶向下的方法从语法分析树的根节点开始向底部构造语法分析树；</p>
<p>2）、自底向上则从叶子结点开始，逐渐向根节点方向构造。</p>
<p>这两种分析方法中，语法分析器的输入总是按照从左向右的方式被扫描，每次扫描一个符号。</p>
<p>最高效的自顶向下方法和自底向上方法只能处理某些文法子类，但其中的子类，特别是 <strong>LL、LR</strong> 它们的表达能力已经足以描述现代程序设计语言大部分的语法构造了。</p>
<blockquote>
<p>手工实现的语法分析通常使用LL文法。处理较大的LR文法类的语法分析器通常是使用自动化工具构造得到。</p>
</blockquote>
<p>这里的第一个L表示从左向右扫描，第二个的L和R分别表示最左推导和最右推导。有关于推导的概念下面就会展开来说，在前面我们提到了文法，所以现在还是先看看上下文无关文法。</p>
<h2 id="一、上下文无关文法（Context-Free-Grammar）"><a href="#一、上下文无关文法（Context-Free-Grammar）" class="headerlink" title="一、上下文无关文法（Context-Free-Grammar）"></a>一、上下文无关文法（Context-Free-Grammar）</h2><p>文法自然地描述了大多数程序设计语言构造的层次化语法结构，比如if-else之类的。一个上下文无关文法由四个元素组成：</p>
<ul>
<li><strong>终结符号</strong>：也称为词法单元。词法单元由两个部分组成：名字和属性值。我们常常把这些词法单元名字称为终结符号。因此我们在语法分析中，通常将词法单元和终结符当做一个意思；</li>
<li><strong>非终结符号</strong>：也称为语法变量，每个非终结符号表示一个终结符号串的集合；</li>
<li><strong>产生式</strong>：包括产生式头、一个箭头，和一个产生式体；</li>
<li><strong>开始符号</strong>：指定一个非终结符号为开始符号；</li>
</ul>
<p>如下图的上下文无关文法：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/2.png" alt="上下文无关文法"></p>
<p>对此，我们需要一些约定来表示不同的符号，以便后续行文方便：</p>
<p><strong>终结符号</strong>：</p>
<p>Ⅰ）、小写字母，a、b、c等等；</p>
<p>Ⅱ）、运算符号，比如 + 。 - ， * ，/ 之类的；</p>
<p>Ⅲ）、标点符号，比如括号、逗号等等；</p>
<p>Ⅳ）、数字；</p>
<p>Ⅴ）、黑体字符串，比如 <strong>id</strong>，<strong>if</strong>。每个这样的字符串表示一个终结符号；</p>
<p><strong>非终结符</strong>：</p>
<p>Ⅰ）、大写字母，A、B、C等等；</p>
<p>Ⅱ）、小写，斜体的字符串。比如 <em>expr</em> ， <em>stamt</em> 等等；</p>
<p><strong>产生式体</strong>：</p>
<p>使用小写的希腊字母，比如α、β、γ表示文法符号串。比如 A -&gt; α，其中A为产生式头部，α为产生式体。</p>
<p><strong>可选体</strong>：</p>
<p>具有相同头部的产生式 A -&gt; α<sub>1</sub>，A -&gt; α<sub>2</sub>，… ,A -&gt; α<sub>k</sub>，可以简写为 A -&gt; α<sub>1</sub> | α<sub>2</sub> | … | α<sub>k</sub>。在这里我们把α<sub>1</sub>，α<sub>2</sub>，α<sub>k</sub>称作A的可选体。这个可选体概念不太重要，只需要记住相同产生式头部的简写形式即可。</p>
<p>因此，运用前面的约定，我们可以看出这里一共有三个产生式；其中E、T、F为非终结符；+、*、(、)、id为终结符；其中非终结符E为开始符号。</p>
<hr>
<h3 id="1、推导——最左推导、最右推导"><a href="#1、推导——最左推导、最右推导" class="headerlink" title="1、推导——最左推导、最右推导"></a>1、推导——最左推导、最右推导</h3><p>从开始符号出发，每个重写步骤把一个非终结符替换为它的某个产生式的体。比如下面关于非终结符E的文法：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/3.png" alt=""></p>
<p>产生式 <code>E --&gt; -E</code> 表明，讲一个E替换为 -E 的过程写作： </p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/4.png" alt=""> </p>
<p>读作 “E推导出-E” 。同样的我们可以按照任意顺序对单个E不断地应用各个产生式，得到一个替换序列，比如：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/5.png" alt=""></p>
<p><strong>句型</strong>：是指推导过程中出现的各种表达式，其中可以包含终结符号，也可以包含非终结符号，当然也有可能是空串；</p>
<p><strong>句子</strong>：是不包含非终结符的句型；</p>
<p>一个终结符号串存在于文法G的的语言L(G)中，当且仅当该符号串是文法G的一个句子。可以由文法生成的语言，称为上下文无关语言。</p>
<blockquote>
<p>如果两个文法生成相同语言，那么这两个文法是等价的。</p>
</blockquote>
<p>比如串 <code>-(id+id)</code> 是文法 </p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/3.png" alt=""> </p>
<p>的一个句子，这是因为存在推导过程：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/6.png" alt=""></p>
<p>串E、-E、… 、-(id+id) 都是这个文法的句型。在上诉的推导过程中，每一个推导步骤上都需要做两个选择，我们要选择替换掉哪个非终结符号。下面是另外一种推导：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/7.png" alt=""></p>
<p>这一个推导和上一个推导稍有不同，我们推导的第四步，选择替换掉的是右边的非终结符。基于此我们的推导有两种推导形式：</p>
<p><strong>最左推导</strong>：总是选择每个句型最左边的非终结符号进行替换。如果α =&gt; β 是一个推导步骤，且被替换的是α中的最左非终结符号。我们用 <code>α =&gt;lm β</code>  （这里lm应该是在推导符号=&gt;的下方，由于不太好书写，因此这里用放在符号右边的形式）；</p>
<p><strong>最右推导</strong>：总是选择每个句型最右边的非终结符号进行替换。此时我们写作 <code>α =&gt;rm β</code>（同上）；</p>
<p>使用最左推导得到的句型称为最左句型。最右推导也被称为 <strong>规范推导</strong>。</p>
<h3 id="2、语法分析树和推导"><a href="#2、语法分析树和推导" class="headerlink" title="2、语法分析树和推导"></a>2、语法分析树和推导</h3><p>语法分析树是推导的图形表示，它过滤掉了推导过程中对非终结符号应用产生式的顺序。语法分析树的每个内部结点表示一个产生式的应用。该内部结点的标号是产生式头中的非终结符号。</p>
<p>这里可以再对语法分析树和词法分析树进行一次对比。上一章词法分析中使用正则表达式构造DFA时提及抽象语法树中每个内部结点为正则表达式中的一个运算符，该内部结点子树的左右子节点分别表示该运算符的运算分量。</p>
<p>比如 <code>-(id+id)</code> 的语法分析树为：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/8.png" alt=""></p>
<p>该语法分析树对应的推导过程是上面提到的两个推导：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/6.png" alt=""></p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/7.png" alt=""></p>
<p>一颗语法分析树的叶子结点既可以是非终结符号，也可以是终结符号。从左到右排列这些符号就可以得到一个句型，它成为这颗树的 <strong>结果</strong>。在这里我们从左到右读取每一个叶子结点并排列起来，得到的结果是：<code>- ( id + id )</code> 。</p>
<p><strong>二义性文法</strong> ，如果一个文法可以为某个句子生成多颗语法分析树，那么它就是二义性的。换句话说，二义性文法就是对同一个句子有多个最左推导或者最右推导的文法。</p>
<p>到这儿，我们可以先看一个例子。</p>
<h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p>对于文法 <script type="math/tex">S \rightarrow\ a\ S\ b\ S\ |\ b\ S\ a\ S\ |\ ε</script>，有一串<code>aabbab</code>。尝试写出最左推导和最右推导出该的语法分析树。</p>
<p>最左推导语法分析树：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/10.png" alt=""></p>
<p>最右推导语法分析树：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/11.png" alt=""></p>
<p>从语法分析的结构，我们不难看出来该文法是二义性文法。</p>
<h3 id="3、上下文无关文法和正则表达式"><a href="#3、上下文无关文法和正则表达式" class="headerlink" title="3、上下文无关文法和正则表达式"></a>3、上下文无关文法和正则表达式</h3><p>文法是比正则表达式表达能力更强的表示方法。即每个可以使用正则表达式描述的构造都可以使用文法来描述，但反之则不成立。我们可以根据正则表达式构造出对应的文法，下面则是从正则表达式构造对应文法的大致步骤。如下：</p>
<p>1）、对于NFA的每个状态i，创建一个非终结符A<sub>i</sub>；</p>
<p>2）、如果状态i有一个在输入a上到达状态j的转换，则加入产生式 <script type="math/tex">A_{i} \rightarrow a A_{j}</script> 如果状态i在输入 ε 上到达状态j，则加入产生式 <script type="math/tex">A_{i} \rightarrow A_{j}</script>；</p>
<p>3）、如果i是一个接受状态，则加入产生式 <script type="math/tex">A_{i} \rightarrow ε</script>；</p>
<p>4）、如果i是自动机的开始状态，令 A<sub>i</sub>为所得文法的开始符号；</p>
<p>比如正则表达式 <strong>$(a|b)^{*}abb$</strong> ，它对应的DFA为：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/9.png" alt=""></p>
<p>从上面步骤我们可以得到一共有4个状态，因此对于对应文法则有4个非终结符，分别为 <script type="math/tex">A_{0},A_{1},A_{2},A_{3}</script> 。根据上图的转换我们得到文法为：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/12.png" alt=""></p>
<hr>
<h2 id="二、设计文法"><a href="#二、设计文法" class="headerlink" title="二、设计文法"></a>二、设计文法</h2><p>如果前面看到的，任何能够使用正则表达式描述的东西都可以使用文法来描述。因此在这儿来列举4点关于正则表达式和文法的异同：</p>
<p>1）、将一个语言的语法结构分为词法和非词法两部分可以很方便地将编译器前端模块化，将前端分解为大小合适的组件；</p>
<p>2）、一个语言的词法规则通常很简单，我们不需要使用像文法这样功能强大的表示方法来描述这些规则；</p>
<p>3）、和文法相比，正则表达式通常更加简洁，并且更容易理解；</p>
<p>4）、根据正则表达式自动构造得到的词法分析器效率要高于文法得到的分析器；</p>
<p>根据上诉4点来说明，既然正则表达式都可以使用文法来描述，而在词法分析中我们依然选择了正则表达式来描述词法单元；</p>
<blockquote>
<p><strong>正则表达式更适合描述标识符、常量、关键字、空白这样的语言构造的结构；文法更适合描述嵌套结构，比如if-else之类的</strong>；</p>
</blockquote>
<h3 id="1、左递归"><a href="#1、左递归" class="headerlink" title="1、左递归"></a>1、左递归</h3><p>左递归是指 <strong>产生式体的最左边符号和产生式头部的非终结符号相同</strong> 。对于产生式 </p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/16.png" alt="上下文无关文法"></p>
<p>产生式的头部是E，同时E也是产生式体的最左边的非终结符号，因此该推导将会被将被递归调用。</p>
<p>同样的，右递归也就是指的产生式头部的非终结符号和产生式体最右边的终结符相同的情况。</p>
<p>该文法无法用于自顶向下的语法分析中，这是因为自顶向下的语法分析是基于LL文法的。而对于LL文法来说，第一个L指的是从左到右扫描语法分析树的一层的每个结点，遇到非终结符则应用对应非终结符的产生式。第二个L指的是最左推导。前面我们已经知道了最左推导，即每一次替换掉产生式最左边的非终结符，因此这也就和左递归的定义吻合了。关于更详细的自顶向下的语法分析将在后面进行详细讲解。</p>
<p>既然存在左递归，那么消除左递归肯定是有必要的。</p>
<h4 id="消除立即左递归："><a href="#消除立即左递归：" class="headerlink" title="消除立即左递归："></a><strong>消除立即左递归</strong>：</h4><p>比如存在立即左递归的产生式：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/14.png" alt="上下文无关文法"></p>
<p>其中 $\beta _{i}$ 都不以A开头。因此我们可以用下面的技术来消除立即左递归：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/15.png" alt="上下文无关文法"></p>
<p>需要特别注意的是：<strong>第二个产生式到空串的产生式</strong> 。非终结符号A生成的串和替换之前生成的串一样，但不再是左递归的。这个过程消除了所有$A$和$A_{1}$产生式相关联的左递归。</p>
<p>比如我们对文法</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/2.png" alt="上下文无关文法"></p>
<p>应用消除立即左递归的技术上面文法的左递归，得到的结果为：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/13.png" alt="上下文无关文法"></p>
<h4 id="消除一般左递归"><a href="#消除一般左递归" class="headerlink" title="消除一般左递归"></a><strong>消除一般左递归</strong></h4><p>但并不是所有的文法都是立即左递归的，有可能是经过多次推导之后才发现递归的情形。比如下面的文法就不是立即左递归：</p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/17.png" alt="上下文无关文法"></p>
<p>对于推导 </p>
<p><img src="/uploads/SyntaxParser_context_free_grammar/18.png" alt="上下文无关文法"></p>
<p>可以看出非终结符号S是左递归的，但它并不是立即左递归。那么对于这种情况的左递归如何消除呢？</p>
<ul>
<li><p>1）、首先将文法的所有非终结符，从开始符号按出现顺序，依次对它们进行编号为A<sub>1</sub>, A<sub>2</sub>, A<sub>3</sub>, …,A<sub>n</sub>；</p>
</li>
<li><p>2）、从A<sub>1</sub>开始依次读取每一个非终结符到A<sub>n</sub>，我们称作A<sub>i</sub>；</p>
<p>同时又从A<sub>1</sub>开始读取非终结符号到A<sub>i-1</sub>，我们称作A<sub>j</sub> 。如果存在形如<script type="math/tex">A_{i} \rightarrow A_{j}\gamma</script> 那我们就将其替换为产生式组：</p>
<script type="math/tex; mode=display">
A_{i} \rightarrow \sigma _{1} \gamma\ |\ \sigma _{2} \gamma\ |\ ...\ |\ \sigma _{k} \gamma \\
A_{j} \rightarrow \sigma _{1} \ |\ \sigma _{2} \ |\ ...\ |\ \sigma _{k} \\</script><p>这样我们就可以尽最大的可能构造立即左递归了。</p>
</li>
<li><p>3）、如果此时存在立即左递归，则使用上面提到的消除立即左递归的方式来消除；</p>
</li>
</ul>
<p>下面我用C++写了一个简单地消除左递归的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">struct GrammerProduction &#123;</div><div class="line">	string header;</div><div class="line">    vector&lt;string&gt; bodies   ;</div><div class="line">    GrammerProduction() &#123;&#125;</div><div class="line">    //GrammerProduction(const GrammerProduction&amp; lhs) &#123;&#125;</div><div class="line">    //GrammerProduction&amp; operator=(const GrammerProduction&amp; lhs) &#123;&#125;</div><div class="line">    GrammerProduction(string hdr)&#123;</div><div class="line">        header = hdr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bool isEmpty() &#123;</div><div class="line">        return bodies.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void add_body(string bdy) &#123;</div><div class="line">        bodies.push_back(bdy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private:</div><div class="line">    string recursive_nonterminal; /// 发生立即左递归时，需要引入的非终结符</div><div class="line">    public:</div><div class="line">    void set_recursive_nonterminal(string nt) &#123;</div><div class="line">        recursive_nonterminal = nt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void replace_body(GrammerProduction* prd) &#123;</div><div class="line">        if (prd==nullptr) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        vector&lt;string&gt; new_bodies;</div><div class="line">        for (vector&lt;string&gt;::iterator itr_body = bodies.begin(); itr_body != bodies.end(); itr_body++) &#123; /// 遍历当前所有的产生式</div><div class="line">            if (itr_body-&gt;empty()) &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            string char_body(1,(*itr_body)[0]);</div><div class="line">            string prd_header = prd-&gt;header;</div><div class="line">            if (char_body != prd_header) &#123; </div><div class="line">                new_bodies.push_back(*itr_body);</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            /// 如果当前产生式最左边是非终结符，并且该非终结符和Aj相等。即Ai -&gt; Aj γ</div><div class="line">            for (vector&lt;string&gt;::iterator pitr_body = prd-&gt;bodies.begin(); pitr_body != prd-&gt;bodies.end(); ++pitr_body) &#123;</div><div class="line">                string tmp_body = *itr_body;</div><div class="line">                tmp_body = tmp_body.replace(0,1,*pitr_body);</div><div class="line">                new_bodies.push_back(tmp_body);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        bodies = new_bodies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    GrammerProduction* remove_immediately_left_recursive() &#123;</div><div class="line">        vector&lt;string&gt; new_bodies;</div><div class="line">        GrammerProduction* new_production = new GrammerProduction(recursive_nonterminal);</div><div class="line">        if (!new_production) &#123;</div><div class="line">            return nullptr;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (vector&lt;string&gt;::iterator itr_body = bodies.begin(); itr_body != bodies.end(); ++itr_body) &#123; /// 遍历当前所有的产生式</div><div class="line">            string tmp_body = *itr_body;</div><div class="line">            string first_char_body(1,(*itr_body)[0]);</div><div class="line">            if (first_char_body == header) &#123; /// 立即左递归</div><div class="line">                tmp_body = tmp_body.erase(0,1);</div><div class="line">                tmp_body = tmp_body+recursive_nonterminal;</div><div class="line">                new_production-&gt;add_body(tmp_body);</div><div class="line">            &#125;else&#123;</div><div class="line">                tmp_body = tmp_body+recursive_nonterminal;</div><div class="line">                new_bodies.push_back(tmp_body);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (new_production-&gt;isEmpty()) &#123;</div><div class="line">            return nullptr;</div><div class="line">        &#125;</div><div class="line">        new_production-&gt;add_body(&quot;#&quot;);</div><div class="line">        bodies = new_bodies;</div><div class="line">        return new_production;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct Grammer &#123;</div><div class="line">    vector&lt;GrammerProduction*&gt; productions;</div><div class="line">    Grammer() = default;</div><div class="line">    void printProductions()&#123;</div><div class="line">        cout&lt;&lt;&quot;-------------------------------------&quot;&lt;&lt;endl;</div><div class="line">        for (vector&lt;GrammerProduction*&gt;::iterator itr = productions.begin(); itr != productions.end(); ++itr) &#123; /// 外层循环从第一个开始符号开始 姑且叫作Ai</div><div class="line">            GrammerProduction* p = *itr; /// 获取Ai所有的产生式体</div><div class="line">            cout&lt;&lt;p-&gt;header&lt;&lt;endl;</div><div class="line">            for (vector&lt;string&gt;::iterator body_itr = p-&gt;bodies.begin(); body_itr != p-&gt;bodies.end(); ++body_itr) &#123;</div><div class="line">                cout&lt;&lt;&quot;          &quot;&lt;&lt;*body_itr&lt;&lt;endl;</div><div class="line">            &#125;</div><div class="line">            cout&lt;&lt;&quot;-------------------------------------&quot;&lt;&lt;endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    void add_prodction(GrammerProduction* pro) &#123;</div><div class="line">        if (pro==nullptr) return;</div><div class="line">        this-&gt;productions.push_back(pro);</div><div class="line">    &#125;</div><div class="line">    void remove_left_recursive() &#123;</div><div class="line">        vector&lt;GrammerProduction*&gt; new_productions;</div><div class="line">        for (vector&lt;GrammerProduction*&gt;::iterator itr = productions.begin(); itr != productions.end(); ++itr) &#123; /// 外层循环从第一个开始符号开始 姑且叫作Ai</div><div class="line">            GrammerProduction* p = *itr; /// 获取Ai所有的产生式体</div><div class="line">            for (vector&lt;GrammerProduction*&gt;::iterator itr_j = productions.begin(); itr_j != itr; ++itr_j) &#123; /// 内层循环获取当前非终结符之前的其他非终结符，姑且叫作Aj    </div><div class="line">                GrammerProduction* jp = *itr_j; /// 获取Aj所有的产生式体</div><div class="line">                p-&gt;replace_body(jp);</div><div class="line">            &#125;</div><div class="line">            GrammerProduction *ptr = p-&gt;remove_immediately_left_recursive(); /// 消除可能存在的立即左递归</div><div class="line">            if (ptr==nullptr) continue;</div><div class="line">            new_productions.push_back(ptr);</div><div class="line">        &#125;</div><div class="line">        if (new_productions.size() &lt;= 0) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        productions.insert(productions.end(),new_productions.begin(),new_productions.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>比如我们有带左递归的产生式集合：</p>
<script type="math/tex; mode=display">
S \rightarrow Aa\ |\ b\\
A \rightarrow Ac\ |\ Sd\ |\ ϵ</script><p>现在我们可以使用上诉的C++代码来帮我们消除左递归：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">int main() &#123;</div><div class="line">    GrammerProduction *s_productions = new GrammerProduction(&quot;S&quot;); /// S -&gt; Aa | b</div><div class="line">    s_productions-&gt;set_recursive_nonterminal(&quot;T&quot;);</div><div class="line">    s_productions-&gt;add_body(&quot;Aa&quot;);</div><div class="line">    s_productions-&gt;add_body(&quot;b&quot;);</div><div class="line"></div><div class="line">    GrammerProduction *a_productions = new GrammerProduction(&quot;A&quot;); /// A -&gt; Ac | Sd | ε</div><div class="line">    a_productions-&gt;set_recursive_nonterminal(&quot;B&quot;);</div><div class="line">    a_productions-&gt;add_body(&quot;Ac&quot;);</div><div class="line">    a_productions-&gt;add_body(&quot;Sd&quot;);</div><div class="line">    a_productions-&gt;add_body(&quot;#&quot;);</div><div class="line"></div><div class="line">    Grammer grammer;</div><div class="line">    grammer.add_prodction(s_productions);</div><div class="line">    grammer.add_prodction(a_productions);</div><div class="line">    cout&lt;&lt;&quot;带有左递归的产生式：&quot;&lt;&lt;endl;</div><div class="line">    grammer.printProductions();</div><div class="line">    grammer.remove_left_recursive();</div><div class="line">    cout&lt;&lt;&quot;消除左递归之后的产生式：&quot;&lt;&lt;endl;</div><div class="line">    grammer.printProductions();</div><div class="line"></div><div class="line">    cout&lt;&lt;&quot;Done&quot;&lt;&lt;endl;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">带有左递归的产生式：</div><div class="line">-------------------------------------</div><div class="line">S</div><div class="line">          Aa</div><div class="line">          b</div><div class="line">-------------------------------------</div><div class="line">A</div><div class="line">          Ac</div><div class="line">          Sd</div><div class="line">          #</div><div class="line">-------------------------------------</div><div class="line">消除左递归之后的产生式：</div><div class="line">-------------------------------------</div><div class="line">S</div><div class="line">          Aa</div><div class="line">          b</div><div class="line">-------------------------------------</div><div class="line">A</div><div class="line">          bdB</div><div class="line">          #B</div><div class="line">-------------------------------------</div><div class="line">B</div><div class="line">          cB</div><div class="line">          adB</div><div class="line">          #</div><div class="line">-------------------------------------</div><div class="line">Done</div></pre></td></tr></table></figure>
<p>解释一下，这里的非终结符号B是A的产生式出现左递归之后，引入的非终结符。</p>
<hr>
<h3 id="2、提取左公因子"><a href="#2、提取左公因子" class="headerlink" title="2、提取左公因子"></a>2、提取左公因子</h3><p>提取左公因子可以适用于预测分析技术或自顶向下分析技术的文法。当我们不清楚应该在两个产生中如何选择的时候，我们可以通过改写产生式来推后这个决定，当我们有足够的信息时再做出正确地决定。</p>
<p>比如有产生式 <script type="math/tex">A \rightarrow \alpha \beta_{1}\ |\ \alpha \beta_{2}</script>，是A的两个产生式，并且产生式体开头都是从 α 推导得到的一个非空串。那么这时候我们就不清楚是产生式 <script type="math/tex">A \rightarrow \alpha \beta_{1}</script> 还是以产生式 <script type="math/tex">A \rightarrow \alpha \beta_{2}</script> 进行展开。</p>
<p>然后我们可以将A展开为 <script type="math/tex">\alpha A^{'}</script>，从而延迟要做出决定的时刻，原来的产生式就变为了：</p>
<script type="math/tex; mode=display">
A \rightarrow \alpha A^{'}\\
A^{'} \rightarrow \beta_{1}\ |\ \beta_{2}</script><p>总结一下上面提到的内容：对于每个非终结符号A，找出他的两个或多个选项之间的最长公共前缀 α。如果 α 不为空，即存在一个非平凡的公共前缀，那么将所有A的产生式</p>
<script type="math/tex; mode=display">A \rightarrow \alpha\beta_{1}\ |\ \alpha\beta_{2}\ |\ ...\ |\ \alpha\beta_{n}\ |\ \gamma</script><p>替换为</p>
<script type="math/tex; mode=display">
A \rightarrow \alpha A^{'}\ |\ \gamma\\
A^{'} \rightarrow \beta_{1}\ |\ \beta_{2}\ |\ ...\ |\ \beta_{n}</script><p>其中 γ 表示所有不以 α 开头的产生式； <script type="math/tex">A^{'}</script> 是一个新的非终结符号。不断地应用这个转换，直到每个非终结符号的任意两个产生式体都没有公共前缀为止。</p>
<hr>
<h3 id="3、非上下文无关语言的构造"><a href="#3、非上下文无关语言的构造" class="headerlink" title="3、非上下文无关语言的构造"></a>3、非上下文无关语言的构造</h3><p>在常见的程序设计语言中，存在少量无法文法描述的语法构造。在C或者Java的文法不区分由不同字符串组成的标识符。所有的标识符在文法中都被表示为像 <strong>id</strong> 这样的词法单元。在这些语言的编译器中，<strong>标识符是否先声明后使用是在语义分析阶段检查的</strong> 。</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>在本篇文章中，介绍了一大堆的概念。比如上下文无关文法里面的产生式、终结符、非终结符，还有开始符号等等；然后我们接触到了推导的概念，推导又分为最左推导和最右推导。我们根据这两种推导，我们可以构造出对应语法分析树；语法分析树的所有叶子结点从左到右拼起来之后，得到的就是对应产生式文法的句子。而中间过程中出现的则成为句型；</p>
<p>而且，我们也了解到如何通过正则表达式来构造对应的上下文无关文法。大致的过程是根据正则表达式，我们可以根据词法分析一章的知识来构造一个NFA（根据连接、并、闭包运算对应的状态转换图）。我们根据NFA的状态数对应非终结符号，具体转换规则都已经详细列在了上面；</p>
<p>在构造文法的过程中，我们遇到左递归的情况。因此我们需要知道如何去消除立即左递归，和左递归。详细的消除方法在上面用C++语法已列出；最后我们还了解了提取左公因子的方法，当我们不清楚应该如何选择产生式，推迟这个时机，待我们有足够信息做出正确选择之前。</p>
<p>下一篇文章，我们将会去看看自顶向下的语法分析技术。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在语法分析一章中会出现很多的专业术语，我会在这一节将语法分析涉及到的术语都大致捋一遍。这些专业术语是学习语法分析的必备技能，务必记住并理解，
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="语法分析" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>词法分析——正则表达式直接转换为DFA</title>
    <link href="http://yoursite.com/2019/10/28/compiler_regular2dfa/"/>
    <id>http://yoursite.com/2019/10/28/compiler_regular2dfa/</id>
    <published>2019-10-28T05:41:34.677Z</published>
    <updated>2019-10-28T06:06:41.856Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇文章中，我们至少学会了将正则表达式构造成对应的NFA和DFA。但是用上篇文章中从正则表达式转换为对应DFA的方式效率低下，即我们要先将正则表达式转换为NFA，然后使用子集构造法将NFA转换为对应DFA。</p>
<p>在本篇文章中，我们将首先学习如何将正则表达式直接转换为DFA，并最小化DFA的状态数目。然后看看DFA模拟中时间和空间的权衡问题。</p>
<p>在正式进入正则表达式转换为DFA之前我们需要一些基本概念，没有这些基本概念可能不太好理解后面提到的内容。</p>
<h2 id="一、需要的基本概念"><a href="#一、需要的基本概念" class="headerlink" title="一、需要的基本概念"></a>一、需要的基本概念</h2><h4 id="重要状态"><a href="#重要状态" class="headerlink" title="重要状态"></a>重要状态</h4><p>NFA的重要状态直接对应于正则表达式中存放字母表中符号的位置，而 <strong>重要状态是指NFA的某一状态有一个标号为非空的离开转换</strong> 。比如我们在上一节中将正则表达式转换为对应NFA时引入了新状态，它们的离开转换都是空转换，因此它们并不是重要状态。</p>
<blockquote>
<p><strong>每个重要状态对应于正则表达式中某个运算分量</strong> 。</p>
</blockquote>
<p>因此我们在比较两个NFA状态集合时，判断它们是否一致的依据如下：<br>1）、具有相同的重要状态；<br>2）、要么都包含接受状态，要么都不包含接受状态；</p>
<h4 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title="抽象语法树"></a>抽象语法树</h4><p>注意这里的抽象语法树和上一节提到的语法分析树有一点不同，关于语法分析树可以回去看上一篇提到的语法分析树定义。但抽象语法树是必须要完全理解的。</p>
<blockquote>
<p><strong>抽象语法树中，每个内部结点代表一个运算符，该运算符结点的子结点代表这个运算符的运算分量</strong> !!!</p>
</blockquote>
<p>在抽象语法树中，内部结点代表的是程序的构造；而在语法分析树中，内部结点代表的是非终结符。有时候我们将语法分析树称为具体语法树；而抽象语法树简称为语法树。这是因为在文法的很多非终结符都代表程序的具体构造，还有各种辅助符号。而这些在抽象语法树中都是不需要的。</p>
<p>而前面提到的重要状态就是抽象语法树中运算符的运算分量。下面是正则表达式 <code>(a|b)*abb</code>对应的抽象语法树：</p>
<p><img src="/uploads/compiler_regular2nfa/1.png" alt="(a|b)*abb的抽象语法树"></p>
<p>1）、<strong>结束标记符#</strong>：前面我们提到了重要状态，但（NFA或者DFA）接受状态没有一个标号为非空的离开转换，因此接受状态为非重要状态。基于此，我们可以给正则表达式的右边连接一个结束标记符 <code>#</code> ，使得正则表达式的接受状态成为重要状态。那么我们也就不用特殊处理接受状态了。</p>
<p>2）、<strong>叶子节点位置</strong>：上面抽象语法树叶子结点下方都有一个有序的整数，我们称这个整数为对应叶子的结点的位置。<strong>非空的叶子结点才会赋予相应的整数</strong>，也就是说为空串的叶子结点我们不需要对其增加位置。</p>
<h2 id="二、nullable、firstpos、lastpos和followpos函数"><a href="#二、nullable、firstpos、lastpos和followpos函数" class="headerlink" title="二、nullable、firstpos、lastpos和followpos函数"></a>二、nullable、firstpos、lastpos和followpos函数</h2><p>我们要从一个正则表达式直接构造出DFA，除了前面我们已经构造了的抽象语法树之外，我们还需要计算nullable、firstpos、lastpos和followpos函数。</p>
<ul>
<li>1）、<strong><code>bool nullable(n)</code></strong>：其中n的取值为抽象语法树中任意结点（可以是叶子结点，也可以是是内部结点。即运算符和运算分量），其返回值的逻辑是当此结点的子表达式中包含有空串ε时返回true，否则为false；</li>
<li>2）、<strong><code>nodes firstpos(n)</code></strong>：子表达式的语言中某个串的第一个符号，该语言是以n为根的子表达式；</li>
<li>3）、<strong><code>nodes lastpos(n)</code></strong>：子表达式的语言中某个串的最后一个符号，同样的该语言也是以n为根的子表达式；</li>
<li>4）、<strong><code>nodes followpos(n)</code></strong>：这相对要复杂一点。比如在抽象语法树中存在两个结点分别为n和m，存在某个串s = a<sub>1</sub>…a<sub>i</sub>a<sub>i+1</sub>…a<sub>p</sub>，即以该正则表达式为模式的串。要满足followpos(n)==m，那么则需要a<sub>i</sub>和位置n匹配，a<sub>I+1</sub>和位置m匹配。比如当前有一个符号串<code>aabb</code>，想要构造该串对应于上图抽象语法树中各个节点顺序为1、3、4、5，因此我们就说follow(3)=4。通俗一点说就是要看抽象语法树指定结点的followpos，需要先找到对应结点在某个符号串中的位置，然后看该符号后一位符号即可。</li>
</ul>
<p>上面的nodes表示的结点集合。前面说的结点均指的是抽象语法树中的重要位置。</p>
<p>更详细点，当我们计算上面抽象语法树位置1的followpos，即followpos(1)。那么我们通过抽象语法树来看，位置1之后经过并运算和闭包运算可以得到的子串有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">aa;/// 第一个a来自于位置1，第二个a来自于位置1。闭包运算循环了两次；</div><div class="line">ab;/// a来自于位置1，b来自于位置2。闭包运算循环了2次；</div><div class="line">aa;///第一个a来自于位置1，第二个a来自于位置3。闭包运算循环了1次；</div></pre></td></tr></table></figure>
<p>因此得到 followpos(1) = {1,2,3};</p>
<p>下表整理了计算nullable、firstpos、lastpos的计算规则：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">结点n</th>
<th style="text-align:left">nullabl(n)</th>
<th style="text-align:left">firstpos(n)</th>
<th style="text-align:left">lastpos(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">标号为ε的叶子结点</td>
<td style="text-align:left">true</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">∅</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">位置为i的叶子结点</td>
<td style="text-align:left">false</td>
<td style="text-align:left">{i}</td>
<td style="text-align:left">{i}</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><strong>并</strong> 结点n=c1,c2</td>
<td style="text-align:left">nullable(c1) 逻辑或 nullable(c2)</td>
<td style="text-align:left">firstpos(c1) ∪ firstpos(c2)</td>
<td style="text-align:left">lastpos(c1) ∪ lastpos(c2)</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><strong>连接</strong> 结点n=c1c2</td>
<td style="text-align:left">nullable(c1) 逻辑与 nullable(c2)</td>
<td style="text-align:left">如果 <strong>nullable(c1)</strong> 为真，那么值为firstpos(c1) ∪ firstpos(c2)。否则为firstpos(c1)</td>
<td style="text-align:left">如果 <strong>nullable(c2)</strong> 为真，那么值为lastpos(c1) ∪ lastpos(c2)。否则为lastpos(c2)</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><strong>闭包</strong> 结点n=c1*</td>
<td style="text-align:left">true</td>
<td style="text-align:left">firstpos(c1)</td>
<td style="text-align:left">lastpos(c1)</td>
</tr>
</tbody>
</table>
</div>
<p>由于md格式问题，上表第3行的逗号“,”替换为正则表达式中的”|”符号。</p>
<ul>
<li>1、每个叶子结点的firstpos和lastpos只包含它自身。上表中第2点；</li>
<li>2、“并” 结点的firstpos和lastpos分别是它所有子节点的firstpos和lastpos的并集。上表第3点；</li>
<li>3、“闭包”结点的firstpos和lastpos分别是它唯一子节点的firstpos和lastpos。上表的第5点；</li>
<li>4、对于“连接”结点而言，firstpos主要是看左子结点是否为空。而lastpos右子节点是否为空。</li>
</ul>
<p>现在我们运用上面的规则，将第一节的抽象语法树中每个结点的firstpos和lastpos求出来。如下图：</p>
<p><img src="/uploads/compiler_regular2nfa/2.png" alt=""></p>
<p>图中蓝色表示firstpos集合，而橙色表示lastpos集合。</p>
<h4 id="计算followpos"><a href="#计算followpos" class="headerlink" title="计算followpos"></a>计算followpos</h4><p>只有两种情况会使得正则表达式的某个位置跟在另一个位置之后：</p>
<ul>
<li><p>1）、如果是结点n是一个“连接”结点，且在抽象语法树中其左右子节点分别为c1，c2。那么对于lastpos(c1)中的每个位置i，firstpos(c2)中所有位置都在followpos(i)中；<br>通俗的讲就是以“连接”结点为根的子树，左子结点lastpos集合中每个位置的followpos都包含右子结点的firstpos。有点类似于二叉树后序遍历，左子树最大结点的后面跟着的是右子树的最小结点。</p>
</li>
<li><p>2）、如果n是“闭包”结点，lastpos(n)中每个位置的followpos都包含于的firstpos(n)中；</p>
</li>
</ul>
<p>基于上诉两个规则，我们对上面的图求解各个重要结点的followpos（上图已经标出每个结点的firstpos和lastpos）。下面是详细步骤：</p>
<ul>
<li>1、首先我们运用规则1来查看第一个“连接”结点，其左子结点的lastpos为<code>{1,2}</code>，并且其右子结点的firstpos为<code>{3}</code>。因此位置1结点和位置2结点的followpos都包含有位置3。</li>
</ul>
<p><img src="/uploads/compiler_regular2nfa/3.png" alt=""></p>
<p>需要注意一点的是并不是看的当前结点本身的lastpos和firstpos，而是看的其左子结点的lastpos和右子结点的firstpos。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">位置n</th>
<th style="text-align:left">followpos(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">{3}</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">{3}</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>2、同理我们将剩下的“连接”结点运用规则1，得到如下结果（这里太简单了我就不画图了）：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">位置n</th>
<th style="text-align:left">followpos(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">{4}</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">{5}</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{6}</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>3、现在是时候运用上面的规则2了，查找抽象语法树中的“闭包”结点。它和“连接”结点不同的是：“连接”结点看的是其左右子树的lastpos和firstpos，而“闭包”结点看的是其本身的lastpos和firstpos。</li>
</ul>
<p><img src="/uploads/compiler_regular2nfa/4.png" alt=""></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">位置n</th>
<th style="text-align:left">followpos(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">{1,2}</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">{1,2}</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>4、现在我们将前面三步得到的数据进行合并之后的结果为：</li>
</ul>
<p>很明显位置6作为增广正则表达式中存在的终结符标识，因此其followpos为空集。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">位置n</th>
<th style="text-align:left">followpos(n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">{1,2,3}</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">{1,2,3}</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">{4}</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">{5}</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{6}</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">∅</td>
</tr>
</tbody>
</table>
</div>
<p>回过头来看一下正则表表达式 <code>(a|b)*abb</code>匹配子串中，位置1对应的结点a其后可能存在字符为a（位置1）、b（位置2）、a（位置3）。位置2和位置1同理。</p>
<p>现在我们将每个位置，已经对应的followpos用一个有向图来表示如下：</p>
<p><img src="/uploads/compiler_regular2nfa/5.png" alt=""></p>
<p>很明显的可以看出来，表示followpos函数的有向图几乎就是相应的正则表达式不包含空转换的NFA。</p>
<h2 id="三、根据正则表达式构建DFA"><a href="#三、根据正则表达式构建DFA" class="headerlink" title="三、根据正则表达式构建DFA"></a>三、根据正则表达式构建DFA</h2><p>要从一个正则表达式构造一个DFA的大致步骤如下：</p>
<ul>
<li>1、根据扩展的正则表达式构造出一个抽象语法树；</li>
<li>2、计算每个节点的nullable函数值、firstpos函数值、lastpos函数值。以及重要位置节点的followpos函数值；</li>
<li>3、抽象语法树根节点的 <strong>firstpos</strong> 作为DFA的开始状态；</li>
<li>4、查看正则表达式中存在的各个转换（即a或者b），将当前状态中相同转换的followpos合并到一个集合中；</li>
<li>5、如果合并的集合出现新的状态，则将该状态添加到DFA的状态集合中；</li>
<li>6、如果经过各个转换之后没有新状态就停止。否则重复执行4~6步；</li>
</ul>
<p>看一下例子能够更加清晰地认识到如何根据正则表达式构建DFA。</p>
<p><img src="/uploads/compiler_regular2nfa/2.png" alt=""></p>
<p>图中蓝色表示firstpos集合，而橙色表示lastpos集合。</p>
<p>1）、对于正则表达式 <code>(a|b)*abb</code>，我们构造得到的抽象语法树，已经对应的firstpos/lastpos都在上图中;</p>
<p>2）、我们将根节点的firstpos = {1,2,3} 作为DFA的开始状态：</p>
<p>3）、该正则表达式中存在的转换有<code>a, b</code>，开始状态集合为{1,2,3}，此时我们将状态集合{1,2,3}相同状态的followpos合并到一个集合中。<br>集合{1,2,3}中对应转换a的位置有1，3；对应转换b的位置有{2}。<br>转换a的 <code>followpos(1)={1,2,3}, followpos(3)={4}</code>，将两个集合合并起来为 <code>{1,2,3,4}</code>，由于该状态是新状态，因此将状态集合{1,2,3,4}添加到DFA中；<br>转换b的<code>followpos(2)={1,2,3}</code>，由于该状态并不是新状态。因此只是一个简单转换即可。</p>
<p>重复执行第三步，得到的最终结果为：</p>
<p><img src="/uploads/compiler_regular2nfa/6.png" alt="基于抽象语法树得到的DFA"></p>
<h2 id="四、最小化DFA的状态数"><a href="#四、最小化DFA的状态数" class="headerlink" title="四、最小化DFA的状态数"></a>四、最小化DFA的状态数</h2><p>对于同一个语言，可以存在多个识别此语言的DFA。例如上图和上一节中由NFA通过子集构造法得到的DFA都能够识别正则表达式 <code>(a|b)*abb</code>。可以看出来它们的个数也不一样。因此如果让我们使用DFA来实现词法分析器，我们肯定是希望使用状态数量尽量少的DFA了。</p>
<p>首先我们先看看区分状态的概念： <strong>区分状态</strong>，如果从状态s和t出发，沿着标号为x的路径到达的两个状态中只有一个是接受状态，那么我们就说串x区分状态s和t。状态s和t是可区分的。<br>空串ε可以区分任何一个接受状态和非接受状态。</p>
<p><img src="/uploads/compiler_regular2nfa/7.png" alt="子集构造法得到的DFA"></p>
<p>上图中串 <code>bb</code> 可以区分状态A和B，这是因为从A出发经过标号为bb的路径到达会接受状态C，而状态B经过标号bb的路径到达状态E接受状态。</p>
<p>其次还有一个重要的结论：<strong>任何正则语言都有一个唯一的状态数目最少的DFA</strong>。而且从任意一个接受相同语言的DFA出发，通过 分组、合并等价的状态，我们总是可以构建得到这个状态数量最少的DFA。</p>
<p>因此DFA状态最小化算法的工作原理是：</p>
<blockquote>
<p><strong>将一个DFA的状态集合划分成多个组，每个组中的各个状态之间相互不可区分，但是来自不同组任意的两个状态是可区分的</strong>（前面提到的区分概念）。</p>
</blockquote>
<p>然后将每个组中的状态合并成状态最少DFA的一个状态。</p>
<p>最初，划分两个组：<strong>接受状态组和非接受状态组</strong>。基本步骤是从当前划分中取一个状态组，比如 A = {s<sub>1</sub>, s<sub>2</sub>, … , s<sub>k</sub>}，并选定某个输入符号a，检查a是否可以用于区分A组中的某些状态。查看s<sub>1</sub>, s<sub>2</sub>, … , s<sub>k</sub>在a上的转换，如果这些转换的到达的状态落入当前划分的两个或多个组中，我们就将A分割成多个组。</p>
<p>我们以上图为例来看看DFA状态最小化算法：<br>1）、首先划分两组：接受状态组合非接受状态组，这里我们分别给他们起名为组1和组2。</p>
<p><img src="/uploads/compiler_regular2nfa/8.png" alt=""></p>
<p>2）、在上图看到DFA仅有a、b两种转换。由于组2只包含了一个状态，并且该状态为接受状态而不能再被分割，所以组2原封不动。因此我们继续看组1。<br>组1中的状态A、B、C、D针对a的转换，得到的状态均为状态B，因此串a无法区分状态A、B、C、D。</p>
<p>3）、组1中的状态A、B、C、D针对b的转换，状态A、B、C都是到达组内某个成员上，这显然是无法区分的（前面提到过组内各个状态之间互不可区分）。但状态D到达的是组2成员对应的状态，很明显状态D可以和A、B、C区分开来。因此我们可以继续将组1划分更小的组：</p>
<p><img src="/uploads/compiler_regular2nfa/9.png" alt=""></p>
<p>4）、类似于第三步，组3的状态A、B、C针对b的转换可以划分为两个不同的组。这是因为状态A、C经过转换b之后均为组内状态；而状态B经过转换b得到的组4成员对应的状态：</p>
<p><img src="/uploads/compiler_regular2nfa/10.png" alt=""></p>
<p>由于组5中各个状态，无论是针对转换a，还是转换b而言，得到的状态均相同。因此我们不能讲组5进行更细粒度的划分。那么上图就是最终的划分结果。</p>
<p>现在我们根据上面的信息画出对应的状态转换表，由于状态A和状态C经过转换得到的状态是一样的，因此集合{A,C}这里以状态A表示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">状态</th>
<th style="text-align:left">a</th>
<th style="text-align:left">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">D</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">B</td>
<td style="text-align:left">E</td>
</tr>
<tr>
<td style="text-align:left">E</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
</tr>
</tbody>
</table>
</div>
<p>我们画出对应的DFA，并将其与上面我们用抽象语法树构造得到的DFA进行对比：</p>
<p><img src="/uploads/compiler_regular2nfa/11.png" alt=""></p>
<p>很明显能够对比出来，上面两个DFA除了赋予各个状态的名称不一样之外，各个转换以及转换后的状态都是一样的。我们称这两个状态机是同构的。<strong>同构</strong>是指对于两个不同的自动机，如果某个自动只是通过更改状态的名字就可以转换为另一个自动机。</p>
<h2 id="五、DFA模拟中的时间和空间的权衡"><a href="#五、DFA模拟中的时间和空间的权衡" class="headerlink" title="五、DFA模拟中的时间和空间的权衡"></a>五、DFA模拟中的时间和空间的权衡</h2><p>最简单和最快捷的表示一个DFA的转换函数的方法是：使用一个以状态和字符为下标的二维表。给定一个状态和下一个输入字符，我们访问这个数组就可以找出下一个状态以及我们必须要执行的特殊动作。<br>但是我们知道对于二维表而言，各个状态针对某些字符并没有对应转换。如果数量变多了之后就会存在大量的空间浪费问题。</p>
<p>我们可以使用一个带有四个数组的数据结构，如下图所示：</p>
<p><img src="/uploads/compiler_regular2nfa/12.png" alt=""></p>
<p>1）、base数组用于确定状态s条目的基准位置；<br>2）、next和check数组存放的正式对应状态条目；<br>3）、数组check用于确定base[s]给出的基准位置是否正确，如果错误则使用default数组来确定另一个基准位置；</p>
<p>在计算状态s在输入a的后继状态时，我们首先查看数组next和check中在位置 <code>index = base[s] + a</code> （a指当前输入字符，其对应于ascii码表上固定数字）上的状态条目。<br>a、如果check[index] == s，那么该状态条目有效（该状态指的是经过转换a之后得到的后续状态）；<br>b、如果check[index] != s，那我们则得到另一个状态条目t = default[s]。并将状态t设置为当前状态重复上诉过程获取下一个状态；</p>
<p>下面是对应的伪代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int nextState(s,a) &#123;</div><div class="line">  if(check[base[s]+a] == s) return next[base[s]+a];</div><div class="line">  else return nextState(default[s],a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这一节中需要重点理解的就是抽象语法树：抽象语法树的每个内部结点代表一个运算符，该内部结点的子节点代表运算符的运算分量。然后可以根据正则表达式构造对应的抽象语法树。<br>函数nullable、firspos、lastpos以及followpos在构造DFA中起着重要的作用。nullable指的是对应结点的子表达式是否可能返回空串；firstpos是子表表达式串的第一个符号；lastpos是子表达式串的最后一个符号；followpos则是相对要复杂一点，只针对连接结点和闭包结点求followpos。<br>在有了上面只是作为铺垫之后，求正则表达式来DFA的转换就要轻松许多。首先是在抽象语法树中以根节点所在的firstpos集合作为DFA的开始状态。然后查看集合内部各个序号对应的转换，获取对应需要的followpos求并集。以此类推下去可构造一个完整的DFA。<br>而在最小化DFA状态数时，则根据不同的划分，递归地将各组区分开来，得到状态数最少的DFA。而在最后也给出了权衡时间和空间的数据结构。</p>
<p>到这儿基本上把词法分析相关的知识都简单过了一遍了。后续再继续更新语法分析部分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇文章中，我们至少学会了将正则表达式构造成对应的NFA和DFA。但是用上篇文章中从正则表达式转换为对应DFA的方式效率低下，即我们要先将正则表达式转换为NFA，然后使用子集构造法将NFA转换为对应DFA。&lt;/p&gt;
&lt;p&gt;在本篇文章中，我们将首先学习如何将正则表达式直接转
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="词法分析" scheme="http://yoursite.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>词法分析——从正则表达式到有穷自动机</title>
    <link href="http://yoursite.com/2019/10/28/compiler_regular_fa/"/>
    <id>http://yoursite.com/2019/10/28/compiler_regular_fa/</id>
    <published>2019-10-28T04:49:52.840Z</published>
    <updated>2019-10-28T05:13:10.289Z</updated>
    
    <content type="html"><![CDATA[<p>自动机在本质上是和状态转换图类似的。但也有一点不同，它们只能对每个可能的输入串简单地回答“是”或者“否”；有穷自动机分为两类：</p>
<ul>
<li>1、<strong>不确定的有穷自动机（NFA）</strong>：其边上的标号没有任何限制，离开一个状态的多条边上可以存在多个相同的符号，也可以是空；</li>
<li>2、<strong>确定的有穷自动机（DFA）</strong>：对于每个符号而言，以该符号为标号的边有且只有一条离开该状态。</li>
</ul>
<p>下面我们就一次来看看不确定的有穷自动机，和确定的有穷自动机。</p>
<h2 id="一、NFA——不确定的有穷自动机"><a href="#一、NFA——不确定的有穷自动机" class="headerlink" title="一、NFA——不确定的有穷自动机"></a>一、NFA——不确定的有穷自动机</h2><p>不确定的有穷自动机由下面几个部分组成：<br>1）、有穷的状态集合，类似于上一节中状态转换表的每一个节点；<br>2）、一个输入符号集合，可以简单地理解为unicode字符集之类的；<br>3）、转换函数，类似于状态转换表中的有向箭头一样；<br>4）、开始状态，或者叫初始状态；<br>5）、接受状态，也称作终止状态，如下图的双圆圈表示；</p>
<p><img src="/uploads/compiler_regular_fa/1.png" alt=""></p>
<p>上图是一个能够识别正则表达式 <code>(a|b)*abb</code>的NFA转换图。</p>
<h4 id="转换表和接收串"><a href="#转换表和接收串" class="headerlink" title="转换表和接收串"></a>转换表和接收串</h4><p>我们可以将一个NFA表示为一张转换表。表的每一行表示一个状态，表的每一列对应于输入符号和空串。先将上图的NFA转换图转换成为对应的转换表，然后根据转换表再具体说明其中的含义：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">状态</th>
<th style="text-align:left">a</th>
<th style="text-align:left">b</th>
<th style="text-align:left">空字符ε</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">{0,1}</td>
<td style="text-align:left">{0}</td>
<td style="text-align:left">∅</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">{2}</td>
<td style="text-align:left">∅</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">{3}</td>
<td style="text-align:left">∅</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">∅</td>
</tr>
</tbody>
</table>
</div>
<p>对于一个给定的状态和给定的转换，其得到的值是NFA转换图中应用对应转换之后得到的状态集合。如果对应的转换没有后续状态，则用符号∅表示。</p>
<p>而自动机在判断是否接收字符串的依据是：存在某条字符序列组成符号串的路径，该路径能够从开始状态到达某个接收状态。我们就说NFA接收这个符号串。比如：</p>
<p><img src="/uploads/compiler_regular_fa/2.png" alt=""></p>
<p>该NFA接收符号串：</p>
<p><img src="/uploads/compiler_regular_fa/3.png" alt=""></p>
<p>即字符串<code>aaa</code>被这个NFA接受。路径中的ε并不会记录在实际的路径中。</p>
<h2 id="二、DFA——确定的有穷自动机"><a href="#二、DFA——确定的有穷自动机" class="headerlink" title="二、DFA——确定的有穷自动机"></a>二、DFA——确定的有穷自动机</h2><p>确定的有穷自动机是不确定有穷自动机的特例，它性质如下：<br>1）、没有输入符号ε；<br>2）、对于每一个状态s，每一个输入符号a，有且只有一条边离开状态s。</p>
<p>通俗来讲就是指定某个状态，不存在两个或者以上相同的转换存在。比如对于NFA而言，状态0中转换a可以到达两个及其以上不同的状态；而DFA则只能到达一个（有且只有）状态。 比如下面同样是识别<code>(a|b)*abb</code>的DFA转换图：</p>
<p><img src="/uploads/compiler_regular_fa/4.png" alt=""></p>
<p>对于给定的输入串<code>ababb</code>，这个DFA的对应状态顺序为：0、1、2、1、2、3。</p>
<h2 id="三、正则表达式、NFA以及DFA之间的关联"><a href="#三、正则表达式、NFA以及DFA之间的关联" class="headerlink" title="三、正则表达式、NFA以及DFA之间的关联"></a>三、正则表达式、NFA以及DFA之间的关联</h2><p>这里首先我们将正则表达式转变为接受相同语言的NFA。然后介绍如何将NFA转变为DFA。这样我们就有了一个粗略的方式将正则表达式转换为NFA和DFA的方案。</p>
<h4 id="正则表达构造NFA的规则"><a href="#正则表达构造NFA的规则" class="headerlink" title="正则表达构造NFA的规则"></a>正则表达构造NFA的规则</h4><p>通过正则表达式构造NFA主要分为六种情况。在下面每一个情况中，我们都有提出状态i和状态f是否为新状态。指出的意义在于我们需要明确新构建NFA时出现的状态是否为原各个NFA中已有状态，还是需要我们去新增一个状态。比如在连接运算中出现的状态i和f并非新状态，而是已有状态的特殊状态：</p>
<ul>
<li><p><strong>规则1</strong>、空字符ε表达式；对于表达式ε，构造下面的NFA<br><img src="/uploads/compiler_regular_fa/5.png" alt=""><br>这里i是一个新状态，也是NFA的开始状态；f是另一个新状态，也表示NFA的接受状态</p>
</li>
<li><p><strong>规则2</strong>、字母表中子表达式；<br>这里状态i和状态f是新状态<br><img src="/uploads/compiler_regular_fa/6.png" alt=""></p>
</li>
<li><p><strong>规则3</strong>、正则表达式中的并运算；<br>假设正则表达式s和t对应的NFA为N(s)和N(t)，<code>r = s|t</code>的NFA为N(r)。这里状态i和状态f是新状态：<br><img src="/uploads/compiler_regular_fa/7.png" alt=""><br>因此从状态i到状态f的任何路径要么只通过N(s)，要么只通过N(t)。且离开i或进入f的ε转换都不会改变路径上的标号。因此我们可以判定 <strong>N(r)识别 L(r) = L(s) ∪ L(t)</strong> 。</p>
</li>
<li><p><strong>规则4</strong>、正则表达式中的连接运算；<br>同样的，假设正则表达式s和t对应的NFA为N(s)和N(t)，<code>r = st</code> 。对应的NFA为：<br><img src="/uploads/compiler_regular_fa/8.png" alt=""><br>这个情形下的状态i和状态f并非新引入的状态，而是原有正则表达式s和t中已有的状态。</p>
</li>
<li><p><strong>规则5</strong>、正则表达式中的闭包运算；<br>这里假设正则表达式 <code>r = s*</code>，N(s)表示正则表达式s对应的NFA。因此闭包运算得到的NFA为：<br><img src="/uploads/compiler_regular_fa/9.png" alt=""><br>这里状态i和状态f都是新引入的状态。</p>
</li>
<li><p><strong>规则6</strong>、括号表达式<code>r = (s)</code> 其NFA是完全相同的；</p>
</li>
</ul>
<p>因此 <strong>只有在正则表达式的连接运算和括号存在时，才不会引入新的状态</strong> 。N(r)的状态数最多为r中出现的运算符和运算分量总数的两倍。这是因为每一个构造步骤最毒只引入两个新状态。</p>
<h4 id="正则表达式构造NFA实例"><a href="#正则表达式构造NFA实例" class="headerlink" title="正则表达式构造NFA实例"></a>正则表达式构造NFA实例</h4><p>现在我们运用上面提到的规则，来将一个正则表达式转换为对应的NFA。将正则表达式转换为NFA的算法是语法制导的，也就是说：</p>
<blockquote>
<p>沿着正则表达式的语法分析树 <strong>自底向上</strong> 递归的进行。</p>
</blockquote>
<p>下面关于语法分析树定义部分可以选读，由于会用到很多专业名词，此时大可不必去细究语法分析树，因为对于我来说理解下文并不是必须需要这些知识点。但为了行文的准确性，我将下面要用的语法分析树的定义先列出来。<br>语法分析树用图形方式展示了从文法的开始符号推导出相应语言中符号串的过程。给定一个上下文无关文法，该文法的语法分析树具有如下形式：<br>1）、根节点的标号为文法的开始符号（大体上为文法的第一个产生式的首个符号）；<br>2）、每个叶子结点的标号为一个终结符或者空ε（具体字母表中的符号，粗略来看它的叶子结点从左到右组成了最终的正则表达式）；<br>3）、每个内部结点的标号为一个非终结符（可以简单理解为该符号还存在产生式还可以可以推导出终结符号）。<br>4）、对于产生式A-&gt;XYZ，对于X, Y ,Z来说既可以是终结符，也可以是非终结符。</p>
<p>对于正则表达式 <code>(a|b)*abb</code> ，我们构造处对应的语法分析树：</p>
<p><img src="/uploads/compiler_regular_fa/10.png" alt=""></p>
<p>1）、既然是自底向上的，那首先肯定是看子表达式a和b。运用规则1，即可得到两个NFA：</p>
<p><img src="/uploads/compiler_regular_fa/11.png" alt=""></p>
<p>2）、现在的叶子节点为并运算符，此时运用规则3。此时我们需要新引入两个状态，并且原有NFA中的接受状态要变为非接受状态：</p>
<p><img src="/uploads/compiler_regular_fa/12.png" alt=""></p>
<p>对于带有括号的正则表达式而言，我们从规则6可知，括号运算符不会改变当前的NFA。因此当遇到括号时NFA不改变。</p>
<p>3）、对于闭包运算符来说，同样会引入两个新状态：</p>
<p><img src="/uploads/compiler_regular_fa/13.png" alt=""></p>
<p>4）、最后是3个连接操作，连接的子表达式分别是a、b、b。因此将它们连接之后得到的最终NFA如下：</p>
<p><img src="/uploads/compiler_regular_fa/14.png" alt=""></p>
<h4 id="NFA到DFA的转换——子集构造法"><a href="#NFA到DFA的转换——子集构造法" class="headerlink" title="NFA到DFA的转换——子集构造法"></a>NFA到DFA的转换——子集构造法</h4><p>现在我们已经能够从正则表达式转换为NFA了，那如果我们要把正则表达式转换为DFA呢？这里先介绍用NFA转换为DFA的方式，后续会将通过抽象语法树搭配firstpos，lastpos和followpos直接从正则表达式构造DFA。现在我们先通过子集构造法来讲NFA转换为DFA。</p>
<p>子集构造法中，我们需要通过NFA为DFA构造转换表。</p>
<blockquote>
<p><strong>DFA的每一个状态是一个NFA的状态集合</strong>。</p>
</blockquote>
<p>DFA的状态是一个集合，该集合里面包含的是对应NFA的状态。</p>
<p>我们在上面看到在将正则表达式构造成NFA时，NFA里面存在很多空转换。所以当务之急是如果正确地处理NFA上面的空转换。下面展示了NFA的状态集合上的相关操作：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">操作</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">ε-closure(s)</td>
<td style="text-align:left">指的是从NFA的状态s开始，可以通过ε转换得到的状态集合</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">ε-closure(T)</td>
<td style="text-align:left">指的是集合T中的某个NFA状态，该状态只通过ε转换得到的状态集合</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">move(T,a)</td>
<td style="text-align:left">即集合T中的状态通过转换a得到的状态集合</td>
</tr>
</tbody>
</table>
</div>
<p>假设s<sub>0</sub>是NFA的开始状态，那么对应DFA的开始状态就是 <strong>ε-closure(s<sub>0</sub>)</strong> 。而DFA的接受状态是至少包含NFA接受状态的集合。</p>
<p>我们在上一节得到的NFA，现在我们将该NFA转换为DFA：</p>
<p>1、对于开始状态0，我们使用操作1（上表中序号为1的操作，下文类似），即状态0通过ε空转换可以得到的状态集合为： <code>{0, 1, 2, 3, 7}</code>。<br>这里有一点需要注意的是：因为路径可以不包含边，所以状态0也是可以从它自身出发经过标号ε到达的状态。</p>
<p><img src="/uploads/compiler_regular_fa/15.png" alt=""></p>
<p>2、我们对第一步得到的集合求转换a的集合。现在我们看状态集合<code>{0, 1, 2, 3, 7}</code>通过转换a（即应用操作3）可以得到的状态集合<code>{3,8}</code>。此时我们对集合<code>{3,8}</code>应用操作2得到的集合为<code>{1, 2, 4, 6, 7}</code>：</p>
<p><img src="/uploads/compiler_regular_fa/16.png" alt=""></p>
<p>在集合{0, 1, 2, 3, 7}里面，只有状态2和状态7可以通过a转换得到的集合是{3, 8}。此时查看状态3通过空转换得到集合为：<br>a、s<sub>3</sub> —<code>ε</code>—&gt; s<sub>6</sub> —<code>ε</code>—&gt; s<sub>7</sub>;<br>b、s<sub>3</sub> —<code>ε</code>—&gt; s<sub>6</sub> —<code>ε</code>—&gt; s<sub>1</sub> —<code>ε</code>—&gt; s<sub>2</sub>;<br>c、s<sub>3</sub> —<code>ε</code>—&gt; s<sub>6</sub> —<code>ε</code>—&gt; s<sub>1</sub> —<code>ε</code>—&gt; s<sub>4</sub>;<br>因此最终的集合为 <strong>{1,2,3,4,6,7,8}</strong>。</p>
<p>3、同样的，我们对第一步得到的集合求转换b的集合。现在我们看状态集合<code>{0, 1, 2, 3, 7}</code>通过转换b可以得到的状态集合<code>{5}</code>。然后集合{5}通过空转换可以得到的集合为{1, 2, 4, 6, 7}</p>
<p><img src="/uploads/compiler_regular_fa/17.png" alt=""></p>
<p>具体的分析和第2步类似。</p>
<p>这样我们对后续出现的每一个状态都执行对应的转换a、转换b。我们可以得到一个状态转换表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">NFA状态</th>
<th style="text-align:left">DFA状态</th>
<th style="text-align:left">a</th>
<th style="text-align:left">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">{0,1,2,4,7}</td>
<td style="text-align:left">A</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td style="text-align:left">{1,2,3,4,6,7,8}</td>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">D</td>
</tr>
<tr>
<td style="text-align:left">{1,2,4,5,6,7}</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td style="text-align:left">{1,2,4,5,6,7,9}</td>
<td style="text-align:left">D</td>
<td style="text-align:left">B</td>
<td style="text-align:left">E</td>
</tr>
<tr>
<td style="text-align:left">{1,2,4,5,6,7,10}</td>
<td style="text-align:left">E</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
</tr>
</tbody>
</table>
</div>
<p>我们前面说过NFA开始状态通过ε转换得到集合为开始状态，因此上表中对应DFA对应的状态为A。而NFA状态集合中包含有接受状态对应DFA的状态E，因此E为DFA的接受状态。对应的DFA如下：</p>
<p><img src="/uploads/compiler_regular_fa/18.png" alt=""></p>
<p>下面是对应算法的伪代码描述。模拟一个NFA的执行（即NFA转换为DFA）</p>
<p>a）、输入部分：<br>一个以eof结束的输入串x；<br>一个NFA N，它的开始状态为s<sub>0</sub>，接受状态为F，转换函数<code>move</code>；<br>b）、输出：如果NFA N接受符号串x，则返回yes，否则返回no；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">S = ε-closure(s0); /// 首先求出开始状态经过空转换之后的集合，即上面的第1步</div><div class="line">c = nextChar(); /// 读取下一个输入字符</div><div class="line">while(c != eof) &#123;</div><div class="line">  /// 首先计算当前集合S经过转换c之后得到集合，然后用该集合进行空转换。得到c转换之后真正的元素集合。</div><div class="line">  /// 即上面提到的第2、3步</div><div class="line">  S = ε-closure(move(S,c)); </div><div class="line">  c = nextChar();</div><div class="line">&#125;</div><div class="line">if (S ∩ F != ∅) return YES;</div><div class="line">else retnru NO;</div></pre></td></tr></table></figure>
<h2 id="四、词法分析器生成工具的设计"><a href="#四、词法分析器生成工具的设计" class="headerlink" title="四、词法分析器生成工具的设计"></a>四、词法分析器生成工具的设计</h2><p>词法分析器的程序包含一个固定模拟自动机的程序（先不指定是NFA，还是DFA）。下图是一个lex程序转换成自动机的结构：</p>
<p><img src="/uploads/compiler_regular_fa/19.png" alt=""></p>
<p>这里提到了前面介绍的几个概念，这儿简要说明一下。输入缓冲区可以让我们依次读入多个字符到缓冲区中（这个大致为4096字节），而不是每读入一个字符就调用一次系统读取命令；词素作为匹配了某个模式词法单元的字符串，比如词素为<code>name</code>词法单元<strong>id</strong>；指针lexemeBegin指向当前词素的开始位置处；指针forward的作用是一直向前扫描，直到匹配某个模式为止。</p>
<p>下表中有三个模式，已经对应模式的动作。这个表指明了词法分析器需要的模式，已经匹配到对应模式之后的动作：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">模式</th>
<th style="text-align:left">动作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">P<sub>1</sub></td>
<td style="text-align:left"><code>a</code></td>
<td style="text-align:left">A<sub>1</sub></td>
</tr>
<tr>
<td style="text-align:left">P<sub>2</sub></td>
<td style="text-align:left"><code>abb</code></td>
<td style="text-align:left">A<sub>2</sub></td>
</tr>
<tr>
<td style="text-align:left">P<sub>3</sub></td>
<td style="text-align:left"><code>a*b+</code></td>
<td style="text-align:left">A<sub>3</sub></td>
</tr>
</tbody>
</table>
</div>
<p>这里的动作是指匹配到对应模式之后需要做的相关操作，比如匹配到词法单元id之后的动作是生成对应的标识符，获取对应词法单元并返回给语法分析器；匹配到空白符之后我们将输入回退到非空白符的开头，而且不向语法分析器返回任何词法单元。等等。</p>
<p>上表中满足模式P<sub>2</sub>和也同时满足模式P<sub>3</sub>，当出现这种冲突时我们首先选择P<sub>2</sub>。这是因为在解决冲突时 </p>
<blockquote>
<p><strong>以先出现的模式为主</strong> (P<sub>2</sub>先于P<sub>3</sub>列出)。</p>
</blockquote>
<p>下面列出三个模式对应的NFA：</p>
<p><img src="/uploads/compiler_regular_fa/20.png" alt=""></p>
<p>以及将上面三个合并之后得到的NFA：</p>
<p><img src="/uploads/compiler_regular_fa/21.png" alt=""></p>
<p>现在如果词法分析器模拟了上图的NFA，那么该分析器必须从它的输入中<code>lexemeBegin</code>指向的位置开始读取输入，并移动forward指针。然后根据子集构造法来获取当前的状态集合。<br>需要注意的是：这里并不是使用子集构造法将NFA转换为DFA，而只是简单地想知道某一状态集合通过子集构造法之后得到的新的状态集合（不过在下面的“词法分析器使用的DFA”一节会使用该表，该表的第二列就是对应DFA的状态）。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">NFA状态</th>
<th style="text-align:left">状态编号（DFA状态）</th>
<th style="text-align:left">a</th>
<th style="text-align:left">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">{0,1,3,7}</td>
<td style="text-align:left">A</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td style="text-align:left">{2,4,7}</td>
<td style="text-align:left">B</td>
<td style="text-align:left">D</td>
<td style="text-align:left">E</td>
</tr>
<tr>
<td style="text-align:left">{8}</td>
<td style="text-align:left">C</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td style="text-align:left">{7}</td>
<td style="text-align:left">D</td>
<td style="text-align:left">D</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td style="text-align:left">{5,8}</td>
<td style="text-align:left">E</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">F</td>
</tr>
<tr>
<td style="text-align:left">{6,8}</td>
<td style="text-align:left">F</td>
<td style="text-align:left">∅</td>
<td style="text-align:left">C</td>
</tr>
</tbody>
</table>
</div>
<p>在上表中，最终会达到一个没有后续状态的输入点。此时不可能有任何更长的输入前缀使得这个NFA到达某个接受状态，此后的状态将一直为空。比如上表中状态编号为C、E、F之后再继续输入a，那么此时就没有任何的后续状态。</p>
<p><img src="/uploads/compiler_regular_fa/22.png" alt=""></p>
<p>上图中我们的输入字符串以 <code>aaba</code> 开头。当我们在读入第四个符号 a 之后，此时我们处于一个空状态集合中（也可以从上表中第三行得出）。</p>
<blockquote>
<p><strong>这时候我们就沿着状态集的顺序往回找，直到找到包含一个或多个接受状态的集合为止</strong> 。</p>
</blockquote>
<p>如果集合中存在多个接受状态，那么我们就选择模式靠前相对应的接受状态。此时将<code>forward</code>指针移动到词素的末尾，同时执行对应的动作（前面表格中的A<sub>1</sub>…A<sub>3</sub>）。</p>
<p>在这里表明输入串aaba被模式 <code>a*b+</code> 匹配。然后执行对应的动作A<sub>3</sub>。</p>
<h4 id="词法分析器使用的DFA"><a href="#词法分析器使用的DFA" class="headerlink" title="词法分析器使用的DFA"></a>词法分析器使用的DFA</h4><p>根据前面的转换表，我们构造出对应的DFA：</p>
<p><img src="/uploads/compiler_regular_fa/23.png" alt=""></p>
<p>对于状态{6,8}而言有两个接受状态，分别对应于模式 abb 和 a<em>b+ 。由于前一个模式先被列出，因此我们选择 <em>*abb</em></em> 作为状态{6,8}所关联的模式。</p>
<p>在词法分析器中，使用DFA和使用NFA的方法相似。模拟DFA运行，直到某一点上没有后续状态为止。这种时候我们就沿着顺序往回找，直到找到包含一个或多个接受状态的集合为止。</p>
<h4 id="向前看运算符"><a href="#向前看运算符" class="headerlink" title="向前看运算符"></a>向前看运算符</h4><p>有时候为了能够正确地识别某个词法单元的实际词素，我们需要指明 <strong>该词法单元模式r<sub>1</sub>之后必须跟着模式r<sub>2</sub></strong> ，因此我们可以将其表示为 “r<sub>1</sub>/r<sub>2</sub>“ 。实际上在将r<sub>1</sub>/r<sub>2</sub>转换为对应的NFA时，<strong>我们把/看成ε（不会去输入中查找/）</strong>。 例如：</p>
<p><img src="/uploads/compiler_regular_fa/24.png" alt=""></p>
<p>上图是词法单元IF的模式，在这个模式中我们使用了向前看运算符。状态6表明了关键字IF的出现，因为如果只是单单的空转换之前的模式（r<sub>1</sub>）将无法准确的识别是关键字if，还是一个带有if前缀的标识符。<br>当进入了状态6时，我们需要向回扫描到最晚出现的状态2，此时我们找到了对应词法单元的词素。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，我们认识到了NFA（不确定的有穷自动机）和DFA（确定的有穷自动机），以及它们与状态转换图之间的差异。DFA和NFA最明显的差异莫过于对于每一个状态s，对于同一个输入符号而言有且只有一条离开该状态的边。<br>其次我们知道了如何通过正则表达式构造NFA，大致的操作有连接、并、闭包和简单的括号操作操作。其中并和闭包操作会引入新状态（使用空转换进行连接）。<br>然后我们通过子集构造法可以将NFA转换为对应的DFA。其中包括有三种操作，分别是：某一指定状态的空转换；某一指定集合执行空转换；某一指定集合执行特定转换a。通过这三种操作我们构造出NFA对应DFA的转换表。<br>最后我们了解了一点词法分析器生成工具的设计，以及向前看运算符的作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动机在本质上是和状态转换图类似的。但也有一点不同，它们只能对每个可能的输入串简单地回答“是”或者“否”；有穷自动机分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;strong&gt;不确定的有穷自动机（NFA）&lt;/strong&gt;：其边上的标号没有任何限制，离开一个状态的多条边上可以
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="词法分析" scheme="http://yoursite.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>词法分析——手动词法单元的识别（状态转换图、KMP算法）</title>
    <link href="http://yoursite.com/2019/10/28/compiler_stateGraph_kmp/"/>
    <id>http://yoursite.com/2019/10/28/compiler_stateGraph_kmp/</id>
    <published>2019-10-28T04:10:38.170Z</published>
    <updated>2019-10-28T04:47:25.849Z</updated>
    
    <content type="html"><![CDATA[<p>在这儿我们先用手工的方式将正则表达式表示的模式转换为状态转换图。在下一节我们会用自动化的方法构造对应的转换图。</p>
<p><img src="/uploads/compiler_stateGraph_kmp/1.png" alt=""></p>
<p>1）、<strong>结点</strong>：状态转换图有一组被称为“状态”的结点，它表示在扫描过程（即词法分析器扫描指定输入串，寻找指定模式词素）中可能出现的状态。也就是lexemeBegin指针和forward指针之间的所有的字符。<br>2）、<strong>边</strong>：从图的一个状态指向另一个状态，每条边的标号包含了一个或多个符号。如果找到这样的一条边，就将forward指针前移，并进入该边指向的下一个状态。<br>3）、<strong>开始状态</strong>：也就是上图中的<code>start</code>。<br>4）、<strong>接收状态或者最终状态</strong>：该状态表明已经找到了一个词素。也就是上图中两个圆圈。</p>
<blockquote>
<p>接收状态通常是 <strong>向语法分析器返回一个词法单元和相关的属性值</strong> 。</p>
</blockquote>
<p>5）、<strong>回退🌟号</strong>：上图中接受状态右上角的*号，表示我们识别到的词素并不包含使我们到达接受状态的符号（也就是上图中的no let/dig边）。此时我们需要回退forward指针到倒数第二个状态。这其中可能会回退多步，所以这里用*号来表示需要回退；</p>
<h3 id="relop状态转换图"><a href="#relop状态转换图" class="headerlink" title="relop状态转换图"></a>relop状态转换图</h3><p>我们根据上一节的relop词法单元，已经对应的属性来构造一个relop的状态转换图</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词素</th>
<th style="text-align:left">词法单元名字</th>
<th style="text-align:left">属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">LT</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">GT</td>
</tr>
<tr>
<td style="text-align:left">…</td>
<td style="text-align:left"><strong>…</strong></td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">NE</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/uploads/compiler_stateGraph_kmp/2.png" alt=""></p>
<p>其实对于这个状态转换图来说，我只画了其中的比较运算符和逻辑运算符。对于位运算符（&lt;&lt;左移, &gt;&gt;右移）并没画出来。这里主要是想表达各个接收状态，和forward指针回退的操作。</p>
<h3 id="id（标识符）和关键字的状态转换图"><a href="#id（标识符）和关键字的状态转换图" class="headerlink" title="id（标识符）和关键字的状态转换图"></a>id（标识符）和关键字的状态转换图</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词法单元</th>
<th style="text-align:left">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>letter</strong></td>
<td style="text-align:left">[A-Za-z]</td>
</tr>
<tr>
<td style="text-align:left"><strong>id</strong></td>
<td style="text-align:left">letter(letter , digit)*</td>
</tr>
</tbody>
</table>
</div>
<p>注：上表中的正则表达式将逗号“,”更改为”|”。<br>对于关键字来说，它们看起来和标识符是很像的。但它们并不是标识符。</p>
<p><img src="/uploads/compiler_stateGraph_kmp/3.png" alt=""></p>
<p>对于关键字<code>if/else/for</code>等等关键字，标识符<code>forearm</code>同样也是满足上诉转换图的。</p>
<p>为了解决上诉问题，编译原理中的处理方案有两个：</p>
<ul>
<li>（1）👏👏👏、初始化时就将各个保留字填入符号表中；<br>符号表的某个字段会指明这些串并不是普通的标识符，并指出其对应的词法单元。<br>当我们找到一个标识符时，如果该标识符尚未出现在符号表中，就会调用上图中出现的<code>installID</code>将此标识符放入符号表中，并返回一个指针（该指针指向词素对应的符号表条目）。</li>
</ul>
<blockquote>
<p><strong>任何在词法分析时不在符号表中的标识符都不可能是一个保留字，因此它的词法单元是id</strong></p>
</blockquote>
<ul>
<li>（2）、为每一个关键字建立单独的状态转换图；</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/1.png" alt=""></p>
<p>对于这个状态图来说，我们必须要区分以<code>else</code>为前缀的标识符（比如elseid），因此我们在倒数第二个状态后的边，必须要限制为非字符和数字。</p>
<p>使用第二个方案时：<strong>必须要设定词法单元的优先级，使得当一个词素同时匹配id和保留字模式时，优先识别保留字词法单元</strong>。</p>
<p>我们从第一点可以确定标识符加入符号表的时机是：</p>
<blockquote>
<p>识别到对应词法单元时，如果该标识符尚未加入符号表。此时词法分析器会将该 <strong>标识符</strong> (也可以理解为词素) 放入符号表中。</p>
</blockquote>
<h3 id="词法单元number状态转换图"><a href="#词法单元number状态转换图" class="headerlink" title="词法单元number状态转换图"></a>词法单元number状态转换图</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词法单元</th>
<th style="text-align:left">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>digit</strong></td>
<td style="text-align:left">[0-9]</td>
</tr>
<tr>
<td style="text-align:left"><strong>digits</strong></td>
<td style="text-align:left">digit+</td>
</tr>
<tr>
<td style="text-align:left"><strong>number</strong></td>
<td style="text-align:left">digits(.digits)?(E[+-]?digits)?</td>
</tr>
</tbody>
</table>
</div>
<p>下图是一个识别整数和浮点数的状态转换图：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/4.png" alt=""></p>
<p>从上图中我们可以看到，接收状态22既匹配到了科学计数法表示的浮点数（包含小数部分，也包含指数部分），也匹配到了科学计数法表示的整数。<br>接收状态23是匹配到的整数词素；接收状态24为不带科学计数法的的整数。</p>
<p>当我们在接收状态时，返回词法单元 <strong>number</strong> 以及一个指向 <strong>常量表</strong> 条目的指针，上面找到的词素就放在这个常量表条目中。</p>
<h3 id="ws（空白符）状态转换图"><a href="#ws（空白符）状态转换图" class="headerlink" title="ws（空白符）状态转换图"></a>ws（空白符）状态转换图</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词法单元</th>
<th style="text-align:left">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>ws</strong>(空白符)</td>
<td style="text-align:left">(blank \</td>
<td>tab \</td>
<td>newline)+</td>
</tr>
</tbody>
</table>
</div>
<p>我们用转换delim替换上表中的blank、tab、newline：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/5.png" alt=""></p>
<p>空白符后面需要跟一个非空白符才能确定当前已经完成了对连续空白符的扫描。</p>
<blockquote>
<p>当我们识别到空白符之后，但我们 <strong>并不向语法分析器返回任何词法单元。相反，我们必须在这个空白符之后再次启动词法分析过程</strong> 。</p>
</blockquote>
<h3 id="基于状态转换图的的词法分析器体系结构"><a href="#基于状态转换图的的词法分析器体系结构" class="headerlink" title="基于状态转换图的的词法分析器体系结构"></a>基于状态转换图的的词法分析器体系结构</h3><ul>
<li>1、使用一个state变量来保存一个状态转换图的当前状态编号（就是前面我们从0到27的编号）。</li>
<li>2、用switch语句根据state的值将我们转到对应状态相应的代码段，该代码段为对应状态所需要执行的动作；</li>
</ul>
<h2 id="二、KMP算法"><a href="#二、KMP算法" class="headerlink" title="二、KMP算法"></a>二、KMP算法</h2><p>现在我们看一下KMP算法，它可以用于在文本串中识别一组关键字。在看KMP字符串匹配算法之前，我们先看一下朴素字符串匹配算法。</p>
<h3 id="朴素字符串匹配算法"><a href="#朴素字符串匹配算法" class="headerlink" title="朴素字符串匹配算法"></a>朴素字符串匹配算法</h3><p>朴素字符串匹配算法是同一个循环找到所有有效偏移，寻找满足条件的情况。</p>
<p><img src="/uploads/compiler_stateGraph_kmp/6.png" alt=""></p>
<p>朴素字符串匹配算法可以形象地看成是待匹配串（子串）沿着原文本（主串）滑动，同时对每个偏移都要检测子串上的字符是否与主串中对应字符相等。其中红色字符表示对应位置匹配成功，灰色字符表示匹配失败。<br>大致的代码是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">using namespace std;</div><div class="line">int naive_string_matcher(string text, string pattern)</div><div class="line">&#123;</div><div class="line">     string::size_type n = text.size();</div><div class="line">     string::size_type m = pattern.size();</div><div class="line">     string::size_type total = n-m;</div><div class="line">     string::size_type s = -1;</div><div class="line">     for (string::size_type i = 0; i &lt; total; i++)</div><div class="line">     &#123;</div><div class="line">         s = i;</div><div class="line">         string::size_type matched = 0;</div><div class="line">         for(string::size_type idx = 0; idx &lt; m; idx++)</div><div class="line">         &#123;</div><div class="line">             if(pattern[idx] == text[s+idx]) matched++;</div><div class="line">         &#125;</div><div class="line">         if (matched == m) return s;</div><div class="line">     &#125;</div><div class="line">     return s;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在最坏情况下，朴素字符串匹配算法的平均时间复杂度为O(n<sup>2</sup>) 。</p>
<h3 id="失效函数"><a href="#失效函数" class="headerlink" title="失效函数"></a>失效函数</h3><p>KMP算法在最坏情况下也会比朴素字符串匹配算法好很多。为了快速处理文本串并在这些串中搜索一个关键字，定义了 <strong>失效函数</strong> f(s) ，其中s为对应状态图上的各个状态。也可以叫做辅助函数。<br>在这之前我们先看看串的一部分术语：</p>
<ul>
<li><strong>前缀</strong>：从串s尾部删除0个或多个符号后得到的串；</li>
<li><strong>后缀</strong>：从串s开始处删除0个或多个符号后得到的串；</li>
<li><strong>子串</strong>：删除某个前缀或者后缀之后得到的串；</li>
<li><strong>真前缀、真后缀、真子串</strong>：指的是既不包含空串，也不包含本身的前缀、后缀、子串；</li>
</ul>
<p>针对关键字b<sub>1</sub>b<sub>2</sub>b<sub>3</sub>…b<sub>n</sub>，其目标是使得b<sub>1</sub>b<sub>2</sub>…b<sub>f(s)</sub>不仅是b<sub>1</sub>…b<sub>s</sub>的真前缀，又是b<sub>1</sub>…b<sub>s</sub>后缀的子串。并且b<sub>1</sub>b<sub>2</sub>…b<sub>f(s)</sub>是所求得的最长串。下面我们以串<code>ababaca</code>来进行讲解：</p>
<h5 id="a、构造关键字状态转换图"><a href="#a、构造关键字状态转换图" class="headerlink" title="a、构造关键字状态转换图"></a>a、构造关键字状态转换图</h5><p>我们根据前面的知识，节点表示状态，有向边指的是转换</p>
<p><img src="/uploads/compiler_stateGraph_kmp/7.png" alt=""></p>
<p>现在有了状态转换图，我们需要构造每一个状态节点s，所对应的失效函数值。</p>
<h5 id="b、求解每一个状态s的函数值"><a href="#b、求解每一个状态s的函数值" class="headerlink" title="b、求解每一个状态s的函数值"></a>b、求解每一个状态s的函数值</h5><ul>
<li>1）、由于前面提到过真前缀的前提，因此我们从s=1开始计算。首先我们将f(1)设置为0，既状态1对应的失效函数值为0。并且这里我们新增一个辅助游标t用于对照状态s：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/8.png" alt=""></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">s</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>2）、此时我们比较一下状态t的转换（a）和状态s的转换（b），发现字符a并不等于字符b。此时我们将f(s+1)，即f(2)的值设置为0：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">s</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
</div>
<p>并且将s移动到状态2：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/9.png" alt=""></p>
<ul>
<li>3）、继续比较状态t的转换（a）和状态s的转换（a）此时他们相等。因此 <strong>先将t的自增1，然后将f(s+1)，即f(2)的值设置为t的值（此时为1）</strong>：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">s</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
</div>
<p>同样的，此时将s移动到状态3：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/10.png" alt=""></p>
<ul>
<li>4）、依次比较后续的s=3，和s=4的情况。它们的情形和第三步类似：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">s</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">3</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
</tbody>
</table>
</div>
<p>此时t=3，s=5。对应的状态转换图为：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/11.png" alt=""></p>
<ul>
<li>5）、现在我们比较一下状态t的转换（b）和状态s的转换（c），它们并不相等。由于 <strong>此时t不为0，说明在此之前肯定是存在某一串既为真前缀，又为后缀子串</strong> 。因此我们获取t当前位置对应失效函数函数的值。<br>此时t=3，查上表可知f(3)=1。所以现在我们将t移动到状态1：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/12.png" alt=""></p>
<ul>
<li>6）、同样的比较状态t的转换（b）和状态s的转换（c），依然不相等。<br>由于t不等于0，此时t=1，查第4步的表可知f(1)=0。所以我们现在将t移动到状态0：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/13.png" alt=""></p>
<ul>
<li>7）、对于后续状态的失效函数值确定，可以仿照第2、3和5步进行求解。最终完整失效函数为：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">s</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">3</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
</div>
<p>下面是对应的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">void trie_func(string pattern, vector&lt;int&gt; &amp;f) &#123;</div><div class="line">	const string::size_type length = pattern.size()+1;</div><div class="line">	int t = 0;</div><div class="line">	f[0]=t;// f[0] store t</div><div class="line">	f[1]=0;</div><div class="line">	for(int s = 1; s&lt; length-1; s++)	</div><div class="line">	&#123;</div><div class="line">		while(t&gt;0 &amp;&amp; pattern[t] != pattern[s])&#123; t=f[t]; f[0]=t;  &#125;	</div><div class="line">		if(pattern[s]==pattern[t])&#123; t=t+1; f[s+1]=t; f[0]=t; &#125;</div><div class="line">		else &#123;f[s+1]=0;&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[])&#123;</div><div class="line">	string pattern(&quot;ababaca&quot;);</div><div class="line">	vector &lt;int&gt; trie(pattern.size()+1);</div><div class="line">	trie_func(pattern,trie);</div><div class="line">	for (vector&lt;int&gt;::iterator itr = trie.begin(); itr != trie.end(); itr++) &#123;</div><div class="line">		cout&lt;&lt;*itr&lt;&lt;endl;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="子串与主串的比较"><a href="#子串与主串的比较" class="headerlink" title="子串与主串的比较"></a>子串与主串的比较</h3><p>现在我们以主串<code>bcbababaababacacd</code> 和子串 <code>ababaca</code> 作为例子，来看主串是否包含子串。</p>
<p><img src="/uploads/compiler_stateGraph_kmp/14.png" alt=""></p>
<p>我们从前面知道子串失效函数为：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">state</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">f(s)</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">3</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
</div>
<p>这里我将上一节的字符s替换为state，是因为这一节我会用字符s用作当前子串相对于主串的偏移量。而真正原因是我太懒了，发现图中和失效函数都用了同一个字符s。为了避免混淆，但又不想重新画图🤣。</p>
<ul>
<li>1）、主串的第一个字符和子串的第一个字符不相等。此时我们将子串向右滑动一位，此时偏移值<code>s = 1</code> ：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/15.png" alt=""></p>
<ul>
<li>2）、依次对后面机会字符进行对比，直到<code>s=3</code>时，我们发现字符串 <code>ababa</code> 成功匹配，但是子串的第六个字符和主串的第九个字符并不相等：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/16.png" alt=""></p>
<p>这时候失效函数就派上用途了。此时已匹配长度<code>q=5</code>，也就是说在状态转换图中对应于状态5。而状态5对应的失效函数值为3，对于串<code>ababa</code>来说，长度为3的串<code>aba</code>既是它的真前缀，又是它后缀的子串。此时主串和子串中的<code>aba</code>已经失效，已经没有再去比较的意义了，我们可以直接去比较主串中的a和子串中的b了：</p>
<p><img src="/uploads/compiler_stateGraph_kmp/17.png" alt=""></p>
<ul>
<li>3）、现在我们将子串向右边移动2个字符，然后继续进行比较：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/18.png" alt=""></p>
<p>这里计算偏移量s很重要：</p>
<blockquote>
<p>⚠️⚠️⚠️ <strong><code>s = s + (state - f(state))</code></strong></p>
</blockquote>
<p>比如这里的q=5，也就说明state=5，而f(state) = 3。因此向右的偏移量为：s = 3 + (5-3) = 5。</p>
<ul>
<li>4）从图中标红也能看出来a≠b，因此我们需要继续重复步骤3的事情：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/19.png" alt=""></p>
<ul>
<li>5）、如上图所示，我们继续将子串向右移动2个字符，进行比较：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/20.png" alt=""></p>
<p>相等。但这里有一个需要注意的点是：此时state为1，而f(state)=0。这意味着此时并没有存在即是真前缀又是后缀的子串。<br>现在只能和第一步一样，手动将偏移量加1。</p>
<ul>
<li>6）、现在将偏移量加1之后，并将子串和主串进行匹配。此时匹配成功，因为我们可以判断主串是包含有指定关键字的字符串：</li>
</ul>
<p><img src="/uploads/compiler_stateGraph_kmp/21.png" alt=""><br>下面是简单的代码实现，需要注意的是这里并没有做极端情况的处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">int kmp_match(string text, string pattern) &#123;</div><div class="line">	vector&lt;int&gt; trie(pattern.size() + 1);</div><div class="line">	trie_func(pattern, trie);</div><div class="line"></div><div class="line">	int offset = -1;</div><div class="line">	int q = 0;</div><div class="line">	string::size_type m = text.size();</div><div class="line">	string::size_type n = pattern.size();</div><div class="line">	if (m &lt; n)</div><div class="line">	&#123;</div><div class="line">		return -1;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for (string::size_type i = 0; i &lt; m; i++)</div><div class="line">	&#123;</div><div class="line">		while (q &gt; 0 &amp;&amp; text[i] != pattern[q] &amp;&amp; q != 0)</div><div class="line">		&#123;</div><div class="line">			q = trie[q];</div><div class="line">		&#125;</div><div class="line">		if (text[i] == pattern[q])</div><div class="line">		&#123;</div><div class="line">			q++;</div><div class="line">		&#125;</div><div class="line">		if (q==n)</div><div class="line">		&#123;</div><div class="line">			offset = i - q + 1;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return offset;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	string text(&quot;bcbababaababacacd&quot;);</div><div class="line">	string pattern(&quot;ababaca&quot;);</div><div class="line">	int offset = kmp_match(text, pattern);</div><div class="line">	cout &lt;&lt; &quot;offset: &quot; &lt;&lt; offset &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节到这儿，我们已经能够手工地为各类词法单元构造状态转换图了。这类词法单元包括有：标识符（包括字符）、数字（包括数位）、关键字、运算符等等，而且也知道如何使用KMP算法来寻找指定串，例如标识符和关键字等等。<br>在下一节就需要通过自动地方式里生层对应的状态图了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这儿我们先用手工的方式将正则表达式表示的模式转换为状态转换图。在下一节我们会用自动化的方法构造对应的转换图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compiler_stateGraph_kmp/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1）、&lt;stron
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="词法分析" scheme="http://yoursite.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>词法分析——词法单元和正则表达式</title>
    <link href="http://yoursite.com/2019/10/28/compiler_token_regular/"/>
    <id>http://yoursite.com/2019/10/28/compiler_token_regular/</id>
    <published>2019-10-28T03:09:25.132Z</published>
    <updated>2019-10-28T03:51:36.600Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章是《编译原理》的读书笔记，并加入了一些个人的理解。本系列的主要内容顺序如下：<br>1）、首先解释什么是词法单元；<br>2）、如何手动识别词法单元；<br>3）、最后是词法分析器如何自动机自动识别词法单元；<br>本文主要是看一下词分析器的词法单元部分。包括一些基本概念，以及词法单元的识别。</p>
<p>首先我们先大体上看一下词法分析器的作用。它的主要任务是读入源程序的输入字符、将它们组成词素，生成并输出一个词法单元的序列。每个词法单元对应一个词素。</p>
<p>这里我们有提到几个专业名词：词素、词法单元。它们的定义马上就会说到，我们可以先看看下面这幅图：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/5156ab1334b7f33858c6233c6a88fcd8.png" alt=""></p>
<p>从图中我们可以看出来词法分析器还在和符号表进行交互，其主要作用是从符号表中读取有关标识符种类信息，以确定需要向语法分析器传送的词法单元。</p>
<h2 id="一、词法单元"><a href="#一、词法单元" class="headerlink" title="一、词法单元"></a>一、词法单元</h2><p>现在我们就先来看看前面提到的一些专业名词：</p>
<ul>
<li><strong>词法单元</strong>：由一个 <strong>词法单元名和一个可选的属性</strong> 构成。<br>比如一个特定的关键字，或者代表一个标识符的输入字符序列。</li>
</ul>
<blockquote>
<p>词法单元是语法分析器处理的输入符号。</p>
</blockquote>
<ul>
<li><p><strong>词素</strong>：源程序中的一个字符序列，它和某个词法单元的模式匹配。它被词法分析器识别为该词法单元的一个实例；</p>
</li>
<li><p><strong>模式</strong>：它描述了一个词法单元的词素可能具有的形式；</p>
</li>
</ul>
<p>这儿我大致地解释一下这三个概念之间的关系：词法单元指定的是某一类型的事物，用面向对象来说就是，词法单元类（class）；词素就是指的是该类的具体实例；而模式就是该类的一个属性，它描述了词素所具有的具体特征。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Tokens&#123;</div><div class="line">  string pattern;</div><div class="line">&#125;;</div><div class="line">Tokens lexeme;</div></pre></td></tr></table></figure>
<p>并不是说实际就是这个代码，我只是为了便于理解，而进行的类比。下表给出了一些常见的词法单元：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词法单元</th>
<th style="text-align:left">非正式描述</th>
<th style="text-align:left">词素实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>if(关键字)</strong></td>
<td style="text-align:left">字符i,f</td>
<td style="text-align:left">if</td>
</tr>
<tr>
<td style="text-align:left"><strong>else(关键字)</strong></td>
<td style="text-align:left">字符e,l,s,e</td>
<td style="text-align:left">else</td>
</tr>
<tr>
<td style="text-align:left"><strong>comparison(比较运算符)</strong></td>
<td style="text-align:left">&lt;,&gt;,&lt;=,&gt;=,==…</td>
<td style="text-align:left">&lt;=, !=</td>
</tr>
<tr>
<td style="text-align:left"><strong>id(标识符)</strong></td>
<td style="text-align:left">字母开头的字母/数字串</td>
<td style="text-align:left">pi, printf</td>
</tr>
<tr>
<td style="text-align:left"><strong>number(数字)</strong></td>
<td style="text-align:left">数字常量</td>
<td style="text-align:left">3.1415</td>
</tr>
<tr>
<td style="text-align:left"><strong>literal(字符/串)</strong></td>
<td style="text-align:left">两双引号之间的任何字符</td>
<td style="text-align:left">“hello, world”</td>
</tr>
</tbody>
</table>
</div>
<h4 id="词法单元的大致分类"><a href="#词法单元的大致分类" class="headerlink" title="词法单元的大致分类"></a>词法单元的大致分类</h4><p>1）、<strong>关键字</strong>：每个关键字有一个词法单元；<br>2）、<strong>标识符</strong>：一个表示所有标识符的词法单元；<br>3）、<strong>常量</strong>：常量词法单元包含的数字和字符串；<br>4）、<strong>运算符</strong>：运算法也是一个词法单元，可以是比较运算符，也可以是算术运算符；<br>5）、<strong>标点符号</strong>：每一个标点符号有一个词法单元。比如括号等等；</p>
<h4 id="词法单元的属性值"><a href="#词法单元的属性值" class="headerlink" title="词法单元的属性值"></a>词法单元的属性值</h4><p>从这里我们可以看出来词法单元表示了一类事物，但是我们如何去区分具体的词素？ <strong>词法分析器不仅向语法分析器返回一个词法单元的名字，还会返回一个描述该词法单元的词素属性值</strong>。</p>
<p>比如我们声明的一个变量、或者函数时，它作为标识符一类的词法单元。它们更加详细的信息（词素、类型、第一次在源代码中出现的位置）都会保存在符号表中。<br>因此：</p>
<blockquote>
<p><strong>一个标识符的属性值是一个指向符号表中该标识符对应项的指针</strong>。</p>
</blockquote>
<p>注意，词法单元的属性值是指向符号表项的指针。</p>
<h2 id="二、正则表达式"><a href="#二、正则表达式" class="headerlink" title="二、正则表达式"></a>二、正则表达式</h2><p>这一节主要是在讲正则表达式，如果已经熟悉了正则表达式，可以直接跳过阅读词法单元的识别。而且这一节会增加很多概念，也是比较枯燥的。<br>从前面我们可以感性（直观）知道哪些词素是某一类型的词法单元。为了能够明确地划分不同词素对应的词法单元，我们需要引入正则表达式。<br>正则表达式是一种用来描述词素模式的重要表示方法。因此正则表达式就描述了特定词素对应的模式。</p>
<p>在词法分析中，最重要的语言上的运算是：<strong>并、连接和闭包</strong> 运算：</p>
<ul>
<li>并（L|M）：得到的串s可能属于L也可能属于M。但只能是其中之一；</li>
<li>连接(LM)：得到的串s即属于L，也属于M；</li>
<li>闭包：闭包分Kleene闭包和正闭包。Kleene闭包是指某一集合的符号重复 0～∞ 多次，可能是空串。正必报不包含重复0次，即不包含空串；</li>
</ul>
<p><code>letter_ (letter_ | digit_) *</code>这是一个c语言中标识符的正则表达式。其中用letter_来表示任一字母或者下划线，用digit_表示数位。c语言中标识符必须是必须是以字符开头，包含数字、字符来表示。</p>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>正则表达式中，括号的优先级最高，优先级依次降低：<br>1）、一元运算符 <code>*</code>；<br>2）、连接（左结合）；<br>3）、并运算符优先级最低（左结合）；</p>
<p>比如正则表达式 <code>(a|b)*</code>，可以表示多个串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">空集;//闭包次数为0;　</div><div class="line">a;//闭包次数为1,取并的左边;</div><div class="line">aa;//闭包次数为2,一直取并的左边;</div><div class="line">aa...a;//闭包次数为n,一直取并的左边;</div><div class="line">b;//闭包次数为1,取并的右边;</div><div class="line">bb;//闭包次数为2,取并的右边;</div><div class="line">bb...b;//闭包次数为n,取并的右边;</div><div class="line">ab;//闭包次数为2,先取左边再取右边;</div><div class="line">ba;//闭包次数为2,先取右边再取左边;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如上, 可以用一个正则表达式定义的语言叫做<strong>正则集合</strong>。如果两个正则表达式r和s表示相同的语言，则称 r 和 s 等价<code>r=s</code> 。</p>
<h6 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h6><p>c语言中的标识符是由字母、数字和下划线组成的串，下面是c标识符对应语言的正则定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">letter_ -&gt; A | B | C | ... | Z | a | b | c | ... | z | _ </div><div class="line">digit  -&gt; 0 | 1 | ... | 9 </div><div class="line">id -&gt; letter_ (letter_ | digit  ) *</div></pre></td></tr></table></figure>
<h6 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h6><p>无符号数是形如5280、0.01234、6.336E4或者1.89E-4的串。下面的正则定义给出了这类符号串的精确定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">digit -&gt; 0 | 1 | ...| 9</div><div class="line">digits -&gt; digit  digit* </div><div class="line">optionalFraction -&gt; . digits | 空集</div><div class="line">optionalExponent -&gt; (E (+|-|空) digits) | 空</div><div class="line">number -&gt; digits optionalFraction optionalExponent</div></pre></td></tr></table></figure>
<h4 id="正则表达式的扩展"><a href="#正则表达式的扩展" class="headerlink" title="正则表达式的扩展"></a>正则表达式的扩展</h4><ul>
<li><strong>单目后缀运算符+</strong>：指的正闭包；</li>
<li><strong>单目后缀运算符?</strong>：表示出现0个，或者一个；</li>
<li><strong>字符类</strong>：正则表达式a<sub>1</sub> | a<sub>2</sub> | a<sub>3</sub> |…|a<sub>n</sub>可以缩写为 <strong>[a<sub>1</sub>a<sub>2</sub>a<sub>3</sub>…a<sub>n</sub>]</strong>。当a1到an形成一个逻辑上连续的序列时，可以写作 <strong>[a1 - a<sub>n</sub>]</strong>;</li>
</ul>
<h6 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h6><p>我们可以使用正则表达式的扩展，来把例一的正则表达式进行改写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">letter_ -&gt; [A-Za-z_]</div><div class="line">digit  -&gt; [0-9]</div><div class="line">id -&gt; letter_ (letter_ | digit  ) *</div></pre></td></tr></table></figure>
<p>现在通过正则表达式，我们可以写出对应词法单元对应的模式来。因此下一步要做的就是读取源代码里面的字符流，搭配对应的词法单元的模式，生成对应的词法单元。</p>
<h2 id="三、输入缓冲"><a href="#三、输入缓冲" class="headerlink" title="三、输入缓冲"></a>三、输入缓冲</h2><p>很多情况下，我们需要至少向前看一个字符。比如在c语言中，像-、=或者&lt; 这样单字符运算符也有可能是 -&gt; 、== 或者&lt;= 这样的双字符。<br>在编译原理中会引入一个哨兵标记的双缓冲区方案来处理向前看运算符的问题。</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/1d850c00280d8de9ea211898983c3e50.png" alt=""><br>上图中出现的lexemeBegin和forward指针作用分别是：<br>1）、<code>lexemeBegin</code>：该指针指向当前词素的开始处。当前我们正在匹配某一正则表达式对应模式的词素；<br>2）、<code>forward</code>：该指针一直向前扫描，直到发现某个模式被匹配为止。</p>
<ul>
<li><p>第一步、读取内容到缓冲区中：每次读取缓冲区长度的字符到缓冲区中；<br>每个输入缓冲区的容量通常是一个磁盘块的大小，比如4096字节。我们在读取的时候就是一次性读取一个缓冲区长度的字符到缓冲区中，以避免频繁的使用读取函数。<br>当输入文件中的剩余字符不足缓冲区长度的时候，文件的默认会有一个eof（end of file）来表示文件结束。</p>
</li>
<li><p>第二步、lexemeBegin和forward指针的移动：使用lexemeBegin指针和forward指针读取指定模式的词素。<br>一旦确定了下一个词素（下图中的左括号）forward指针将指向该词素 <strong>结尾的字符</strong> 。词法分析器将这个词素作为某个返回给语法分析器的词法单元的属性值记录下来（在前面我们提过的词法单元分为词法单元名和可选的属性）。<br>然后lexemeBegin指针移动到 <strong>刚刚找到词素之后的第一个字符</strong> 。如下图所示：</p>
</li>
</ul>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/f38cb361abc1acc4d90fe24357c9d88e.png" alt=""></p>
<ul>
<li>第三步、缓冲区的替换：我们在移动forward指针前需要判断当前是否已经到达某个缓冲区的末尾。<br>如果是，我们需要将新字符读入到另外一个缓冲区中（前面提到的双缓冲区），且将forward指针指向新缓冲区的头部。</li>
</ul>
<h4 id="哨兵标记"><a href="#哨兵标记" class="headerlink" title="哨兵标记"></a>哨兵标记</h4><p>如前面所说，我们在每次移动forward指针时，我们都需要检查是否到达了缓冲区的末尾。如果是的话，我们就需要加载另一个缓冲区。因此在这里我们需要做两次测试：<br>1）、检查是否到达缓冲区的末尾；<br>2）、确定读入的字符是什么；<br>解决这两个问题，我们可以在缓冲区的末尾增加一个“哨兵”，比如<code>eof</code>：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/632ec991b874e291d70cecf5039ebc90.png" alt=""></p>
<p>从这儿我们可以知道，对于编译器而言在进行词法分析的时候，需要通过lexemeBegin和forward来扫描缓冲区。如果匹配某一个词素时，比如很长的字符串（比如将一片短篇小说作为常量字符串放到一个变量中）时，那就会出现缓冲区长度不足的情况，因此在日常编码中将长字符串拆分成多个短的字符串。</p>
<p>这其实也算是学习编译原理，有助于提供编程效率的一个例子了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在前面我们用正则表达式来表示一个模式，现在我们需要通过制定模式来识别对应的词法单元。下面是大部分词法单元，以及对应的模式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词法单元</th>
<th style="text-align:left">模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>digit</strong></td>
<td style="text-align:left">[0-9]</td>
</tr>
<tr>
<td style="text-align:left"><strong>digits</strong></td>
<td style="text-align:left">digit+</td>
</tr>
<tr>
<td style="text-align:left"><strong>number</strong></td>
<td style="text-align:left">digits(.digits)?(E[+-]?digits)?</td>
</tr>
<tr>
<td style="text-align:left"><strong>letter</strong></td>
<td style="text-align:left">[A-Za-z]</td>
</tr>
<tr>
<td style="text-align:left"><strong>id</strong></td>
<td style="text-align:left">letter(letter,digit)*</td>
</tr>
<tr>
<td style="text-align:left"><strong>if</strong></td>
<td style="text-align:left">if</td>
</tr>
<tr>
<td style="text-align:left"><strong>then</strong></td>
<td style="text-align:left">then</td>
</tr>
<tr>
<td style="text-align:left"><strong>else</strong></td>
<td style="text-align:left">else</td>
</tr>
<tr>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">&lt;,&gt;,&lt;=,&gt;=,==,!=</td>
</tr>
<tr>
<td style="text-align:left"><strong>ws</strong>(空白符)</td>
<td style="text-align:left">(blank,tab,newline)+</td>
</tr>
</tbody>
</table>
</div>
<p>由于这块儿markdown解析的问题（加了转义字符之后依然显示有点问题），我将”|”替换为”,”。在理解的时候只需要将”,”更改为”|”即可。</p>
<p>上表中的词法单元<code>ws</code>和其他词法单元不同。当我们识别到ws时，</p>
<blockquote>
<p><strong>我们并不将它返回给语法分析器，而是从这个空白符之后的字符开始继续进行词法分析。返回给语法分析器的是下一个词法单元</strong> 。</p>
</blockquote>
<p>我们从前面的知识了解到，词法分析器通过对应模式识别到词法单元之后，会将词法单元名返回给语法分析器（空白符除外），以及对应词法单元的属性来确定某一特定实例。下表展示了对应词法单元，和对应属性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">词素</th>
<th style="text-align:left">词法单元名字</th>
<th style="text-align:left">属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">任何空白符</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">if</td>
<td style="text-align:left"><strong>if</strong></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">else</td>
<td style="text-align:left"><strong>else</strong></td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left"><strong>id</strong></td>
<td style="text-align:left">指向符号表条目的指针</td>
</tr>
<tr>
<td style="text-align:left">number</td>
<td style="text-align:left"><strong>number</strong></td>
<td style="text-align:left">指向符号表条目的指针</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">LT</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">GT</td>
</tr>
<tr>
<td style="text-align:left">…</td>
<td style="text-align:left"><strong>…</strong></td>
<td style="text-align:left">…</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left"><strong>relop</strong></td>
<td style="text-align:left">NE</td>
</tr>
</tbody>
</table>
</div>
<p>表格里面的relop词法单元，区分其具体实例是通过对应词法单元属性值进行。</p>
<p>这一节主要是了解了词法单元相关知识其中，包括有词法单元、词素和模式。为了能够了解模式，我们又学习了一下正则表达式。下一节则主要是讲解词法单元的识别。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列文章是《编译原理》的读书笔记，并加入了一些个人的理解。本系列的主要内容顺序如下：&lt;br&gt;1）、首先解释什么是词法单元；&lt;br&gt;2）、如何手动识别词法单元；&lt;br&gt;3）、最后是词法分析器如何自动机自动识别词法单元；&lt;br&gt;本文主要是看一下词分析器的词法单元部分。包括一些
    
    </summary>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="词法分析" scheme="http://yoursite.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>A Malloc Tutorial</title>
    <link href="http://yoursite.com/2019/02/17/a_malloc_tutorial/"/>
    <id>http://yoursite.com/2019/02/17/a_malloc_tutorial/</id>
    <published>2019-02-17T14:01:30.825Z</published>
    <updated>2019-10-28T04:11:15.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章是对<a href="https://wiki-prog.infoprepa.epita.fr/images/0/04/Malloc_tutorial.pdf" target="_blank" rel="external">该文章</a>的翻译，如有疑问可对照原文。</p>
<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>什么是malloc？如果连这个名儿都没有听说的话，那么应该在读这篇文章之前先去学习一下Unix环境下的C语言。对于程序员来说，malloc是在C语言编程中分配一块内存的函数，然后大多数人并不知道其背后的真实情况，或者仅仅是认为这是一个syscall或者语言关键字。这篇文章中只需要一些C的技能和一些系统知识，就能了解到malloc也只不过是一个简单的函数而已。<br>本文的主要目的是编写一个简单的malloc函数，来帮助我们了解底层概念。其目的并不是为了实现一个高效的malloc，仅仅提供基础功能。但是背后的概念能够帮助我们有效地去理解进程中内存是如何管理的，以及如何处理块的分配，再分配以及释放等等。<br>站在教学的角度来说，这是一个很好的C语言编程练习。同样也是一个很好文档，它能够帮助我们理解指针怎么来的，它们在堆里面是怎样组织起来的。</p>
<h4 id="malloc是什么"><a href="#malloc是什么" class="headerlink" title="malloc是什么"></a>malloc是什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"> void *malloc(size_t size);</div></pre></td></tr></table></figure>
<p>malloc是一个标准C库函数，用于分配内存块。它遵循以下规则：</p>
<ul>
<li>malloc至少要分配请求字节大小（size）内存；</li>
<li>malloc的返回的指针，指向一个已分配的内存（比如一个在编程时可读或者可写的空间）；</li>
<li>在该指针没有被释放之前，其他任何的malloc调用都不会分配该空间或者该空间中的任何一部分；</li>
<li>malloc应该能很好处理，而且能够很快执行结束；</li>
<li>malloc需要提供重新设置大小或者释放的能力；</li>
</ul>
<p>malloc函数返回的指针在失败或者没有可用内存空间的情况下为NULL。</p>
<h2 id="二、堆和brk、sbrk系统调用"><a href="#二、堆和brk、sbrk系统调用" class="headerlink" title="二、堆和brk、sbrk系统调用"></a>二、堆和brk、sbrk系统调用</h2><p>在编写malloc之前，我们需要理解内存在多任务系统中是如何管理的。由于具体实现依赖于操作系统的实现细节，下面提到的内容更多是基于抽象的概念来进行阐述。</p>
<h3 id="进程的内存"><a href="#进程的内存" class="headerlink" title="进程的内存"></a>进程的内存</h3><p>每个进程都有它自己的虚拟地址空间，由MMU（内核）提供从虚拟地址空间到物理地址空间的转换。而该空间被分为多个部分，比如用户存储局部变量和volatile变量的栈，还有存储常量和全局变量的空间，以及用于存储程序数据，称为堆的散乱空间。</p>
<p>就虚拟地址而言，堆是一个连续的内存空间，它有三个划分的边界：起始点、最大值和称一个为<code>break</code>的终点。<br>最大值的管理可以调用<sys resource.h="">(原文中写成了sys/ressource.h)里面的<code>setrlimit</code>和<code>getrlimit</code>。break用于标记已映射内存空间的尾部，已映射内存空间指的是已经和实际内存一一对应起来的那部分虚拟地址空间（我的理解也就是对应的PTE里面有效位应该是为1，更或者TLB有对应的缓存的Page）。下图展示了内存组织的形式：</sys></p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/e913ee43a503e7e74a8b0cb0b6dacd19.png" alt="图一"></p>
<p>为了能够编写malloc函数，我们需要知道堆（heap）的开始位置和break的位置。当然我们还需要有能力去移动break，可以使用<code>brk</code>和<code>sbrk</code>系统调用来实现。</p>
<h3 id="brk和sbrk"><a href="#brk和sbrk" class="headerlink" title="brk和sbrk"></a>brk和sbrk</h3><p>我们可以在他们的手册（比如<code>man brk</code>）里面找到关于这些系统调用的描述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int brk(const void *addr);</div><div class="line">void *sbrk(int incr);</div></pre></td></tr></table></figure>
<p>brk函数通过传入的 <strong>addr</strong> 来设置brak的值，成功返回0，失败返回-1。使用全局<code>errno</code>来指明错误的原因（错误码对应的错误信息可以在\<sys errno.h\="">中查看）；</sys></p>
<p>而sbrk通过传入的增量（以字节为单位）来移动break的位置。基于不同系统的实现，其返回值可能会返回老的地址，也可能返回移动之后新的地址。<br>如果函数调用失败则返回-1，并且设置errno的值。在有些系统上sbrk支持传入一个负数用于释放那些已被映射的地址空间。</p>
<p>由于sbrk没有规范其返回值的意义，因此我们在 <strong>移动break的时候</strong> 不会去使用它返回值。但是我们可以使用特定情况下的sbrk，当调用sbrk其增量为0时，它的返回值就是实际的break地址（也就是老的地址和新的地址是同一个值）。因此sbrk用于获取堆的开始位置，也就是break的初始位置（上图中mapped Region长度为0的时候，也就是break的初始位置）。</p>
<p>因此我们将使用sbrk作为我们主要的工具。而我们的目的是在需要更多空间的情况下，我们要做的就是获取更多的资源来满足需求。</p>
<h3 id="未映射区域和无人区（No-Man’s-Land）"><a href="#未映射区域和无人区（No-Man’s-Land）" class="headerlink" title="未映射区域和无人区（No-Man’s Land）"></a>未映射区域和无人区（No-Man’s Land）</h3><p>我们看一下早期break标记已映射虚拟地址空间结束点的原理：在访问break之前的区域时会触发一个总线错误。在break点和最大限制（rlimit）之间的空间，系统（MMU和内核部分）是没有将物理内存和虚拟内存关联起来的。<br>如果知道一点关于虚拟内存的知识的话，应该清楚内存是通过页的方式来进行管理：物理内存和虚拟内存通常情况下以固定大小的页面进行组织，而页的大小在实际系统中通常为4096Byte（4KB）。因此break点可能并不是在整页的边界上。<br>说点题外话，在《现代操作系统》中介绍缺页处理程序是通过懒加载的方式来将物理内存和虚拟内存联系起来的。不考虑TLB的情况下，MMU是将VPN和PPN通过PTE来进行映射的</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/a4d659e75bd3db110cebfd1785fd6b3b.png" alt="图二"></p>
<p>图二相比于图一，我们增加了页面边界的表示。可以看到break并没有和页边界吻合对应起来。那么处于break和下一页边界之间的内存是什么状态呢？实际上，这一段空间是可用的，我们可以对这段空间进行读写操作。但问题在于我们没有办法知道下一页边界的任何头绪，它的实现是非常依赖于特定系统的，所以对于可移植性来说，不建议这么去做。</p>
<p>无人区（no-man’s land）可能是大部分BUG的根源：在堆外面进行错误地指针操作时，对于小规模测试大部分时间是可以成功的，但是在更大量数据的时候该操作就会出现失败。</p>
<h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>尽管在这个教程中我们并不会使用它，但是我们应该要注意到<code>mmap</code>系统调用。mmap大部分情况用于将文件和内存映射起来，但是它可以以匿名模式来实现malloc（在某些特定情况下）。<br>匿名模式下的mmap可以分配指定数量的内存（以页面大小为单位），<code>munmap</code>可以释放掉它们。使用这种方式实现的malloc相较于传统基于sbrk实现的malloc通过更加简单。 <strong>有些malloc使用mmap来实现大内存的分配</strong>（超过一页的大小）。<br>OpenBSD的做法是使用mmap并搭配一些奇技淫巧来增加安全性（页与页之间在分配的时候增加边框来进行分配。这里翻译不太顺，加边框的意思是在页的边界处使用额外的空间来达到整页使用的效果，想象卷积的时候增加padding来读取矩阵左上角的数据。如果翻译有问题请联系我）。</p>
<h2 id="三、Dummy-malloc"><a href="#三、Dummy-malloc" class="headerlink" title="三、Dummy malloc"></a>三、Dummy malloc</h2><p>首先，我们会使用sbrk来假设一个malloc。这个版本的malloc可能是最差的一个，甚至是最简单的一个。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>思想很简单，每次在调用malloc的时候，我们根据请求的空间大小来移动break，并且返回break之前的地址。这样做的确够简单，也够快。。。它仅仅只需要三行代码。但是这样的话我们没法去实现一个真实的free，当然realloc同样也不行。</p>
<p>这个版本的malloc会浪费很大一部分用过的内存块儿。在这儿只是出于科普的目的来指出如何sbrk系统调用，同样还将为malloc添加一些错误管理。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void *malloc(size_t size)&#123;</div><div class="line">    void *p;</div><div class="line">    p = sbrk(0);</div><div class="line">    /// 如果sbrk失败，返回NULL</div><div class="line">    if (-1 == sbrk(size)) &#123;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    return p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、组织堆（Organizing-the-Heap）"><a href="#四、组织堆（Organizing-the-Heap）" class="headerlink" title="四、组织堆（Organizing the Heap）"></a>四、组织堆（Organizing the Heap）</h2><p>在上一节我们写了第一个版本的malloc函数，但是并没有满足我们所有的需求（前面提到的free和realloc）。在这一节我们会尝试找到一个高效组织heap的方案，其中包括了malloc、free和realloc。</p>
<h3 id="我们需要什么"><a href="#我们需要什么" class="headerlink" title="我们需要什么"></a>我们需要什么</h3><p>如果我们在编程上下文之外思考问题，能推断出在解决这个问题的时候我们需要哪些信息吗？来看个比喻：你拥有一片农场，并将他们划分成很多块农田区域出来。将这些分块的农田出租出去。租户希望租用连续的，但不同长度的农田（这里只使用长度这个维度来划分，不考虑面积）。当租户使用完成之后将其租用农田归还，以便下次继续向外出租。</p>
<p>在农场边提供了用于行驶“可编程”车的道路：输入距离开始点的偏移量和目的地（目的地是一块不是一个点，所以这里表达的是该块的开始点位）。因此我们需要知道每一块的开始点在哪儿，而且当我们处于某一块的起始点的时候，我们还需要知道下一块的地址。</p>
<p>其中一个解决方案是在每一块农田的开头部分放入一个标签来标明下一块的地址（和当前块的大小以避免不必要的计算），当租户将农田资源归还的时候，在空闲区域添加一个标记。<br>好了，现在当租户想要固定大小农田的时候，我们可以带着他行驶在一处一处的标签那儿去。当我们发现一块标记为可用状态的农田，并且足够交付租户需求的时候，我们将该空闲标记从标签中移除。但是如果到达最后一块农田（也就是标签中没有下一个农田的地址），我们只需要到达该区域的末尾并添加一个新的标记。</p>
<p>现在我们将这个比喻转换到内存： <strong>我们需要在每一块开始部分存储额外的信息，包括每一个块的大小、下一个块的地址、以及是否空闲等信息</strong>。</p>
<h3 id="如何表示块信息"><a href="#如何表示块信息" class="headerlink" title="如何表示块信息"></a>如何表示块信息</h3><p>我们需要在每一个大块（chunk）的开始部分包含一小段（block）用于容纳额外信息，这一小段我们成为“meta-data”；该段至少包含了下一块的指针、用于空闲块的标记、以及该块数据大小。当然，该段信息是在mallc函数返回的指针之前。</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/4dcc638b63fdb4015bf534fd125b7f67.png" alt="图三"></p>
<p>图三展示了一个堆组织的例子，含有已分配段前面的meta-data。 <strong>每一个大块（chunk）由数据块和meta-data组成</strong>，malloc函数返回的指针在上图下面由红色标记出来，需要注意的是该指针是指向的数据块，并不是完整的大块（chunk，不是指向meta-data的起始点）。<br>现在我们需要怎样来把这些用C代码表示出来呢？这个看起来像传统的链表（实际上就是个链表）。我们编写一个链表类型，该类型成员用来表示所需的信息。我们使用 <strong>typedef</strong>来简化结构类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct s_block* t_block;</div><div class="line">struct s_block &#123;</div><div class="line">    size_t size;</div><div class="line">    t_block next;</div><div class="line">    int free;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在这儿看起来使用int型的free标记有点浪费空间，但由于struct默认是内存对齐的，因此它不会改变任何内容，稍后我们会看到如何缩小meta-data的大小。后续我们会看到malloc返回的地址必须是内存对齐的地址。<br>这儿出现最频繁的问题是：我们如何在没有malloc的情况下去创建一个struct？答案很简单，我们只需要知道struct实际上是什么。在内存中，struct只是将一块儿区域结合了起来，所以结构s_block仅仅只是12字节（对于32位整型来说）。size字段对应前面的4字节，接下来的4字节是指向下一个block的next指针，最后4个字节是一个整型的free标记。<br>当编译器遇到访问结构的域时（比如s.free或者p-&gt;free），将其转换为该结构的基地址加上该域之前长度的和。比如：p-&gt;free就是<em>((char </em>)p+8)，s.free就是<em>((char </em>)&amp;s+8)。我们所需要做的就是使用sbrk分配足够的空间块（包含了meta-data的大小和数据块的大小），并将老的break放入t_block类型的变量内：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/* Example of using t_block without malloc */</div><div class="line">t_block b;</div><div class="line">/// 使用b保存老的break</div><div class="line">b = sbrk(0);</div><div class="line">/// 添加所需空间</div><div class="line">/// size变量是malloc函数的参数</div><div class="line">sbrk(sizeof(struct s_block)+size);</div><div class="line">b-&gt;size = size;</div></pre></td></tr></table></figure>
<h2 id="五、首次适配策略的malloc"><a href="#五、首次适配策略的malloc" class="headerlink" title="五、首次适配策略的malloc"></a>五、首次适配策略的malloc</h2><p>“首次适配”是我采用《深入了解计算计算机系统》的翻译词。在这一节我们将会实现经典的首次适配策略的malloc函数。首次适配算法很简单：我们只要找到了一个空间大小足够满足请求分配的时候就停止遍历其他的块（chunk）。</p>
<h3 id="指针对齐"><a href="#指针对齐" class="headerlink" title="指针对齐"></a>指针对齐</h3><p>通常情况需要将指针和整型大小对齐（即 <strong>指针大小就是一个整型的大小</strong>）。此处我们只考虑32位的情况，所以指针是4的倍数（32bit = 4 byte，那当然是4的倍数）。因此我们的meta-data已对齐，我们仅仅需要做的只是去对齐数据块的大小。<br>那我们该怎么做呢？这儿有几种方式，最有效的方式是使用算术技巧添加预处理宏。<br>首先，算术技巧：给定任意正整数除以4，然后再将它乘以4得到最接近4的倍数。因此为了获得最接近且大于它时，只需要乘以4，然后在此基础上加4。这种方式的确很简单，但它没办法很好地工作在本身就是4的倍数上，结果会变成4的倍数的下一个（由于加了4）。<br>再来使用一次算术，假设x是整型，并且满足：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/03047c2295928a22751f7f623df5de81.gif" alt=""></p>
<p>1）、如果x是4的倍数，那么q = 0，并且满足：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/b6b9a98c897b1bee7c0be1bfd3a9f296.gif" alt=""></p>
<p>运用上面说的，先除以4，然后乘以4，最后再加上4：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/312850422499afd4c08b0d7612f0cda0.png" alt=""> </p>
<p>在这个推算过程是将上面x-1的表示用p来进行表示。这里需要注意一点的是，在整型除法中3/4结果为0；</p>
<p>2）、如果x不是4的倍数，此时q != 0：</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/39336c86a48c286012ed683927a75edb.png" alt=""></p>
<p>同样运用上面的，先除以4，然后乘以4，最后再加上4：  </p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/e34ae3f9de26312a6bb52d04f979aef2.png" alt=""></p>
<p>因此，公式 <strong>_(x-1)/4 * 4 + 4_</strong> 的结果是最接近并且大于或者等于4的倍数。</p>
<p>那么我们在C里面该怎么做呢？首先，注意到除法和乘法我们可以使用右移和左移移位操作符来解决（&gt;&gt;和&lt;&lt;），它们相对于简单乘法要快很多。因此我们的公式在C里面可以写成这样 <code>((x-1)&gt;&gt;2)&lt;&lt;2+4</code>，但是在宏里面需要使用额外的括号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define align4(x) (((((x)-1)&gt;&gt;2)&lt;&lt;2)+4)</div></pre></td></tr></table></figure>
<h3 id="寻找块：首次适配算法"><a href="#寻找块：首次适配算法" class="headerlink" title="寻找块：首次适配算法"></a>寻找块：首次适配算法</h3><p>找到一个足够长度的块非常简单：从堆的起始点开始（以某种方式会保存在代码，后续会看到）测试当前块，如果该块成功适配则返回该块的头部，否则继续向下一块寻找，直到最后一个块的头部。<br>这里唯一的技巧是需要保存上一次遍历过的块，所以当没有找到合适的块的时候，malloc函数可以很轻松地去扩展堆的尾部（长度）。代码逻辑很直接，<code>base</code>是一个全局指针变量，指向堆的开始位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">t_block find_block(t_block *last, size_t size) &#123;</div><div class="line">    t_block b = base;</div><div class="line">    while (b &amp;&amp; !(b-&gt;free &amp;&amp; b-&gt;size &gt;= size)) &#123;</div><div class="line">        *last = b;</div><div class="line">        b = b-&gt;next;</div><div class="line">    &#125;</div><div class="line">    return b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数会返回一个合适的块，或者返回NULL（在没有找到的情况下）。函数执行后，last指针指向上一次访问过的块。</p>
<h3 id="扩展堆"><a href="#扩展堆" class="headerlink" title="扩展堆"></a>扩展堆</h3><p>现在，并不能总是找到合适的块，有时候（特别是最开始使用malloc函数）需要去扩展堆。<br>实现同样很简单：移动break，并初始化新的block。当然还需要更新堆中上一个块的next域。<br>在后续开发过程中需要知道<code>struct s_block</code>的大小，所以在这儿定义一个宏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define BLOCK_SZIE sizeof(struct s_block)</div></pre></td></tr></table></figure>
<p>下面代码没有什么可惊讶的，仅仅只是当sbrk失败之后返回NULL（没必要想这么做的原因）。<br>注意，前面提到过我们不能确信sbrk函数返回的上一个break，因此我们首先保存break值，然后移动它。我们需要使用<code>last</code>和<code>last-&gt;size</code>来进行计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">t_block extend_heap(t_block last, size_t size)&#123;</div><div class="line">    t_block b;</div><div class="line">    b = sbrk(0);</div><div class="line">    if ((void *)-1 == sbrk(BLOCK_SZIE+size)) &#123;</div><div class="line">        /// sbrk失败</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    b-&gt;size = size;</div><div class="line">    b-&gt;next = NULL;</div><div class="line">    if (last) &#123;</div><div class="line">        last-&gt;next = b;</div><div class="line">    &#125;</div><div class="line">    b-&gt;free = 0;</div><div class="line">    return b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拆分块（block）"><a href="#拆分块（block）" class="headerlink" title="拆分块（block）"></a>拆分块（block）</h3><p>注意到我们寻找首个可用的块，但并没有管它的大小（足够大）。假想一下，如果只需要2byte的大小，但是找到的块是256byte的，如果这样做会丢失很大一部分的空间。第一个解决方案是拆分块：当一个块足够宽到请求的大小加上一个新块大小（至少BLOCK_SIZE+4），那么向链表中插入一个新块。</p>
<p><img src="https://images.xiaozhuanlan.com/photo/2019/edbffe29859a9c3d269e1c93d92a508a.png" alt=""></p>
<p>下面的函数（split_block）会在空间可用的时候被调用。提供的大小(参数size)必须要是对齐的。<br>在这个函数中我们会做一些关于指针运算，为了防止错误，我们将使用一些小技巧来确保我们所有的操作都以一个字节的精度完成（需要注意一下p+1是依赖于p的类型的，也就是不同类型指针加一的步长不一样）。<br>我们只需要在<strong>struct s_block</strong>中添加一个字符数组的域。结构体中添加数组很简单：数组直接定义在结构的内存块中，因此数组指针的作用是指向meta-data的尾部。C禁止长度为零的数组，那么我们就定义个一字节长的数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct s_block &#123;</div><div class="line">	size_t size;</div><div class="line">	t_block next;</div><div class="line">	int free;</div><div class="line">	char data[1];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>并且需要更新一下宏BLOCK_SIZE的值，由于扩展了s_block的data，如果还是使用sizeof的话将会把data字段也算进去。所以这里需要将BLOCK_SIZE固定位12字节（注意，现在说的32位整型）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define BLOCK_SZIE 12</div></pre></td></tr></table></figure>
<p>这里我说一下这里加了一个data域，为什么BLOCK_SIZE要设置为12，不随sizeof(struct s_block)呢？<br>前面也说过结构只是把内存里面的各个字节赋予了含义而已，我们只是想把12字节认为是meta-data，而并不是硬生生得塞了一块数据到meta-data和数据块之间。<br>加这个域只是为了我们在拆分block的时候方便，不加这个域同样也是可以操作的。</p>
<p>增加了这个扩展之后，并不需要明确为之前 <strong>extend_heap</strong>函数适配新增的data域。函数<code>split_block</code>：会根据传入的参数来拆分为所需大小的块。图四展示该函数的相关操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/// 参数s必须要对齐的</div><div class="line">void split_block(t_block b, size_t s) &#123;</div><div class="line">    if (!b) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    t_block new;</div><div class="line">    new = b-&gt;data + s;</div><div class="line">    new-&gt;size = b-&gt;size - s - BLOCK_SZIE;</div><div class="line">    new-&gt;free = 1;</div><div class="line">    new-&gt;next = b-&gt;next;</div><div class="line">    </div><div class="line">    b-&gt;size = s;</div><div class="line">    b-&gt;next = new;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意代码<code>b-&gt;data+s</code>，由于data域时char[]类型，所以我们能够精确地控制是以字节的步长进行增加。</p>
<h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><p>现在我们可以开始写malloc函数了，它主要是将前面讲到的函数封装起来。我们必须要将请求的size对齐，并测试是否是第一次调用malloc函数，以及已告知其余所需的条件。<br>在上一节的<code>find_block</code>函数中使用了一个全局变量 <strong>base</strong>，下面是该变量的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void *base = NULL;</div></pre></td></tr></table></figure>
<p>它是一个void *类型的指针，并初始化为NULL。在malloc中我们首先要做的就是判断base是否为NULL？如果为NULL那么就表示第一次调用malloc函数，否则就是用前面提到的相关算法。</p>
<p>malloc函数需要具备下面几行中的特性：</p>
<ul>
<li>首先需要对齐请求的大小；</li>
<li>当base已经初始化：<ul>
<li>搜索足够大小的空闲块；</li>
<li>如果找到该块的情况下：<ul>
<li>尝试着去拆分该块（请求的大小和块的大小足够存储meta-data和最小块数据，比如4byte）；</li>
<li>标记该块为已是用(b-&gt;free = 0)；</li>
</ul>
</li>
<li>否则：扩展堆；注意在<code>find_block</code>函数中使用的last指针，它用于记录上一次访问过的块（chunk），因此当我们在扩展块的时候就不用再重新去遍历整个链表。</li>
</ul>
</li>
<li>否则：扩展堆（空指针）。注意此时工作在<code>extend_heap</code>函数时last=NULL。</li>
</ul>
<p>也需要注意在每次失败之后，我们按照预期指定的malloc函数返回NULL。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">void *malloc(size_t size)&#123;</div><div class="line">    t_block last,b;</div><div class="line">    size_t align_size = align4(size);</div><div class="line">    if (base) &#123;</div><div class="line">        last = base;</div><div class="line">        if ((b = find_block(&amp;last, align_size))) &#123;</div><div class="line">            if (b-&gt;size - align_size &gt;= (BLOCK_SZIE + 4)) &#123;/// meta-data + 4</div><div class="line">                split_block(b, align_size);</div><div class="line">            &#125;</div><div class="line">            b-&gt;free = 0;</div><div class="line">        &#125;else&#123;///查找heap失败，extend heap</div><div class="line">            b = extend_heap(base, align_size);</div><div class="line">            if (!b) &#123;</div><div class="line">                return NULL;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;///首次调用malloc函数，extend heap</div><div class="line">        /// base = null;</div><div class="line">        b = extend_heap(base, align_size);</div><div class="line">        if (!b) &#123;</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">        base = b;</div><div class="line">    &#125;</div><div class="line">    return b-&gt;data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、calloc-free和realloc函数"><a href="#六、calloc-free和realloc函数" class="headerlink" title="六、calloc, free和realloc函数"></a>六、calloc, free和realloc函数</h2><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><p>calloc函数：</p>
<ul>
<li>首先调用malloc函数，并分配正确的大小；</li>
<li>将块里面的每一个字节设置为0；</li>
</ul>
<p>这里使用一个小技巧：chunk中数据块的大小总是4的倍数，所以我们以4字节的步长进行迭代。因此我们把new指针当做无符号整型的数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void *calloc(size_t number, size_t size) &#123;</div><div class="line">    size_t *new;</div><div class="line">    size_t s4,i;</div><div class="line">    new = malloc(number*size);</div><div class="line">    if (new) &#123;</div><div class="line">        s4 = align4(number*size)&lt;&lt;2;</div><div class="line">        for (i = 0; i &lt; s4; i++) &#123;</div><div class="line">            new[i] = 0;/// new为size_t，所以这里+1的步长为size_t的字节数，在32位整型下面，size_t为4字节</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h3><p>注：在下文提到的块在原文中的描述如果没有特殊注明均为chunk，而非在malloc一节大量使用的block。</p>
<p>快速实现free是很简单的，但简单并不意味着很方便就能完成。我们有两个问题：找到被释放的块，并且防止出现空间碎片。</p>
<h4 id="碎片：malloc函数遗留问题"><a href="#碎片：malloc函数遗留问题" class="headerlink" title="碎片：malloc函数遗留问题"></a>碎片：malloc函数遗留问题</h4><p>malloc函数的一个重大问题是碎片：在多次使用malloc和free之后，堆被划分为许多块，这些块已经小到足够满足大的malloc，直到整个可用空间使用。这就是空间碎片的问题。在这个算法中我们虽然没有办法避免出现额外的碎片，但可以避免其他来源的碎片。<br>当我们选择的空闲块足以容纳请求分配的量和另外的块时，我们会拆分当前块。在提供更好地内存使用率（新的块为空闲状态以备后用）的同时也引入了更多的碎片。<br>解决碎片化的一个问题就是空闲块。当我们释放一个块时，如果临接的块同样是空闲状态时，我们合并他们成一个更大的块。在这儿我们所有需要的就是去测试前面块和后面块的状态。那么如何去获取之前的块（block）呢？下面有几个解决方案：</p>
<ul>
<li>从头开始搜索，但非常慢（特别是我们已经搜了一些空闲块之后，再从头搜索）；</li>
<li>当我们搜索到当前块的时候，使用一个指针指向上一个访问的块；</li>
<li>双链表；</li>
</ul>
<p>我们选择最后这个解决方案，该方案非常简单地去跟踪目标块。所以我们再一次去修改<code>struct s_block</code>（第一次修改是malloc的时候增加的data成员）。但由于我们还有另外一个待修改的地方（下一节），因此先不急着做修改。</p>
<p>所以我们现在要做的就是合并，我们先写一个简单的合并函数来合并块。在下面的代码中我们会用一个 <strong>prev</strong>域来作为直接前驱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t_block fusion(t_block b) &#123;</div><div class="line">    if (b-&gt;next &amp;&amp; b-&gt;next-&gt;free) &#123;</div><div class="line">        b-&gt;size += BLOCK_SZIE + b-&gt;next-&gt;size;</div><div class="line">        b-&gt;next = b-&gt;next-&gt;next;</div><div class="line">        if (b-&gt;next) &#123;</div><div class="line">            b-&gt;next-&gt;prev = b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fusion函数很直截了当：如果下一个块是空闲块，那么就将当前块的size和下一个块的size，以及meta-data的大小。然后将next域指向当前变量后继的后继（b-&gt;next-&gt;next），此时如果当前的后继存在，那么久更新该后继的直接前驱（b-&gt;next-&gt;prev）。</p>
<h4 id="找到正确的块"><a href="#找到正确的块" class="headerlink" title="找到正确的块"></a>找到正确的块</h4><p>关于其余释放带来的问题是如何高效地寻找由malloc函数返回的正确的块。实际上，这儿存在几个问题：</p>
<ul>
<li>验证输入的指针（它是否真的是一个malloc指针）；</li>
<li>找到meta-data指针；</li>
</ul>
<p>我们可以通过quick range test来消除无用的指针：如果该指针在堆外，那么它肯定不是一个有效指针。那么剩下的case和上一个case相关，我们如何确定该指针是由malloc函数获得？<br>其中一个解决方案是在结构内使用一个魔数（magic number）。相对于魔数更优的一个方案是我们可以使用一个指针指向它自己。解释一下：我们有一个<code>ptr</code>域指向<code>data</code>域，如果b-&gt;ptr == b-&gt;data的时候，那么该指针大概率是有效块（block）。<br>下面是扩展之后的结构，以及访问和校验给定的指针是否为相应的块（block）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">typedef struct s_block* t_block;</div><div class="line">struct s_block &#123;</div><div class="line">    size_t size;</div><div class="line">    t_block next;/// 后继</div><div class="line">    t_block prev;/// 前驱</div><div class="line">    int free;</div><div class="line">    void *ptr;</div><div class="line">    char data[1];</div><div class="line">&#125;;</div><div class="line"></div><div class="line">t_block get_block(void *p)&#123;</div><div class="line">    char *tmp;</div><div class="line">    tmp = p;</div><div class="line">    tmp = tmp-BLOCK_SZIE;</div><div class="line">    p = tmp;</div><div class="line">    return p;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int vaild_addr(void *p) &#123;</div><div class="line">    if (base) &#123;</div><div class="line">        if (p &gt; base &amp;&amp; p &lt; sbrk(0)) &#123;/// sbrk(0)是获取当前break线，结合前面提到的图</div><div class="line">            return p == (get_block(p)-&gt;ptr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现free函数"><a href="#实现free函数" class="headerlink" title="实现free函数"></a>实现free函数</h4><p>free函数到现在也渐渐揭开了神秘面纱：验证指针的正确性，并找到相应的块，然后将其标记为空闲块，最后如果有必要就进行合并操作。<br>释放内存时，当我们处于堆的尾部，我们需要调用一下<strong>brk</strong>函数来调整break先到当前块的位置处。<br>下面的代码展示具体实现，大致的逻辑如下：</p>
<ul>
<li>如果指针有效：<ul>
<li>获取block块的地址；</li>
<li>标记为空闲状态；</li>
<li>如果当前节点的直接前驱是空闲的，那么就合并两个块；</li>
<li>继续尝试合并直接后继块；</li>
<li>如果当前处于最后一个块，那么我们释放内存；</li>
<li>如果这儿没有更多的块了，那我们重置为原始状态（base设置为NULL）；</li>
</ul>
</li>
<li>如果该指针不是有效指针的话，我们就什么也不做；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void free(void *ptr) &#123;</div><div class="line">    t_block b;</div><div class="line">    if (vaild_addr(ptr)) &#123;</div><div class="line">        b = get_block(ptr);</div><div class="line">        b-&gt;free = 1;</div><div class="line">        /// 如果可以合并直接前驱</div><div class="line">        if (b-&gt;prev &amp;&amp; b-&gt;prev-&gt;free) &#123;</div><div class="line">            b = fusion(b-&gt;prev);</div><div class="line">        &#125;</div><div class="line">        /// 合并直接后继</div><div class="line">        if (b-&gt;next) &#123;</div><div class="line">            fusion(b);</div><div class="line">        &#125;else&#123;</div><div class="line">            if (b-&gt;prev) &#123;</div><div class="line">                b-&gt;prev-&gt;next = NULL;</div><div class="line">            &#125;else&#123;</div><div class="line">                base = NULL;</div><div class="line">            &#125;</div><div class="line">            brk(0);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用realloc重置块的大小"><a href="#使用realloc重置块的大小" class="headerlink" title="使用realloc重置块的大小"></a>使用realloc重置块的大小</h3><p>realloc函数和calloc函数差不多一样直接。基本上我们只需要一个内存拷贝的操作，在这里我们不使用<string.h>里面的<code>memcpy</code>我们可以写一个更好的（大小以块为单位，并且已经对齐）。拷贝函数如下：</string.h></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void copy_block(t_block src, t_block dst) &#123;</div><div class="line">    int *sdata;</div><div class="line">    int *ddata;</div><div class="line">    size_t i;</div><div class="line">    sdata = src-&gt;ptr;</div><div class="line">    ddata = dst-&gt;ptr;</div><div class="line">    for (i = 0; src-&gt;size &gt; 4*i &amp;&amp; dst-&gt;size &gt; 4*i; i++) &#123;</div><div class="line">        ddata[i] = sdata[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照下面的做法可以实现一个非常幼稚（但是能工作）的realloc函数：</p>
<ul>
<li>使用malloc根据指定的大小分噢诶一个新块；</li>
<li>将数据从旧内存数据复制到新内存地址处；</li>
<li>释放旧内存中的数据；</li>
<li>返回指向内内存地址处的指针；</li>
</ul>
<p>当然我们还想做一点事儿让realloc函数更高效一点。当我们有足够的空间的时候，此时并不需要去分配新的空间。因此不同点有：</p>
<ul>
<li>如果大小未发生变化，或者额外可用大小足够使用，那么我们什么也不做；</li>
<li>如果需要收缩块，那么拆分该块；</li>
<li>如果下一个是空闲块而且提供了足够的空间，如果需要的话我们可以合并或者拆分这些块；</li>
</ul>
<p>下面是realloc函数的具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">void *realloc(void *p, size_t size) &#123;</div><div class="line">    if (NULL == p) &#123;</div><div class="line">        return malloc(size);</div><div class="line">    &#125;</div><div class="line">    size_t s;</div><div class="line">    t_block b, new;</div><div class="line">    void *newp;</div><div class="line">    if (vaild_addr(p)) &#123;</div><div class="line">        s = align4(size);</div><div class="line">        b = get_block(p);</div><div class="line">        if (b-&gt;size &gt; s) &#123;</div><div class="line">            if (b-&gt;size &gt;= s+BLOCK_SZIE+4) &#123;</div><div class="line">                split_block(b, s);</div><div class="line">            &#125;</div><div class="line">        &#125;else&#123;</div><div class="line">            if (b-&gt;next &amp;&amp; b-&gt;next-&gt;free &amp;&amp; (b-&gt;next-&gt;size + b-&gt;size + BLOCK_SZIE) &gt;= s) &#123;</div><div class="line">                fusion(b);</div><div class="line">                if (b-&gt;size - s &gt; BLOCK_SZIE+4) &#123;</div><div class="line">                    split_block(b, s);</div><div class="line">                &#125;</div><div class="line">            &#125;else&#123;</div><div class="line">                newp = malloc(s);</div><div class="line">                if (!newp) &#123;</div><div class="line">                    return NULL;</div><div class="line">                &#125;else&#123;</div><div class="line">                    new = get_block(newp);</div><div class="line">                    copy_block(b, new);</div><div class="line">                    free(p);</div><div class="line">                    return newp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘了realloc(NULL, s)是可以直接提到malloc(s)的。</p>
<h4 id="FreeBSD中reallocf函数"><a href="#FreeBSD中reallocf函数" class="headerlink" title="FreeBSD中reallocf函数"></a>FreeBSD中reallocf函数</h4><p>FreeBSD提供了另外一个realloc函数的实现：<code>reallocf</code>，它会在任何情况下释放输入的指针（即使是再分配失败之后）。我们一样会调用realloc函数，但是只有我们在获得空的指针之后才会调用free函数。下面是具体的实现部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void *reallocf(void *p, size_t size) &#123;</div><div class="line">    void *ptr = realloc(p, size);</div><div class="line">    if (!p) &#123;</div><div class="line">        free(p);</div><div class="line">    &#125;</div><div class="line">    return ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这儿基本翻译完成，如有错误请及时来联系我，谢谢❤️</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章是对&lt;a href=&quot;https://wiki-prog.infoprepa.epita.fr/images/0/04/Malloc
    
    </summary>
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>细看objc-weak源码</title>
    <link href="http://yoursite.com/2018/05/18/source_code_objc_weak_t/"/>
    <id>http://yoursite.com/2018/05/18/source_code_objc_weak_t/</id>
    <published>2018-05-18T15:55:53.000Z</published>
    <updated>2019-10-28T04:47:08.088Z</updated>
    
    <content type="html"><![CDATA[<p>本文不看其他，只专注于weak的内部结构实现细节和源码解读，看了网上很多的文章都是贴上一篇<a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">open source</a>里面的代码，并没有对实现细节进行解释。所以在这篇文章中，主要分为<br>weak_entry_t、weak_table_t的源码解析，weak_entry_t和weak_table_t的相互关系，以及对应的操作函数。</p>
<blockquote>
<p>下文的主要是基于两个对象来说的，一个是被引用的对象，一个是弱引用变量（也就是源代码中大量出现的指向指针的指针）。</p>
</blockquote>
<p> 我说一下我源码阅读的习惯，先把目光放在头文件中，因为头文件能够给我们一个整体基础结构。弄清楚具体的结构之后，然后再跳到实现文件中去看具体的实现细节。<br>先交代一下我的编译环境和源代码版本：</p>
<blockquote>
<p>编译环境：<br>Apple LLVM version 9.1.0 (clang-902.0.39.1)<br>Target: x86_64-apple-darwin17.5.0<br>Thread model: posix<br>InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin<br>源代码版本：<br> <a href="https://opensource.apple.com/tarballs/objc4/objc4-723.tar.gz" target="_blank" rel="external">objc4-723</a> </p>
</blockquote>
<h2 id="头文件类关系和结构分析"><a href="#头文件类关系和结构分析" class="headerlink" title="头文件类关系和结构分析"></a>头文件类关系和结构分析</h2><p>我先根据头文件画一个基本的UML类图：</p>
<p><img src="/uploads/objc_weak_sroucecode/1.png" alt="UML类图"></p>
<h4 id="DisguisedPtr模板类"><a href="#DisguisedPtr模板类" class="headerlink" title="DisguisedPtr模板类"></a>DisguisedPtr模板类</h4><p>先将视线放在weak_entry_t上面，结构weak_entry_t的第一个成员变量是referent，它是一个<a href="https://opensource.apple.com/source/objc4/objc4-723/runtime/objc-private.h" target="_blank" rel="external">DisguisedPtr</a>类模板实例化之后的变量（点开前面的链接吧，不然我讲不清楚，不然你会骂我的），这个成员其实就是保存被引用的对象。<br>DisguisedPtr类里面看起来这个类并不复杂，有一个uintptr_t类型的成员变量，由此DisguisedPtr类的对象所占用的内存空间大小也应该为8字节。<br>public下面主要是构造函数加三大函数中的两个：重载复制运算符，赋值构造函数；由于该类里面并没有涉及到动态new指针变量，所以其析构函数便使用了默认析构函数。除此之外还重载一些其他的操作符。主要看一下私有的两个成员函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static uintptr_t disguise(T* ptr) &#123;</div><div class="line">  return -(uintptr_t)ptr;</div><div class="line">&#125;</div><div class="line">static T* undisguise(uintptr_t val) &#123;</div><div class="line">  return (T*)-val;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>disguise</code>函数是将指针变量强转为uintptr_t的整形变量，具体怎么伪装呢？就是把该指针指向的内存地址（16进制数据比如：0x7ffeefbff4e8）强制转换为无符号长整型的十进制数据。由于其类型是无符号长整型，因此取负数是数据溢出之后取该类型取值范围内较大的长整型值达到伪装的效果（也就是不好去找到原内存地址）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">unsigned long ul_val = 2;</div><div class="line">unsigned long*bitl = &amp;ul_val;</div><div class="line">cout&lt;&lt;&quot;ul_val address: &quot;&lt;&lt;bitl&lt;&lt;endl;///0x7ffeefbff4e8</div><div class="line">///140732920755432 取负数 -&gt; 18446744069408184208</div><div class="line">cout&lt;&lt;&quot;disguise: &quot;&lt;&lt;disguise(bitl)&lt;&lt;endl;</div><div class="line">cout&lt;&lt;&quot;undisguise: &quot;&lt;&lt;undisguise(*bitl)&lt;&lt;endl;/// 0xfffffffffffffffe 1111...1110</div></pre></td></tr></table></figure>
<p>其作用在源文件的注释中也说了，我通俗总结是：对那些比如leak这种内存检测工具进行伪装，然后这些检测工具可能就不好去跟踪被引用的对象。</p>
<h4 id="weak-entry-t"><a href="#weak-entry-t" class="headerlink" title="weak_entry_t"></a>weak_entry_t</h4><p>现在来看一下union的具体内存分布细节，怎么来解释这个问题呢？奉上<a href="https://opensource.apple.com/source/objc4/objc4-723/runtime/objc-weak.h.auto.html" target="_blank" rel="external">objc-weak.h</a>的源码，打开源码配合文章来看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">union &#123;</div><div class="line">        struct &#123;/// 为了方便说明问题，我将该结构取名为：struct1</div><div class="line">            weak_referrer_t *referrers;</div><div class="line">            uintptr_t        out_of_line : 2;</div><div class="line">            uintptr_t        num_refs : PTR_MINUS_1;/// num_refs记录的是实际引用数量</div><div class="line">            uintptr_t        mask;/// 记录当前referrers数组容器的大小</div><div class="line">            uintptr_t        max_hash_displacement;/// 根据hash-key寻找index的最大移动数，这个在后面的append_referrer会讲</div><div class="line">        &#125;;</div><div class="line">        struct &#123;/// 为了方便说明问题，我将该结构取名为：struct2</div><div class="line">            // out_of_line=0 is LSB of one of these (don&apos;t care which)</div><div class="line">            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];</div><div class="line">        &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>首先要有一个概念，union里面的多个成员是共享同一且相同大小的内存空间，在strcut1结构成员中算出其总共所占内存大小为64*4，也就是32个字节。其中我的机器是64位机，我的编译器对于指针类型所占内存大小的ABI实现为64位，而无符号长整型占用的内存大小也为64位。多说一句，在C++中结构和类的内存存储区域好像都是在堆上面，由低地址向高地址生长。<br>基于此来画出inline_referrers和上面第一个结构大致的内存分布样式（关于inline_referrers的元素类型模板类DisguisedPtr所占内存大小在上面讲DisguisedPtr类时提到了）：<br><img src="/uploads/objc_weak_sroucecode/2.png" alt=""><br>在源码中注释也说了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// out_of_line_ness field overlaps with the low two bits of inline_referrers[1].</div><div class="line">// inline_referrers[1] is a DisguisedPtr of a pointer-aligned address.</div><div class="line">// The low two bits of a pointer-aligned DisguisedPtr will always be 0b00</div><div class="line">// (disguised nil or 0x80..00) or 0b11 (any other address).</div><div class="line">// Therefore out_of_line_ness == 0b10 is used to mark the out-of-line state.</div></pre></td></tr></table></figure>
<p>out_of_line_ness是和inline_referrers[1]的低2位是等同的，<code>out_of_line_ness</code>和<code>num_refs</code>使用了位段，一共占用64位（2位和62位）。由于此时已经是结构内存对齐了，所以下一个结构成员mask的内存地址就刚好换行。<br>上面还提到的0x0b10，它应该是经过DisguisedPtr伪装之后得到的值，并不是实际的等于0b10，一个只占两位内存空间的，怎么也存储不了16位的数据。<strong>out_of_line_ness == 0b10</strong>是标记使用out-of-line的状态。关于这个0b10我没有想清楚它的由来，有知道的同学麻烦告知于我！！！<br>继续来看该结构的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">weak_entry_t(objc_object *newReferent, objc_object **newReferrer)</div><div class="line">        : referent(newReferent)</div><div class="line">&#123;</div><div class="line">        inline_referrers[0] = newReferrer;</div><div class="line">        for (int i = 1; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class="line">            inline_referrers[i] = nil;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在创建weak_entry_t实例的时候，默认是使用inline_referrers的方式来管理对象引用的，并把其余的位上的数据清空。<br><code>out_of_line_ness</code>用来判断使用out_of_line的方式来进行引用管理，这个out_of_line_ness的值主要是依据于被引用的对象，其引用变量的个数决定的，具体的逻辑在下文会讲到。<br>再看看struct1的referrers成员，看起来是一个指针变量，更具体的说是存储的引用变量数组的起始地址，而这些引用变量指针指向的地址被DisguisedPtr进行了伪装。</p>
<p>到这里我把weak_entry_t的内存分布讲了一遍（具体的含义在上面代码块中的注释里），然后下面来看一下<code>weak_table_t</code>。</p>
<h4 id="weak-table-t"><a href="#weak-table-t" class="headerlink" title="weak_table_t"></a>weak_table_t</h4><p><code>weak_table_t</code>在头文件中看不出什么特别的内容，但是从源码中可以看出，应该是一个基于C的结构，没有使用C++中结构独有的特性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct weak_table_t &#123;</div><div class="line">    weak_entry_t *weak_entries;</div><div class="line">    size_t    num_entries;/// 和weak_entry_t的num_refs概念类似</div><div class="line">    uintptr_t mask;///和 weak_entry_t的mask概念类似</div><div class="line">    uintptr_t max_hash_displacement;/// 和weak_entry_t的max_hash_displacement概念类似</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样的，其weak_entries成员也应该是一个数组，存储着weak_entry_t变量的指针。针对该结构头文件中公开的操作函数有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">id weak_register_no_lock(weak_table_t *weak_table, id referent, </div><div class="line">                         id *referrer, bool crashIfDeallocating);</div><div class="line">void weak_unregister_no_lock(weak_table_t *weak_table, id referent, id *referrer);</div><div class="line">#if DEBUG</div><div class="line">bool weak_is_registered_no_lock(weak_table_t *weak_table, id referent);</div><div class="line">#endif</div><div class="line">void weak_clear_no_lock(weak_table_t *weak_table, id referent);</div></pre></td></tr></table></figure>
<p>这看不了什么具体的内容，所以针对头文件的解读就到这里。下面去实现文件中看看具体的实现，看看网上为什么都在说的基于Hash表的一个存储结构。<a href="https://opensource.apple.com/source/objc4/objc4-723/runtime/objc-weak.mm.auto.html" target="_blank" rel="external">源码地址</a>，老规矩，打开这个网页对照着源码来看。</p>
<h2 id="objc-weak具体实现细节"><a href="#objc-weak具体实现细节" class="headerlink" title="objc-weak具体实现细节"></a>objc-weak具体实现细节</h2><p>首先看两个hash函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static inline uintptr_t hash_pointer(objc_object *key);</div><div class="line">static inline uintptr_t w_hash_pointer(objc_object **key);</div></pre></td></tr></table></figure>
<p>它们会根据对象的指针（不管是指针还是指向指针的指针）调用一个fast-hash函数来生成一个key，其原理是基于<a href="http://locklessinc.com/articles/fast_hash/" target="_blank" rel="external">fast_hash</a>，而这个key的作用目前我们无从得知。</p>
<h4 id="grow-refs-and-insert函数"><a href="#grow-refs-and-insert函数" class="headerlink" title="grow_refs_and_insert函数"></a>grow_refs_and_insert函数</h4><p>继续看源码，下面主要来看看一个很重要的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">__attribute__((noinline, used))</div><div class="line">static void grow_refs_and_insert(weak_entry_t *entry, </div><div class="line">                                 objc_object **new_referrer)</div><div class="line">&#123;</div><div class="line">    assert(entry-&gt;out_of_line);</div><div class="line">    /**</div><div class="line">      * #define TABLE_SIZE(entry) (entry-&gt;mask ? entry-&gt;mask + 1 : 0)</div><div class="line">      * entry-&gt;mask用来记录referrers的数量</div><div class="line">      */</div><div class="line">    size_t old_size = TABLE_SIZE(entry);</div><div class="line">    size_t new_size = old_size ? old_size * 2 : 8;/// 增长一倍的大小</div><div class="line"></div><div class="line">    size_t num_refs = entry-&gt;num_refs;</div><div class="line">    weak_referrer_t *old_refs = entry-&gt;referrers;</div><div class="line">    entry-&gt;mask = new_size - 1;</div><div class="line">    </div><div class="line">    entry-&gt;referrers = (weak_referrer_t *)</div><div class="line">        _calloc_internal(TABLE_SIZE(entry), sizeof(weak_referrer_t));</div><div class="line">    entry-&gt;num_refs = 0;</div><div class="line">    entry-&gt;max_hash_displacement = 0;</div><div class="line">    /// 开始处理数据</div><div class="line">    for (size_t i = 0; i &lt; old_size &amp;&amp; num_refs &gt; 0; i++) &#123;</div><div class="line">        if (old_refs[i] != nil) &#123;</div><div class="line">            append_referrer(entry, old_refs[i]);/// 把老数据复制进新的entry里面</div><div class="line">            num_refs--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // Insert</div><div class="line">    append_referrer(entry, new_referrer);/// 给entry插入新的数据</div><div class="line">    if (old_refs) _free_internal(old_refs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于基于C的数组其实都是定长的，为了能够动态地增加新元素就需要不断地去申请新的内存空间，并且还要是连续的内存地址（要是不连续的地址就去使用链表的方式，但是链表的索引明显弱于数组的）。正是因为新动态申请的连续内存空间，这就需要把老数据复制过来，并把需要新增的数据也追加进去，最后释放掉原内存空间：<br><img src="/uploads/objc_weak_sroucecode/3.png" alt=""><br>它其实和C++里面的动态数组的原理一样，为了不频繁地去申请（<code>calloc</code>）新的空间和频繁地数据移动。所以每次2倍增长来增加weak_entry_t的长度。为什么说是C++里面动态数组的做法，在《数据结构与算法实现-C++描述》里有提及这些内容。</p>
<h4 id="append-referrer和remove-referrer"><a href="#append-referrer和remove-referrer" class="headerlink" title="append_referrer和remove_referrer"></a>append_referrer和remove_referrer</h4><p>在grow_refs_and_insert函数中调用了<code>append_referrer</code>函数，这个函数很明显是做插入操作的，默认使用inline的方式来增加新增的weak引用，如果使用inline的方式失败了，则是以outline的方式，并申请对应的存储空间，把entry-&gt;referrers指向新申请的内存地址，把inline_referrers数组里的数据拷贝到new_referrers中，其源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">if (! entry-&gt;out_of_line) &#123;</div><div class="line">        // Try to insert inline.</div><div class="line">        for (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class="line">            if (entry-&gt;inline_referrers[i] == nil) &#123;</div><div class="line">                entry-&gt;inline_referrers[i] = new_referrer;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Couldn&apos;t insert inline. Allocate out of line.</div><div class="line">        weak_referrer_t *new_referrers = (weak_referrer_t *)</div><div class="line">            _calloc_internal(WEAK_INLINE_COUNT, sizeof(weak_referrer_t));</div><div class="line">        // This constructed table is invalid, but grow_refs_and_insert</div><div class="line">        // will fix it and rehash it.</div><div class="line">        for (size_t i = 0; i &lt; WEAK_INLINE_COUNT; i++) &#123;</div><div class="line">            new_referrers[i] = entry-&gt;inline_referrers[I];</div><div class="line">        &#125;</div><div class="line">        entry-&gt;referrers = new_referrers;</div><div class="line">        entry-&gt;num_refs = WEAK_INLINE_COUNT;</div><div class="line">        entry-&gt;out_of_line = REFERRERS_OUT_OF_LINE;</div><div class="line">        entry-&gt;mask = WEAK_INLINE_COUNT-1;</div><div class="line">        entry-&gt;max_hash_displacement = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这里就可以看出，当被引用对象的弱引用referrers个数小于WEAK_INLINE_COUNT时，其entry里面是以inline小数组方式来存储这些弱引用变量的，只有当inline_referrers全部装满之后，该entry out_of_line被设置为REFERRERS_OUT_OF_LINE，后续如若有变量继续引用该对象则是以outline的方式存储的。</p>
<blockquote>
<p>union是在被引用变量的referrers个数小于等于WEAK_INLINE_COUNT时，使用inline数组的内存表现形式；当referrers个数超过了WEAK_INLINE_COUNT则以struct1的内存表现形式！</p>
</blockquote>
<p>由于使用inline的方式是使用小数组的方式，但是针对弱引用对象过多，那么它的存取性能就是考虑的一个重点。而散列是一种用于以常数平均时间执行插入、删除和查找的技术。<br>下面这个过程我不是很确定，如有不同的建议希望指出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">size_t index = w_hash_pointer(new_referrer) &amp; (entry-&gt;mask);</div><div class="line">size_t hash_displacement = 0;</div><div class="line">while (entry-&gt;referrers[index] != NULL) &#123;</div><div class="line">        index = (index+1) &amp; entry-&gt;mask;</div><div class="line">        hash_displacement++;</div><div class="line">&#125;</div><div class="line">if (hash_displacement &gt; entry-&gt;max_hash_displacement) &#123;</div><div class="line">        entry-&gt;max_hash_displacement = hash_displacement;</div><div class="line">&#125;</div><div class="line">weak_referrer_t &amp;ref = entry-&gt;referrers[index];</div><div class="line">ref = new_referrer;</div><div class="line">entry-&gt;num_refs++;</div></pre></td></tr></table></figure>
<p>begin是通过引用new_referrer调用散列函数获取一个散列值，这个散列值就是散列表中的元素查找自己所在散列槽的key。<br>从源码可以看出，通过散列值查找元素对应散列槽的方式好像是使用了<strong>线性探测法</strong>。简化上面的代码，配合下方这图来看一下把new_referrer指针查找正确index的过程：<br><img src="/uploads/objc_weak_sroucecode/4.png" alt=""><br>如上图，假设使用<code>w_hash_pointer</code>获取到的key为2，obj1成功插入到散列槽2中，obj2使用<code>w_hash_pointer</code>获取到的key也为2，此时散列槽2已经放入了obj1，那么只有正向地去寻找下一个散列槽，如果为空则放入obj2。<br>回到源码中，在求begin值的时候。把hash值和entry-&gt;mask做了按位与的操作，但是这里为什么要对entry-&gt;mask做一次按位与操作呢？<br>entry-&gt;mask存储着weak_entry_t的referrers数组大小，这样做能保证所得的散列值是小于当前数组的出界的，因为大于referrers数组大小对应的二进制位的高位全部被置为0，从而避免出现数组越界带来的问题。<br>关于出界和入界的概念，可以在《C陷阱与缺陷》中关于一个介绍for循环越界导致的死循环一节，具体的记得不是很清楚了。针对出界这个概念还是蛮重要的，老板们可以去看一看。<br><code>remove_referrer</code>和append_referrer在源码上来看基本没有什么区别，区别只不过是一个赋值，一个置空而已。</p>
<h4 id="weak-table-t的扩容和减容"><a href="#weak-table-t的扩容和减容" class="headerlink" title="weak_table_t的扩容和减容"></a>weak_table_t的扩容和减容</h4><p>针对weak_table_t的扩容和减容源码相对来说比较简单，限于篇幅我没有提供对应的代码，所以在看的时候还麻烦自己打开上面提到的源码地址对照来看。<br>在源码中主要提供了如下函数：</p>
<ul>
<li><p>weak_entry_insert；<br>函数<code>weak_entry_insert</code>和上一节提到的append_referrer是类似的，weak_table_t的内部实现同样也是使用散列表的方式来管理所有的entry变量的。只是weak_entry_insert没有去尝试inline的那一步。</p>
</li>
<li><p>weak_resize；<br>函数<code>weak_resize</code>和上面提到的grow_refs_and_insert函数类似，在调整大小时，都是创建一个新尺寸大小的内存空间，然后将原内存空间的数据移动到新的内存空间。weak_resize只有移动老数据，没有新数据的添加！最后释放掉原内存。</p>
</li>
<li><p>weak_grow_maybe；<br>函数<code>weak_grow_maybe</code>是在原weak_table的entry数量大于了weak_table数组容量的3/4时，便调用weak_resize去扩充容量到原数组容量的2倍。</p>
</li>
<li><p>weak_compact_maybe；<br>函数<code>weak_compact_maybe</code>是用来收缩容量的，当数组的容量内大部分都为空的话，则减容。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (old_size &gt;= 1024  &amp;&amp; old_size / 16 &gt;= weak_table-&gt;num_entries) &#123;</div><div class="line">        weak_resize(weak_table, old_size / 8);</div><div class="line">        // leaves new table no more than 1/2 full</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>weak_entry_remove；<br>函数<code>weak_entry_remove</code>用来weak_table_t的entries里对应的entry</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (entry-&gt;out_of_line()) free(entry-&gt;referrers);</div><div class="line">bzero(entry, sizeof(*entry));</div><div class="line">weak_table-&gt;num_entries--;</div><div class="line">weak_compact_maybe(weak_table);</div></pre></td></tr></table></figure>
<p>sizeof(*entry)获取到了weak_entry_t所占用的内存大小，使用<strong>bzero</strong>是将该内存段全部置为0，使用bzero而不使用memset影响并不大，使用memset需要多传入一个参数来确定需要重置的值。在《Unix网络编程》里创建sockaddr_in结构变量时，把对应内存空间数据清空用到了bzero，并讲了一下和memset的区别，具体内容可以去看看这本书。</p>
<h4 id="头文件暴露的四个函数"><a href="#头文件暴露的四个函数" class="headerlink" title="头文件暴露的四个函数"></a>头文件暴露的四个函数</h4><p>在头文件中暴露了四个外部可用的函数，分别是：<strong>weak_register_no_lock、weak_unregister_no_lock、weak_is_registered_no_lock和weak_clear_no_lock</strong>，根据注释来看主要是针对weak_table_t的添加、删除和清空数据等操作。在这里以下面的代码为基础来讲解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__weak id refer = obj;</div></pre></td></tr></table></figure>
<p>下面再来具体看看这几个函数在干什么？<br><code>weak_register_no_lock</code>源代码中提出，注册一个新的键值对，如果新的弱对象不存在则去新创建一个对应的entry。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (!referent  ||  referent-&gt;isTaggedPointer()) return referent_id;</div></pre></td></tr></table></figure>
<p>如果被弱引用指向的对象（obj）是isTaggedPointer，这里便不做相关操作，直接返回弱引用指向的对象（obj）。<br>关于什么是Tagged Pointer，后面我再去细看一下里面的源码。从这里的源码可以看出，如果是TaggedPointer就不做后续操作，因为指针并没有指向真正的内存地址，返回的值则是被引用对象自身。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">weak_entry_t *entry;</div><div class="line">if ((entry = weak_entry_for_referent(weak_table, referent))) &#123;</div><div class="line">        append_referrer(entry, referrer);</div><div class="line">&#125;else &#123;</div><div class="line">        weak_entry_t new_entry(referent, referrer);</div><div class="line">        weak_grow_maybe(weak_table);</div><div class="line">        weak_entry_insert(weak_table, &amp;new_entry);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果存在对应的entry则直接调用append_referrer进行插入。如果不存在，则调用weak_entry_t的构造函数创建一个新的对象，并查看是否需要针对weak_table进行扩容，将新的entry插入到weak_table中。下图是一个为对象增加弱引用，并将引用添加到weak_table中的简易流程：<br><img src="/uploads/objc_weak_sroucecode/5.png" alt=""></p>
<p>现在来看一下<code>weak_unregister_no_lock</code>函数，针对weak_table的移除，必须确保entry已经存在于weak_table中，才会去进行后续的操作，同样把对应的流程图画出来：<br><img src="/uploads/objc_weak_sroucecode/6.png" alt=""><br>最后两个函数是一个是debug状态下用于判断某一entry是否存在于weak_table中，另一个函数则是对特定的被弱引用的对象（obj）的所有引用做清楚操作。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里objc-weak应该算是讲清楚了（天知道我的表达能力怎么样。。。），最后我从外层结构到内层结构来一一总结下：<br>1、weak_table可以存储多个entry，而且它会根据其散列表中entry的个数来伸缩其所占内存大小；<br>2、一个entry表示的是一个被弱引用的对象（上文提到的obj），该变量可以被多个变量弱引用（refer）。所以entry也存在一个散列表，其用来存储对应的弱引用变量的引用。也就是前面源码里面提到的指向指针的指针。<br>3、entry的out_of_line_ness只有在弱引用变量大于<strong>WEAK_INLINE_COUNT</strong>时才会置为<strong>REFERRERS_OUT_OF_LINE</strong>。也就是只有在这时候union才会使用struct1结构内存布局。<br>4、还有就是out_of_line_ness == 0b10没有看懂。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文不看其他，只专注于weak的内部结构实现细节和源码解读，看了网上很多的文章都是贴上一篇&lt;a href=&quot;https://opensource.apple.com/tarballs/objc4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;open s
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>记一次LFU缓存实现</title>
    <link href="http://yoursite.com/2018/01/17/lfu4cIniOS/"/>
    <id>http://yoursite.com/2018/01/17/lfu4cIniOS/</id>
    <published>2018-01-17T14:52:32.000Z</published>
    <updated>2018-01-17T14:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章大多是我自己的基于iOS开发一个想法过程，实现并不难。不过我并不会贴出全部代码，天知道我组织文章的根据是什么，能看懂都是缘分。<br><a id="more"></a> </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>讨论缓存时，都会分内存缓存和硬盘缓存，本文主要是基于内存缓存的，但是完全可以稍加改动便可以应用于硬盘缓存中。在做其他文件IO的时，会有很多情况会基于C。基于此，我选择了使用C来实现核心部分。而它的作用是主要用于WebView在内存中的缓存数据。</p>
<p>关于LFU的一些概念之类的东西就不说了，原理实现网上一大堆。基于自己单链表通过栈来实现LFU的方式实现一下，这不一定是最优解，也有可能是最差解。不管怎么说，先通过一个图阐述一下主要的数据结构：<br><img src="http://upload-images.jianshu.io/upload_images/619906-4a7532a55131ca4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="栈数据变化"></p>
<h3 id="多想一点儿东西"><a href="#多想一点儿东西" class="headerlink" title="多想一点儿东西"></a>多想一点儿东西</h3><p>在看了上图之后，首先的想法就是去把具体算法撸出来。但是在开动写代码之前，我们需要想的东西应该要更多。在面向过程的思想中想开来，使用栈的时候取出操作可以很快速的完成最快可以达到时间复杂度为O(1)，而在维护栈顺序的时候，最坏的时间复杂度为O(N)，其查找和位置更新是在同一个循环中完成的，避免了不必要的时间消耗。</p>
<h3 id="加入到面向对象中"><a href="#加入到面向对象中" class="headerlink" title="加入到面向对象中"></a>加入到面向对象中</h3><p>显然用C来做业务逻辑开发始终有点儿蹩脚，所以得引入到面向对象中。我把这个类取名叫做<code>PPWebFetchCache</code>吧，既然都面向对象了，要不再弄点儿设计模式进去？考虑到易于操作性，对于PPWebFetchCache类，我做了一个单例，当然也可以自己生成一个对象。到了这里下面应该要想的就是对象的属性和操作方法等等事情，但是自己想着就用了一个单例模式这不是表明我设计模式很low吗？不过事实的确是这样，我没有什么好的设计模式拿出来~~~<br>所以我就硬塞了一个简单工厂模式进去。它做什么呢？我想的是“现在只是做LFU，万一哪一天变化来了，让我用写一个LRU的缓存策略，那我不是死得很惨！”，所以我又创建了一个继承于PPWebFetchCache类的<code>PPWebFetchLFUCache</code>，和另一个用于将来实现LRU算法的<code>PPWebFetchLRUCache</code>类。并在最后给父类添加了属性maxMemoryCost、maxMemoryCountLimit和两个操作方法storeCacheInMemory、memoryCacheWithURL。</p>
<h3 id="走进实现细节"><a href="#走进实现细节" class="headerlink" title="走进实现细节"></a>走进实现细节</h3><p>上面说的LFU是针对于某一个URL的使用次数。在思考如何使用最少时间拿到URL对应的数据时，显然散列表最理想的数据结构，而且在iOS中用散列表实现的代表便是<code>Dictionary</code>。所以大致的逻辑是：</p>
<blockquote>
<p>使用NSDictionary来实现URL和数据一对一在内存中的存储。而LFU主要用于管理某一URL的使用次数，淘汰掉使用次数最少的URL，并在内存字典中删除对应的数据。</p>
</blockquote>
<p>PPWebFetchCache对外暴露的接口只有存和取，而具体的加入和删除操作则是在内部通过maxMemoryCost、maxMemoryCountLimit控制实现。</p>
<h3 id="异步环境"><a href="#异步环境" class="headerlink" title="异步环境"></a>异步环境</h3><p>显然在数据存取的时候，我们不应该放在主线程中去做这些事儿。因此我创建串行队列用来执行这些事务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">static dispatch_queue_t background_serialQueue()&#123;</div><div class="line">    static dispatch_queue_t queue;</div><div class="line">    if (!queue) &#123;</div><div class="line">        char *const label = &quot;com.example.webprefetchCache&quot;;</div><div class="line">        dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_USER_INITIATED, 0);</div><div class="line">        queue = dispatch_queue_create(label, attr);</div><div class="line">    &#125;</div><div class="line">    return queue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void async_inbackground(void(^block)(void))&#123;</div><div class="line">    dispatch_async(background_serialQueue(), block);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么要用串行队列？因为在队列内部操作，我不需要关心会出现资源竞争的问题。而在串行队列以外其他队列中来操作单例的相关数据时，我就需要去关心的线程安全的问题。因此我直接使用适用于静态分配的的互斥量<strong>PTHREAD_MUTEX_INITIALIZER</strong>来保证数据的同步操作。反观如果我去使用pthread_mutex_init来动态生成一个互斥量的话，我还要操心什么时候去destroy掉它（当然这里得仔细思考造成死锁的问题）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static inline pthread_mutex_t mutext_lock(void)&#123;</div><div class="line">    static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;</div><div class="line">    return lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void safeProgressWith(void(^block)(void))&#123;</div><div class="line">    pthread_mutex_t lock = mutext_lock();</div><div class="line">    pthread_mutex_lock(&amp;lock);</div><div class="line">    block();</div><div class="line">    pthread_mutex_unlock(&amp;lock);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在加锁等操作时，尽量让其颗粒度更低。这样可以减少不必要的线程处于waiting状态，也就相应地减少出现低优先级线程饿死的情况发生（尽量减少CPU密集型线程的时间片）。</p>
<h3 id="LFU的具体实现"><a href="#LFU的具体实现" class="headerlink" title="LFU的具体实现"></a>LFU的具体实现</h3><p>LFU只是针对于URL的淘汰策略，淘汰了URL之后，根据该URL到NSDictionary中找出对应的数据进行移除。这里使用链表的方式实现栈结构，其结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct __PPWebLFUFetchInlayerNode_ * _PPWebLFUInlayerNodeRef;</div><div class="line">typedef struct __PPWebLFUFetchInlayerNode_ &#123;</div><div class="line">    char *url;</div><div class="line">    int use_count;</div><div class="line">    _PPWebLFUInlayerNodeRef next;</div><div class="line">&#125;_PPWebLFUFetchInlayerNode;</div></pre></td></tr></table></figure>
<p>在PPWebFetchLFUCache类中保存了一个_PPWebLFUInlayerNodeRef的指针，这个指针指向栈顶：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface PPWebFetchLFUCache:PPWebFetchCache&#123;</div><div class="line">    _PPWebLFUInlayerNodeRef _lfuStack;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>走到这里我们大可以直接使用_lfuStack成员变量来对栈进行相应的操作，但是我们可以更进一步！这里思维跳跃一下，当我们在插入一个节点时如何去判断当前节点是新增节点、还是存在于栈中的节点、抑或是需要删除的结点？<br>如果只是简单的回答“我在插入节点时，先遍历一遍栈看元素是否存在于其中”，这样做毫无意义，而且平添一倍的时间消耗，因为后面的插入操作时，还要去遍历一次找到对应的节点位置。<br>为了能够更好地在同一个循环中处理插入数据，查找数据，删除数据等操作。这里需要在执行C操作时在适当地点给我们回调，让我们有机会在一次循环中做完这些操作。为什么要用回调呢？我们完全可以把删除的相关逻辑放在某一次循环中，这样就需要我们在调用逻辑时传入一些判断条件。这无疑是增加了算法的局限性，从另一点来说，这个算法的适用范围就大大降低了。<br>所以我引入了一个上下文环境，这个环境主要用于包裹相关信息数据和函数指针回调：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">typedef struct __PPWebLFUFetchCacheContext *PPWebLFUFetchCacheContextRef;</div><div class="line">typedef struct __PPWebLFUFetchCacheContext &#123;</div><div class="line">    _PPWebLFUInlayerNodeRef *node;/// root</div><div class="line">    void *info;/// 一般传入fetchCacher对象</div><div class="line">    void (*appendInStackRootCallback)(void *info, char *const key);/// 栈顶插入回调</div><div class="line">    void (*appendInStackBottomCallback)(void *info, char *const key);/// 栈底插入回调</div><div class="line">    void (*appendInStackCallback)(void *info, char *const key);/// 栈中插入回调</div><div class="line">&#125;PPWebLFUFetchCacheContext;</div><div class="line"></div><div class="line">/// 调用这个方法之后，如果不再需要使用这个指针，需要调用free来释放内存空间</div><div class="line">PPWebLFUFetchCacheContextRef PPWebLFUFetchCacheContextCreate(void *root,</div><div class="line">                                                           void *info,</div><div class="line">                                                           void (* _Nonnull appendInStackRootCallback)(void *info, char *const key),</div><div class="line">                                                           void (* _Nonnull appendInStackBottomCallback)(void *info, char *const key),</div><div class="line">                                                           void (* _Nonnull appendInStackCallback)(void *info, char *const key))&#123;</div><div class="line">    PPWebLFUFetchCacheContextRef ctx = (PPWebLFUFetchCacheContextRef)malloc(sizeof(PPWebLFUFetchCacheContext));</div><div class="line">    ctx-&gt;node = root;</div><div class="line">    ctx-&gt;info = info;</div><div class="line">    ctx-&gt;appendInStackRootCallback = appendInStackRootCallback;</div><div class="line">    ctx-&gt;appendInStackBottomCallback = appendInStackBottomCallback;</div><div class="line">    ctx-&gt;appendInStackCallback = appendInStackCallback;</div><div class="line">    return ctx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于这里为什么选择一个上下文？当我们需要多个回调时，完全没有必要把每一个回调都添加到函数参数中去，我们可以把这些参数包装起来。而且这样包装起来做还有一个优势，就是新增回调场景时就要方便许多！</p>
<h3 id="元素添加"><a href="#元素添加" class="headerlink" title="元素添加"></a>元素添加</h3><p>现在所有的条件都已具备，是时候来处理这些具体的逻辑了。就像是在学红黑树的时候一般都会把它那5个特性先提出来是吧。所以这里需要明确几点特性：</p>
<ul>
<li>1、由链表实现的一个栈，只有一个根节点（上面提到的，包装在上下文中的lfustack）；</li>
<li>2、栈的深度是有限制的；</li>
<li>3、添加和删除操作是基于栈顶；</li>
<li>4、栈内元素的使用次数是从小到大，从上到下生长；</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/619906-fe36c11c266d16da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>基于以上，我定义了一个元素添加函数的原型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool _PPWebFetchLFUInlayerQueueAdd(PPWebLFUFetchCacheContextRef context,char *const url)</div></pre></td></tr></table></figure>
<p>很明显传入的context是需要在外面创建好的一个指针变量，但是context的具体成员变量我们没有控制，全部传入NULL都可以（因为懒，不想对函数指针做非空判断，所以我把函数指针设置为_Nonnull。。。），这没有什么问题。因此首先要做的就是判断栈是否为空：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if (!(*(context-&gt;node))) &#123;/// 创建栈顶指针</div><div class="line">  _PPWebLFUInlayerNodeRef node = allocNewNode(url);</div><div class="line">  if (!node) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line">  __block _PPWebLFUInlayerNodeRef *_broot = (context-&gt;node);</div><div class="line">  safeProgressWith(^&#123;</div><div class="line">    *_broot = node;</div><div class="line">    (context-&gt;appendInStackRootCallback)(context-&gt;info,url);</div><div class="line">  &#125;);</div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面这段代码中我们使用了context的一个函数指针回调，当在空栈中加入根节点，这是符合该函数指针回调语义的。<br>此时的栈分布情况很简单，但还是画出来更加明显：<br><img src="http://upload-images.jianshu.io/upload_images/619906-a192fab1d454b156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在这之后插入结点时，我们便需要考虑新添加进来的URL是新节点还是在原有节点上增加使用次数。这里我们需要一个循环从根节点开始遍历栈，如果找到了对应的URL，便将其使用次数加一，如果走到栈底还是未能命中对应的URL，则需要以该URL为数据创建一个新节点，并将这个节点作为栈根。实现代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (0 == strcmp(lead-&gt;url, url)) &#123;</div><div class="line">  (context-&gt;node)-&gt;use_count++;</div><div class="line">&#125;else&#123;</div><div class="line">  (context-&gt;appendInStackRootCallback)(context-&gt;info,url);</div><div class="line">  return appendRootNodeInStack((context-&gt;node), url);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面涉及到的函数appendRootNodeInStack主要用于生成一个节点之后，并将该节点设置为根：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">bool appendRootNodeInStack(_PPWebLFUInlayerNodeRef *root ,char *const url)&#123;</div><div class="line">    /// 在栈顶插入</div><div class="line">    _PPWebLFUInlayerNodeRef node = allocNewNode(url);</div><div class="line">    if (!node) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    __block _PPWebLFUInlayerNodeRef *_broot = root;</div><div class="line">    safeProgressWith(^&#123;</div><div class="line">        node-&gt;next = *_broot;</div><div class="line">        *_broot = node;</div><div class="line">    &#125;);</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以现在会出现两种情况，如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/619906-461de3ace1d81659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这段逻辑代码目前并没有放在循环中来做，它和栈中已经存在四个、五个节点的情况是类似的，但它的情况要简单许多，它只需要处理使用次数更新或者头节点插入的情况，不会涉及到删除（除非你不做缓存）、移位操作。到最后我会把这段代码合并起来，而那正是我设计这套算法的中心思想。</p>
<h3 id="节点移动和删除"><a href="#节点移动和删除" class="headerlink" title="节点移动和删除"></a>节点移动和删除</h3><p>针对节点的移动，需要考虑多个情况，包括：从栈顶移动到栈底、从栈顶移动到栈中某一个位置、从栈中某一个位置移动到栈中另一个位置、从栈中某一个位置移动到栈底、不移动。<br>我把这些情况依次描述到图中，这样看着更直观：<br><img src="http://upload-images.jianshu.io/upload_images/619906-9742abfeab7c4236.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前两种情况"><br>下面是后面两种情况：<br><img src="http://upload-images.jianshu.io/upload_images/619906-43cbf19dcca8764c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后两种情况"><br>从上面虚线箭头到实线箭头的变化可以很明显看出来，是复杂了不少。而最后一种无变化的，我就没有列出来。看看前面四种情况变化后的栈元素排列情况，从左到右，从上到下依次是：</p>
<ul>
<li>2-&gt;3-&gt;4-&gt;1;</li>
<li>3-&gt;2-&gt;4-&gt;1;</li>
<li>2-&gt;4-&gt;3-&gt;1;</li>
<li>2-&gt;3-&gt;1-&gt;4;</li>
</ul>
<p>从上面四种情况来看，对于一个节点的移动可以分为两部拆开来看，分别是——<strong>取出、放入</strong>两个过程。我直接把中间的的算法列出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">_PPWebLFUInlayerNodeRef previous = lead;</div><div class="line">_PPWebLFUInlayerNodeRef pivot = NULL;</div><div class="line">_PPWebLFUInlayerNodeRef prepivot = NULL;</div><div class="line">do &#123;</div><div class="line">    if (0 != strcmp(lead-&gt;url, url)) &#123;</div><div class="line">        if (!pivot) &#123;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        if (pivot-&gt;use_count &lt;= lead-&gt;use_count) &#123;</div><div class="line">            break;/// 跳出循环去执行放入</div><div class="line">        &#125;</div><div class="line">        if (*(context-&gt;node)==pivot) &#123;</div><div class="line">            __block _PPWebLFUInlayerNodeRef *_broot = (context-&gt;node);</div><div class="line">            safeProgressWith(^&#123;</div><div class="line">                *_broot = previous-&gt;next;</div><div class="line">            &#125;);</div><div class="line">        &#125;else&#123;/// 取出</div><div class="line">            prepivot-&gt;next=pivot-&gt;next;</div><div class="line">        &#125;</div><div class="line">        continue;</div><div class="line">    &#125;</div><div class="line">    lead-&gt;use_count++;</div><div class="line">    pivot = lead;</div><div class="line">    prepivot = previous;</div><div class="line">&#125; while ((void)(previous=lead),(void)(lead=lead-&gt;next),lead);</div><div class="line">if (!pivot) &#123;/// 在栈顶插入</div><div class="line">    (context-&gt;appendInStackRootCallback)(context-&gt;info,url);</div><div class="line">    return appendRootNodeInStack((context-&gt;node), url);</div><div class="line">&#125;</div><div class="line">if (!lead) &#123;/// 处理栈底情况</div><div class="line">    previous-&gt;next=pivot;</div><div class="line">    pivot-&gt;next=NULL;</div><div class="line">    (context-&gt;appendInStackBottomCallback)(context-&gt;info,url);</div><div class="line">&#125;else&#123;/// 处理栈中的放入</div><div class="line">    pivot-&gt;next=previous-&gt;next;</div><div class="line">    previous-&gt;next=previous==pivot?lead:pivot;</div><div class="line">    (context-&gt;appendInStackCallback)(context-&gt;info,url);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码把上面提到的if-else判断也一起合并进来了，这里pivot主要是用来记录找到目标URL的哨兵，而prepivot用来记录哨兵前面一个节点（如果使用双向链表完全可以不用这个零时变量）。<br>到这里基本上是把该算法的核心部分说完了，该算法的最坏时间复杂度就是O(N)，这种最坏时间复杂度的情况分别是：新节点插入，栈顶一次直接移动栈底（这个情况是发生在使用次数都为1时，栈顶元素此时+1的情况）。最优的时间复杂度情况是O(1)，直接栈顶数据更新。<br>最后就是节点的删除操作，仅仅只是删除操作时间复杂度肯定是O(1)的。但是事情往往没有这么简单，必须要考虑当前添加进来的元素是到达容量限制的新元素，还是栈里面已经存在的元素呢？难道我们又要去遍历一次栈然后来做删除操作吗？这是完全没有必要的，因为要出现删除节点的情况，肯定是发生在向栈中Push元素时发生。<br>因此我将上面各个情况分为三种大体情况，并为这三种情况提供了三个回调，而这个三个回调都是放在上面的context中：</p>
<ul>
<li>在栈顶插入元素（appendInStackRootCallback）；</li>
<li>处理栈底情况（appendInStackBottomCallback）；</li>
<li>处理中间节点（appendInStackCallback）；</li>
</ul>
<p>基于这：</p>
<blockquote>
<p>我们可以一次循环中完成新增、移动、删除操作！</p>
</blockquote>
<p>上面提到的三个回调，可以通过调用PPWebFetchLFUCache实例方法来看一下一个整体过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (BOOL)insertCacheMap:(NSData *)object forKey:(NSString *)key&#123;</div><div class="line">    PPWebLFUFetchCacheContextRef ctx = PPWebLFUFetchCacheContextCreate(</div><div class="line">                                                                       &amp;_lfuStack,</div><div class="line">                                                                       (__bridge void *)(self),</div><div class="line">                                                                       &amp;progressingAppendInStackRootCallback,</div><div class="line">                                                                       &amp;progressingAppendInStackBottomCallback,</div><div class="line">                                                                       &amp;progressingAppendInStackCallback);</div><div class="line">    bool result = _PPWebFetchLFUInlayerQueueAdd(ctx, (char *)[key UTF8String]);</div><div class="line">    if (result == false) &#123;</div><div class="line">        PPWebLFUFetchCacheContextRelease(&amp;ctx);</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">    if (![self.cacheMap.allKeys containsObject:key]) &#123;</div><div class="line">        safeProgressWith(^&#123;</div><div class="line">            [self.cacheMap setObject:object forKey:key];</div><div class="line">            self.currentCacheUsage += object.length;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    PPWebLFUFetchCacheContextRelease(&amp;ctx);</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面创建上下文的代码中，第一个参数为保存在PPWebFetchLFUCache单例中的一个成员变量，而info参数主要用来传递self，这里用context时，_lfuStack会被context保留，而_lfuStack又会被PPWebFetchLFUCache单例保留，但是在函数返回之前会对context做release操作，会把对_lfuStack的保留置空，所以不要想着OC里面常出现的引用计数不会降为0的问题。而且也不会出现相互持有的关系。<br>而回调函数中，主要来看progressingAppendInStackRootCallback的回调：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void progressingAppendInStackRootCallback(void *info, char *const key)&#123;</div><div class="line">    PPWebFetchLFUCache *cacher = (__bridge PPWebFetchLFUCache *)(info);</div><div class="line">    if (!cacher) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (cacher.cacheMap.allKeys.count &gt;= kMaxMemoryCountLimit) &#123;</div><div class="line">        [cacher deleteCacheMap];</div><div class="line">        progressingAppendInStackRootCallback(info, key);</div><div class="line">    &#125;else&#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我直接把删除函数贴出来，这并没有什么难点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_PPWebLFUInlayerNodeRef _PPWebFetchLFUInlayerQueueDelete(PPWebLFUFetchCacheContextRef context ,char **url)&#123;</div><div class="line">    if (!(context-&gt;node)) &#123;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    _PPWebLFUInlayerNodeRef lead = NULL;</div><div class="line">    lead = *(context-&gt;node);</div><div class="line">    __block _PPWebLFUInlayerNodeRef *_broot = (context-&gt;node);</div><div class="line">    if ((*_broot)-&gt;next) &#123;</div><div class="line">        safeProgressWith(^&#123;</div><div class="line">            *_broot = (*_broot)-&gt;next;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    if (url) &#123;</div><div class="line">         (*url) = (lead-&gt;url);</div><div class="line">    &#125;</div><div class="line">    return lead;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面出现的deleteCacheMap方法中会把不再使用的节点free掉。</p>
<h3 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h3><p>上面代码中很多地方都用到了safeProgressWith函数，其实现也在上面列出来了。使用它的目的有两个：<br>第一个、PPWebFetchLFUCache类的操作是可以在多线程异步环境下操作的，所以我必须要保证cacheMap的数据同步；<br>第二个、虽然基于C的操作我都是放在一个串行的队列中进行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">async_inbackground(^&#123;</div><div class="line">  BOOL result = [self insertCacheMap:data forKey:url];</div><div class="line">  if (complete) &#123;</div><div class="line">    complete(result);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是_lfuStack成员变量是可以通过hook的方法拿到，并让其在异步环境下去进行修改，这个我没法去控制，但是我要做到在LFU内做到一个同步操作，所以基于跟节点的操作都是在加锁状态下完成的。这里需要注意的就是不要出现互斥锁的嵌套使用，如果使用的是同一个锁变量的话，那肯定会造成死锁的。</p>
<p>完。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章大多是我自己的基于iOS开发一个想法过程，实现并不难。不过我并不会贴出全部代码，天知道我组织文章的根据是什么，能看懂都是缘分。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>来唠嗑一下线程中的一些事儿</title>
    <link href="http://yoursite.com/2017/11/16/talk_about_thread/"/>
    <id>http://yoursite.com/2017/11/16/talk_about_thread/</id>
    <published>2017-11-16T13:55:18.000Z</published>
    <updated>2017-11-16T14:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/619906-b76f26ef4b53a80a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>由于前段时间的工作中，在一个并发编程题中栽了跟头,也因此增加了我对这一方面的理解。下面我会结合例子的方式来阐述一下我的一点儿小理解。<br><a id="more"></a> </p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>  对于并发编程可能首先想到的便是和多线程有关，这又需要涉及到线程的概念。维基百科上关于<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="external">线程</a>的解释，我提取一个我认为比较关键的概念：</p>
<blockquote>
<p>它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
</blockquote>
<p>每个线程存在自己的栈和寄存器集合，所以在这种情况下去保证线程相对安全的时候应该要使用<code>violate</code>变量（防止编译器缓存了被多个线程寄存器并发用到的变量，让编译器直接去变量地址获取）。</p>
<p>上面的重点在于“线程是包含于进程中，并且一条线程实际上一段代码的执行流”（代码区是被进程内多个线程共享的）。这里也就不过多深入地去解释了，贴一个我翻译的官方的<a href="https://www.gitbook.com/book/wangwangok/threading-programming-guide-will/details" target="_blank" rel="external">多线程编程</a>文档，并配合有创建线程不同方式的<a href="https://github.com/wangwangok/Thread_programming" target="_blank" rel="external">代码</a>。<br>我之所以专门把这个提出来是因为我在这个知识基础上遇到过一个面试题——“我们使用异步的方式从服务端获取到了我们需要的数据，然后我们如何去更新对应视图？”。如果不去细想的话直接扔出一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    [self post:url aPara:nil completionBlock:^(id responseObject, NSError *error) &#123;</div><div class="line">#if defined(USE_GCD_UPDATE_UI) &amp;&amp; USE_GCD_UPDATE_UI == 1</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">           /// 更新UI</div><div class="line">        &#125;);</div><div class="line">#else</div><div class="line">        /// updateView中更新UI</div><div class="line">        [self performSelectorOnMainThread:@selector(updateView:) withObject:responseObject waitUntilDone:NO];</div><div class="line">#endif</div><div class="line">    &#125;];</div></pre></td></tr></table></figure></p>
<h3 id="为什么在子线程中更新UI是不安全的"><a href="#为什么在子线程中更新UI是不安全的" class="headerlink" title="为什么在子线程中更新UI是不安全的"></a>为什么在子线程中更新UI是不安全的</h3><p>  他会继续追问你，我们为什么必须要把更新UI的任务放在主线程来做？放到子线程不可以吗？对于这个问题我只能用我浅显地认识来解释一下这个问题，因为操作系统相关的东西我几乎忘的差不多了。这里先抛出一个概念——<strong>基于UIKit的控件是线程不安全的</strong>。那么为什么苹果要把UIKit设计为线程不安全？</p>
<p>  最直观的来说，在牺牲性能为代价的前提下，使用同步能够确保代码的正确执行。在大多数情况下使用同步工具都会造成延迟。锁和原子操作通常会涉及到使用内存屏障和内核级的同步来确保代码正确执行。当出现锁竞争的情况下，线程可能会被阻塞从而导致体验上的延迟卡顿。所以我猜测有基于这个原因导致了苹果将UIKit设计成了线程不安全。这就回答了上面提出的“我们为什么必须要把更新UI的任务放在主线程来做？”</p>
<p>下面我通过画图的方式来表达一下在并行状态下UIKit不使用同步工具的情形：<br><img src="http://upload-images.jianshu.io/upload_images/619906-3d6a928e19f97a18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>就如上图所示在主线程和子线程的消息队列中同时去修改同一内存空间中的值，如果不添加一个同步操作的话会发生意想不到的事情。Objective-C中的对象是存放在堆区，而堆区和前面我提过的代码区一样是线程共享的。现在我们知道为什么需要我们在主线程中去更新UI。而对于另一个问题：放到子线程不可以吗？或许在<a href="https://github.com/texturegroup/texture" target="_blank" rel="external">AsyncDisplayKit</a>中能够找到子线程处理视图的答案。</p>
<h3 id="子线程是如何实现在主线程中更新UI"><a href="#子线程是如何实现在主线程中更新UI" class="headerlink" title="子线程是如何实现在主线程中更新UI"></a>子线程是如何实现在主线程中更新UI</h3><p>  现在回到最初的问题上来，子线程和主线程是怎样协调工作来更新视图的呢？更新的代码我在上面已经放出来了，但是面试官的目的是想要知道其底层实现，先来看一下官方文档中出现的一个图片：<br><img src="http://upload-images.jianshu.io/upload_images/619906-687aad325b56e9ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如果要完整的讲一下我的理解的话，需要以下这些假设。我们把右边绿色的这一部分当做是子线程，而左边紫色的部分当做是主线程；并且我们有自定义一个输入源（因为我想完整的模拟这个场景，而不是使用系统提供的封闭的输入源），我们要通过该输入源来给主线程的Runloop发送消息（你可能会问为什么要用输入源？我直接发消息不可以吗？不好意思，Runloop就人输入源或者定时器源）。</p>
<p>首先来创建一个自定的输入源，这个输入源负责从子线程给主线程的Runloop发送消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/// .h</div><div class="line">@interface RunloopSource : NSObject</div><div class="line">void	runloopsrc_schedule(void *info, CFRunLoopRef rl, CFRunLoopMode mode);</div><div class="line">void	runloopsrc_perform(void *info);</div><div class="line">void	runloopsrc_cancel(void *info, CFRunLoopRef rl, CFRunLoopMode mode);</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>上诉头文件中的三个函数分别是：  <code>schedule</code>表示注册成功并提供外部给子线程传递数据；<code>perform</code>是子线程通过输入源想要给主线程传输的主要出口；<code>cancel</code>是在我们异步处理完了之后，调用<code>CFRunLoopSourceInvalidate</code>函数告知主线程Runloop该输入源已经完成其职责。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">///.m</div><div class="line">- (instancetype)init&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        CFRunLoopSourceContext ctx = &#123;</div><div class="line">            .info = (__bridge void *)(self),</div><div class="line">            .retain = NULL,</div><div class="line">            .release = NULL,</div><div class="line">            .copyDescription = NULL,</div><div class="line">            .equal = NULL,</div><div class="line">            .schedule = runloopsrc_schedule,</div><div class="line">            .perform = runloopsrc_perform,</div><div class="line">            .cancel = runloopsrc_cancel</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">void runloopsrc_schedule(void *info, CFRunLoopRef rl, CFRunLoopMode mode)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">void runloopsrc_perform(void *info)&#123;</div><div class="line">    RunloopSource *src = (__bridge RunloopSource *)info;</div><div class="line">    [src sourceFire];/// 接口用c，但是处理数据，看习惯，习惯用OC</div><div class="line">&#125;</div><div class="line"></div><div class="line">void runloopsrc_cancel(void *info, CFRunLoopRef rl, CFRunLoopMode mode)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">- (void)sourceFire&#123;</div><div class="line">    if (self.sourceFire_handle == nil) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    @synchronized (command_data) &#123;</div><div class="line">    /// 处理数据</div><div class="line">    /// 回传给主线程数据</div><div class="line">    /// 在输入源中，也就是这个函数中去给主线程的Runloop发送消息，让其更新界面</div><div class="line">    /// - (void)performSelector:(SEL)aSelector onThread:waitUntilDone:modes:</div><div class="line">    &#125;</div><div class="line">    CFRunLoopSourceInvalidate(runloop_src);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里假设我们已经从<code>- (void)URLSession: dataTask:didReceiveData:;</code>（NSURLSessionDataDelegate协议）获取到了数据，此时在runloopsrc_perform 中调用<code>performSelector</code>方法给主线程Runloop发送消息。现在我们把注意力放在上图左边的紫色部分，可以看出它一直处于一个循环中。如果此时消息队列中存在消息，那么该Runloop会处理消息队列中的消息，如果消息队列为空，那么Runloop应该是处于一个休眠状态。当他收到了由我们从子线程的自定义输入源发来的消息时，他会被唤醒来处理该消息。此时在主线程中去执行更新UI的事件。</p>
<p>对于这一块儿我并没有十足的把握，如果有更好的理解麻烦告知与我，万分感谢。</p>
<h2 id="我所了解的线程小常识"><a href="#我所了解的线程小常识" class="headerlink" title="我所了解的线程小常识"></a>我所了解的线程小常识</h2><p>到这儿了主要就说一点儿我所了解的线程，其中主要包括了线程优先级和调度问题，线程和他寄存器之间的一点儿恩怨！</p>
<h4 id="关于线程优先级和调度"><a href="#关于线程优先级和调度" class="headerlink" title="关于线程优先级和调度"></a>关于线程优先级和调度</h4><p>在多对一的线程模型中，一个内核线程对应了多个用户级线程，其实这时候的并发并不是真正意义上的并发，它应该是基于CPU轮转的方式来调度不同用户级线程，让他们每个都执行一小段时间，做到类似并发的效果。所以后面的线程模型都是基于多对多模型，它既可以实现真实的并发，又可以减少一对一模型中线程切换的消耗。</p>
<p>我们可以给线程设置不同的优先级来改变它们的先后执行顺序，除了我们指定的方式，系统会在以下两种情况下去更改线程优先级：</p>
<ul>
<li>I/O密集型线程会比CPU密集型线程更容易被系统提高优先级。<br>因为I/O密集型线程会经常进入waiting状态，而进入waiting状态说明它的任务花费时间短。而CPU密集型线程则是耗费完时间片之后进入ready状态。</li>
<li>对于I/O密集型线程来说，如果给它分配了较低优先级。而CPU密集型线程分配了较高线程优先级，那么就会造成I/O密集型线程处于“饿死”状态。所以系统会将长时间没有运行线程的优先级提高。</li>
</ul>
<h4 id="编译器优化所带来的问题"><a href="#编译器优化所带来的问题" class="headerlink" title="编译器优化所带来的问题"></a>编译器优化所带来的问题</h4><p>编译器为了能够让CPU在获取数据更快速，它会把一些需要经常访问的数据读取到寄存器中。<a href="http://www.ruanyifeng.com/blog/2013/10/register.html" target="_blank" rel="external">为什么寄存器比内存快？</a>，我的理解是由于寄存器存在于CPU内，内存和CPU之间相隔了一个北桥芯片，而它们是通过PCI总线来连接的，就距离上来说这可能是一个原因（我瞎扯淡）。<br>因为这个优化会产生一些小问题，看下面一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSThread thread1 = [NSThread detachNewThreadWithBlock:^&#123;</div><div class="line">        NSLock *lock = [[NSLock alloc] init];</div><div class="line">        [lock lock];</div><div class="line">        i++;</div><div class="line">        [lock unlock];</div><div class="line">&#125;];</div><div class="line">NSThread thread2 = [NSThread detachNewThreadWithBlock:^&#123;</div><div class="line">        NSLock *lock = [[NSLock alloc] init];</div><div class="line">        [lock lock];</div><div class="line">        i++;</div><div class="line">        [lock unlock];</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>这是线程安全的吗？我只能说不一定，因为这是一个偶然事件。下面我来说一下我理解的这个偶然事件是怎么发生的？</p>
<ul>
<li>【thread1】读取i的值到线程1的寄存器集合R1（R1 = 0）；</li>
<li>【thread1】R1++（由于之后可能还要访问i，所以thread1暂时不会把R1写回到i）；</li>
<li>【thread2】读取i的值到线程2的寄存器集合R2（R2 = 0）；</li>
<li>【thread2】R2++（R1 = 1）；</li>
<li>【thread2】将R2写回i；</li>
<li>【thread1】过了很久之后，将R1写回i（i=1）；</li>
</ul>
<p>很明显这并不是我们想要的结果，这就是由于编译器的优化把值读取到了线程响应的寄存器集合中，改变的根本不是同一块儿内存上的值。所以为了解决这个问题可以使用前面提到的<code>violate</code>变量，以此来告诉编译器不要将该变量读取到寄存器中，而是直接在内存中进行操作。</p>
<h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p>文章的最后我们唠叨一下并发这个词儿，关于并发和并行知乎上有一个<a href="https://www.zhihu.com/question/33515481" target="_blank" rel="external">回答</a>解释的很通俗易懂。所以针对Apple的<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="external">并发编程指南</a>，指的是有能力同时去执行多个任务，但并不是指一定要同时执行多个任务。GCD就不说了，大部分时间都是在使用它（因为它在接口使用上易用）。重点来说一下NSOperation，它是即强大又难用。</p>
<p>在开始使用NSOperation之前，我们自己需要清楚“我们要干什么？Apple提供的NSOperation是否满足需求？我们自定义NSOperation子类是基于并行还是串行？等等”。这里提到的并行和串行就不解释了，再解释就是一篇科普文了。<a href="http://nshipster.cn/nsoperation/" target="_blank" rel="external">NSHipster</a>上提到了关于NSOperation：</p>
<blockquote>
<p>NSOperation表示了一个独立的计算单元。作为一个抽象类，它给了它的子类一个十分有用而且线程安全的方式来<strong>建立状态、优先级、依赖性和取消等的模型</strong>。</p>
</blockquote>
<p>所以NSOperation和NSOpertaionQueue不仅仅只是用于网络的情况，当然与之对应的GCD同样可以用于其他事物。试想一下我们是否可以把NSOperation用于一个加载动画。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/619906-b76f26ef4b53a80a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;由于前段时间的工作中，在一个并发编程题中栽了跟头,也因此增加了我对这一方面的理解。下面我会结合例子的方式来阐述一下我的一点儿小理解。&lt;br&gt;
    
    </summary>
    
      <category term="线程" scheme="http://yoursite.com/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>iOS中Native的方式集成Vuforia、其源码解读以及自定义模型</title>
    <link href="http://yoursite.com/2017/09/13/ios_nativa_vuforia/"/>
    <id>http://yoursite.com/2017/09/13/ios_nativa_vuforia/</id>
    <published>2017-09-13T12:33:36.000Z</published>
    <updated>2017-09-20T13:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/619906-e5bbef9f60e5ee49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt=""><br>  随着前有Apple在iOS11中提供了ARKit，后有Google推出的ARCore，显然掀起了一股AR热潮（都是一堆废话，说白了就是公司要求做）。<br>  <a id="more"></a><br>  由于Vuforia已经存在较长时间了，相对于EasyAR或者百度AR更为成熟一点儿，所以它成了第一个技术选择。EasyAR和百度的AR——DuMix AR后面再依次去学习。好吧，先开始来学习Vuforia吧！<br>该文章同步发布在<a href="https://wangwangok.github.io" target="_blank" rel="external">我的博客</a>.</p>
<h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><p>由于这些步骤相对来说比较基础，我就直接罗列出来。</p>
<ul>
<li><p>1、开发者官网<a href="https://developer.vuforia.com；" target="_blank" rel="external">https://developer.vuforia.com；</a></p>
</li>
<li><p>2、下载ios-sdk和ios-sample，并按照官方文档要求将ios-sample放入到ios-sdk的sample文件夹下</p>
</li>
<li><p>3、在vuforia的开发者官网上的License Manager和Target Manager，添加License-key和database<br><img src="http://upload-images.jianshu.io/upload_images/619906-8b73f5d04a424fe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="License-Key"></p>
</li>
<li><p>4、将上一步添加的License-key，放在ios-sample中的代码文件<strong>SampleApplicationSession.mm</strong>中的方法<code>Vuforia::setInitParameters(mVuforiaInitFlags,&quot;&quot;);</code>中。具体步骤见<a href="https://library.vuforia.com/articles/Solution/How-To-add-a-License-Key-to-your-Vuforia-App" target="_blank" rel="external">官网</a>。</p>
  <pre>
Vuforia::setInitParameters(mVuforiaInitFlags,"AT16FIX/////AAAAGVieZ/kg1UkghTnYAz5zXWs8+y5JjeF/NJRcjgVDoCSvsrSt+lWzFMcIVBbQ2YSFRF+6J0GceHoaz8NctXib3cndJEacXmR+1FyO5FhalO7sC4hE9d1/x72qTNDhkPs4rF04JulMYT876Grsnmg9C61oyaDVwBfSpzNZ7gx3NADkkV5q4NQs4ghZwVCdMhj6LVt1YTJcwiuULtDTEgpFZZeW/nC8yiC53hpUFOVxhH++ILx1T65jpY8yDn6ct++3mgVeVotg/5tWXYb5FYqBtJiwU/LJJxhJYqUWyy4pd9dHUJBQojuAE8FoW1DmjokrpDWgjOMMp3am4GjNT04hCg+o0Z3SByYx6VIqfSR9fsXw");
</pre> 
</li>
<li><p>5、将第3步中Target Manager创建的database，传入相关的图片文件。也可以不传，这步可选；<a href="https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html" target="_blank" rel="external">怎样使用设备数据</a>。我们在<a href="https://developer.vuforia.com/targetmanager/project/checkDeviceProjectsCreated?dataRequestedForUserId=" target="_blank" rel="external">官方Developer</a>创建，下载对应的Database，在添加图片时，对应的星星数越高表明识别度越高<br><img src="http://upload-images.jianshu.io/upload_images/619906-9a71472177725481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Target-Manager"><br>解压并将其引入到工程中：<br><img src="http://upload-images.jianshu.io/upload_images/619906-d8ea91265da85cc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引入工程"><br>这一步可以不做，因为这只是在给后面打基础而已，如果只是运行demo的话是不需要做这一步的。如果做了这一步，在扫描你对应的图片的时候是没有任何效果的，具体的操作后面。</p>
</li>
<li><p>6、编译运行，由于需要使用到传感器，所以必须使用真机来运行。关于真机运行的相关事项查看apple developer</p>
</li>
</ul>
<h2 id="源码阅读顺序"><a href="#源码阅读顺序" class="headerlink" title="源码阅读顺序"></a>源码阅读顺序</h2><blockquote>
<p>源码说明：<br>Voforia SDK版本：<code>vuforia-sdk-ios-6-5-19</code><br>iOS Samples版本：<code>vuforia-samples-core-ios-6-5-20</code></p>
<p>如果不想看源码相关可直接跳过这部分，直接跟着“收尾”做自定义的tracker和模型（替换Teapot茶壶模型为自己的）</p>
</blockquote>
<p>为何要阅读源码？因为在<strong>Voforia</strong>的官方文档中我没有找到我自己想要的信息。所以我们需要通过阅读源码，来找到怎样才能去修改贴在目标图像中虚拟模型。以sample中<code>ImageTargetsViewController</code>为例来解读！<br>首先查看<code>ImageTargetsViewController.h</code>文件，我们先不看成员变量。先来看属性</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">属性类型</th>
<th style="text-align:left">初步作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>eaglView</strong></td>
<td style="text-align:left"><code>ImageTargetsEAGLView*</code></td>
<td style="text-align:left">初步认定为一个展示视图</td>
</tr>
<tr>
<td style="text-align:left"><strong>tapGestureRecognizer</strong></td>
<td style="text-align:left"><code>UITapGestureRecognizer*</code></td>
<td style="text-align:left">一个点击手势</td>
</tr>
<tr>
<td style="text-align:left"><strong>vapp</strong></td>
<td style="text-align:left"><code>SampleApplicationSession*</code></td>
<td style="text-align:left">初步认定为一个会话层（类似于ISO网络七层模型中，在TCP可以归于应用层，也就是说想偷懒可以直接将其代码放入控制器中。个人理解）</td>
</tr>
<tr>
<td style="text-align:left"><strong>showingMenu</strong></td>
<td style="text-align:left"><code>BOOL</code></td>
<td style="text-align:left">一个flag</td>
</tr>
</tbody>
</table>
</div>
<p>从上表中出现的属性，我们先来分析一下属性<code>eaglView</code>和<code>vapp</code>。</p>
<h4 id="SampleApplicationSession类"><a href="#SampleApplicationSession类" class="headerlink" title="SampleApplicationSession类"></a>SampleApplicationSession类</h4><p>在<code>ImageTargetsViewController</code>控制器类中，和下面会讲到的<code>ImageTargetsEAGLView</code>都有<code>SampleApplicationSession</code>类型的属性，所以我们有必要先来看看该类。同样的先看头文件，因为头文件能够让我们对于该类有大体的认识，而不拘于类具体的实现细节。<br>  粗略来看，提供了一个初始化方法；一个初始化AR的方法；四个对AR的操作方法（它们不是我们需要的重点，等到需要的时候再来仔细阅读）；以及一个对Camera的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (id)initWithDelegate:(id&lt;SampleApplicationControl&gt;) delegate;</div><div class="line">- (void) initAR:(int) VuforiaInitFlags orientation:(UIInterfaceOrientation) ARViewOrientation;</div><div class="line">- (bool) startAR:(Vuforia::CameraDevice::CAMERA_DIRECTION) camera error:(NSError **)error;</div><div class="line">- (bool) pauseAR:(NSError **)error;</div><div class="line">- (bool) resumeAR:(NSError **)error;</div><div class="line">- (bool) stopAR:(NSError **)error;</div><div class="line">- (bool) stopCamera:(NSError **)error;</div></pre></td></tr></table></figure></p>
<p>上述的initAR方法是通过异步实现的，当其AR初始化完成之后会调用方法下面会提到的代理方法<code>onInitARDone</code>。顺藤摸瓜，我们来看看该代理，那么该代理所需要处理的事务有哪些呢？这里先将<code>SampleApplicationControl</code>的所有方法先列出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@required</div><div class="line">- (void) onInitARDone:(NSError *)error;</div><div class="line">- (bool) doInitTrackers;</div><div class="line">- (bool) doLoadTrackersData;</div><div class="line">- (bool) doStartTrackers;</div><div class="line">- (bool) doStopTrackers;</div><div class="line">- (bool) doUnloadTrackersData;</div><div class="line">- (bool) doDeinitTrackers;</div><div class="line">- (void)configureVideoBackgroundWithViewWidth:(float)viewWidth andHeight:(float)viewHeight;</div><div class="line"></div><div class="line">@optional</div><div class="line">- (void) onVuforiaUpdate: (Vuforia::State *) state;</div></pre></td></tr></table></figure></p>
<p>该代理方法中大多是涉及到的是tracker。通过从初始化方法开始查看方法调用，得出了一个程序执行流程图，<br><img src="http://upload-images.jianshu.io/upload_images/619906-ae15fadf72afc1f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-1"><br>我们主动调用<code>initAR</code>方法，其结果会由回调方法<code>onInitARDone</code>反应给开发者。开发者可以用通过调用<code>doInitTrackers</code>来控制是否需要去加载tracker数据，如果可以加载数据则通过调用回调方法<code>doLoadTrackersData</code>来获取数据。关于该类中其他几个方法<code>startAR , pauseAR, resumeAR, stopAR</code>由调用人员主动调用，调用这些方法会触发对应的方法回调。<br>现在我们需要把目光转向<code>ImageTargetsEAGLView</code>类，并去具体的看一下里面的相关细节。</p>
<h4 id="SampleAppRenderer类"><a href="#SampleAppRenderer类" class="headerlink" title="SampleAppRenderer类"></a>SampleAppRenderer类</h4><p>这个类主要是做渲染相关的工作，其源码大多数为OpenGL。所以对于该类我只做具体的作用分析，而不去解释具体的源代码（因为我也不懂），如有需要的话，自行深究吧，哈哈哈😄。这里先将各个方法的作用罗列出来：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">方法作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">initWithSampleAppRendererControl</td>
<td style="text-align:left">类初始化方法</td>
</tr>
<tr>
<td style="text-align:left">initRendering</td>
<td style="text-align:left">渲染相关的初始化</td>
</tr>
<tr>
<td style="text-align:left">setNearPlane:farPlane:</td>
<td style="text-align:left">配置投影矩阵数据</td>
</tr>
<tr>
<td style="text-align:left">renderFrameVuforia</td>
<td style="text-align:left">由Vuforia调用，渲染数据帧到屏幕</td>
</tr>
<tr>
<td style="text-align:left">renderVideoBackground</td>
<td style="text-align:left">后台渲染视频</td>
</tr>
<tr>
<td style="text-align:left">configureVideoBackgroundWithViewWidth:andHeight:</td>
<td style="text-align:left">视频相关的配置</td>
</tr>
<tr>
<td style="text-align:left">updateRenderingPrimitives</td>
<td style="text-align:left">更新渲染数据</td>
</tr>
</tbody>
</table>
</div>
<p>下面具体分析：老规矩，同样先看头文件，我们根据头文件暴露出来的方法一层一层往里剥。该类存在一个协议<code>SampleAppRendererControl</code>，和一个初始化方法<code>initWithSampleAppRendererControl</code>。使用这个方法需要传入一个遵守<code>SampleAppRendererControl</code>协议的类实例，第二个参数来决定<strong>VR/AR</strong>的模式，以及三个用于决定投影矩阵的参数。除了在初始化方法设置投影矩阵的参数，该类提供了一个public方法<code>setNearPlane:farPlane:</code>。进入到.mm文件中查看该初始化方法可以看出，只是对类内部私有属性进行相关的赋值操作以及对硬件设备进行相关的设置吧。<br>  现在来看看方法<code>initRendering</code>，这个方法里面主要是做了一些OpenGLES的东西，我们只需要知道里面做了一些和具体业务逻辑无关的东西就行了。<br>  接下来看<code>renderFrameVuforia</code>的作用是什么？源代码中说的很清楚：使用OpenGL绘制当前帧，<strong>当需要将当前帧渲染到屏幕上时</strong>，Vuforia会定期的在后台线程调用该方法。同样和业务逻辑无关，源码不细看。同样方法<code>renderVideoBackground</code>也是使用OpenGL来做，我们只需要从该方法的名字得知其用途（后台渲染视频）即可。<br>  <code>configureVideoBackgroundWithViewWidth:andHeight:</code>方法从名字就可以知道其作用。<code>updateRenderingPrimitives</code>方法的作用是：当屏幕尺寸发生改变或者是设备朝向改变之后，调用该方法来更新渲染原始数据。<br>  最后需要介绍一下该类很重要的的一个协议方法：<code>renderFrameWithState</code>，该方法被用于获取渲染相关的数据。通过对.mm文件可知，每渲染一次都会调用该方法一次。</p>
<h4 id="ImageTargetsEAGLView类"><a href="#ImageTargetsEAGLView类" class="headerlink" title="ImageTargetsEAGLView类"></a>ImageTargetsEAGLView类</h4><p>该类的头文件所暴露出来的初始化方法<code>- (id)initWithFrame:(CGRect)frame appSession:(SampleApplicationSession *) app</code>，我们以该方法入手来分析。第一个参数为当前视图的大小设置，第二个参数为前面我们讲到过的一个类实例。头文件中余下的方法还有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)finishOpenGLESCommands;</div><div class="line">- (void)freeOpenGLESResources;</div><div class="line"></div><div class="line">- (void) setOffTargetTrackingMode:(BOOL) enabled;</div><div class="line">- (void) configureVideoBackgroundWithViewWidth:(float)viewWidth andHeight:(float)viewHeight;</div><div class="line">- (void) updateRenderingPrimitives;</div></pre></td></tr></table></figure></p>
<p>方法<code>finishOpenGLESCommands , freeOpenGLESResources</code>分别对应着结束OpenGL和释放OpenGL的资源。configureVideoBackgroundWithViewWidth:andHeight: , updateRenderingPrimitives和类SampleAppRenderer公开的方法名一样，这里我猜测它们作用是一样的。<code>setOffTargetTrackingMode:</code>方法作用目前还不是很清晰，需要去.mm文件中详查。<br>  现在进入实现文件中，源码中提到了关于OpenGL线程安全的问题。iOS上的OpenGL ES是线程不安全的，在程序中Vuforia使用下面的方法来保证线程（OpenGL 上下文）安全：</p>
<ul>
<li>a、在主线程中创建OpenGL ES上下文。</li>
<li>b、Vuforia相机开始时，将其位于我们自己EAGLView视图上，并开启renderer线程。</li>
<li>c、Vuforia会在renderer线程上，定期调用我们的renderFrameVuforia（SampleAppRenderer类提到）方法。当第一次调用该方法的时候，<code>defaultFramebuffer</code>并不存在，调用createFramebuffer方法来创建它。createFramebuffer由主线程调用，而与此同时renderer线程会被阻塞。因此确保OpenGL ES上下文不会被并行使用</li>
</ul>
<p>在initWithFrame:appSession:的实现方法中会进行session，OpenGL的context和Renderer的赋值，初始化和绑定工作。而方法configureVideoBackgroundWithViewWidth:andHeight: , updateRenderingPrimitives在其实现方法中的确只是简单的调用了一下SampleAppRenderer 类的实例方法。<br>  现在主要来看看方法<code>setOffTargetTrackingMode :</code>，它的实现很简单只是对其私有成员变量NO。但是却在协议方法<code>renderFrameWithState</code>中大量的使用。该方法大部分是OpenGL相关的工作，我没有深究下去，只整理出来一个工作流程图：<br><img src="http://upload-images.jianshu.io/upload_images/619906-cfd6bcc49e13644a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-2"><br>目前来看ImageTargetsEAGLView类的主要作用在于保证OpenGL在iOS中达到线程安全，创建buffer和对buffer的管理，提供了对OpenGL的控制，而实际的渲染则由SampleAppRenderer来实现。</p>
<h4 id="ImageTargetsViewController类"><a href="#ImageTargetsViewController类" class="headerlink" title="ImageTargetsViewController类"></a>ImageTargetsViewController类</h4><p>现在将目光回到<code>ImageTargetsViewController</code>类上面来。由于是一个控制器类，所以我直接从.mm文件中着手。根据ViewController的加载顺序来看具体的逻辑，首先查找<code>loadView</code>方法，如果没有则查找<code>viewDidLoad</code>。源码中，loadView方法主要创建了vapp，eaglView以及对vapp初始化了AR相关的事务（其他视图和手势等先忽略，只关心属性vapp,eaglView相关的逻辑），将ViewController的View设置为eaglView。<br>  在loadView中将vapp的代理设置为控制器自身，此时通过上面介绍<strong> SampleApplicationSession</strong>时对应的程序执行流程，将目光放在对应的部分协议方法上面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@protocol SampleApplicationControl</div><div class="line">- (void) onInitARDone:(NSError *)error;</div><div class="line">- (bool) doInitTrackers;</div><div class="line">- (bool) doLoadTrackersData;</div><div class="line">- (bool) doStartTrackers;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>从图-1可以看出是由<code>doInitTrackers</code>的返回值来判断是否需要去加载tracker数据(doLoadTrachersData)，最后在onInitARDone方法流程结束。通过这个就确定了我们的源码查看顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/// doInitTrackers --&gt; doLoadTrackersData --&gt; onInitARDone</div></pre></td></tr></table></figure></p>
<p>那么在ImageTargetsViewController类中，其流程图如下：<br><img src="http://upload-images.jianshu.io/upload_images/619906-aadd870b1aae0265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-3"><br>自此我们的源码阅读就告一段落，最后我们将要去实现开始提到的目的！</p>
<h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>读到这里，自定义的数据集的切入点在方法<strong><code>doLoadTrackersData</code></strong>方法中，并且要doInitTrackers方法返回YES。如果没有执行“安装步骤”中的第5步的话，现在可以去做了！做完之后添加如下代码到工程中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">///ImageTargetsViewController.mm -&gt; doLoadTrackersData</div><div class="line">dataSetCustom = [self loadObjectTrackerDataSet:@&quot;WillDB_Device.xml&quot;];/// 这个dataset为你自己的名字</div><div class="line">if (dataSetCustom == NULL) &#123;</div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line">if (! [self activateDataSet:dataSetCustom]) &#123;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行程序，扫描对应的图片发现是能够成功扫描对应的图片的。但是系统的图片能出来一个“茶壶”，而我们自己的图片上面什么也没有呢？<br>在这里我不想又去使用这个烦人的“茶壶”OpenGL模型了，我选择的是一个皮卡丘的原型（在文末我会将改造过的demo传到Github可以去那里下载这个原型）。</p>
<h4 id="模型obj到opengl数据的转换"><a href="#模型obj到opengl数据的转换" class="headerlink" title="模型obj到opengl数据的转换"></a>模型obj到opengl数据的转换</h4><p>就目前我知道的来说，在Xcode中无法使用<strong>.obj</strong>的模型数据的。我在网上找到了一个工具<strong><a href="https://github.com/HBehrens/obj2opengl" target="_blank" rel="external">obj2opengl</a></strong>，具体的使用方法见<a href="http://heikobehrens.net/2009/08/27/obj2opengl/" target="_blank" rel="external">这里</a>，我还是大体来说一下使用步骤：<br>将下载好的文件放到特定的文件夹中，然后把对应的obj文件和它放在一起，使用终端进入<strong>obj2opengl.pl</strong>文件所在文件夹之后，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./obj2opengl.pl yourobjfilename</div></pre></td></tr></table></figure></p>
<p>成功后，它会生成一个头文件，这就是通过obj文件生成的纹理坐标代码，在该头文件中有3个数组，这三个数组分别对应着<strong>xxxVerts [], xxxNormals [], xxxTexCoords []</strong>，和一个xxxxNumVerts（xxx为你的obj文件名字），<a href="http://heikobehrens.net/2009/08/27/obj2opengl/" target="_blank" rel="external">具体使用说明</a>。</p>
<h4 id="模型替换"><a href="#模型替换" class="headerlink" title="模型替换"></a>模型替换</h4><p>通过前面的源码阅读，我们知道ImageTargetsViewController类是用来加载tracker数据的，SampleAppRenderer类是做渲染相关的数据，SampleApplicationSession类是使用tracker数据并控制AR，最后只剩下一个ImageTargetsEAGLView类。在该类中会做如下操作：</p>
<ul>
<li>1、在textureFilenames数组中，添加一个新的<a href="https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/06%20Textures/" target="_blank" rel="external">纹理</a>。这个自己选择一个纹理图片，我是随便选的，所以看起来会很丑。</li>
<li><p>2、在ImageTargetsEAGLView类的头文件中添加一个私有成员变量<strong>pikachuModel</strong>。用它来代替例子中的buildingModel。并在SampleApplication3DModel.h文件中添加方法<code>pikachu_ReWrite</code>，并在SampleApplication3DModel.m文件中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)pikachu_ReWrite&#123;</div><div class="line">#if kUse3DModel == 1</div><div class="line">  _numVertices = XY_PikachuMNumVerts;</div><div class="line">  _vertices = XY_PikachuMVerts;</div><div class="line">  _normals = XY_PikachuMNormals;</div><div class="line">  _texCoords = XY_PikachuMTexCoords;</div><div class="line">#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>3、在ImageTargetsEAGLView.mm的方法<code>loadBuildingsModel</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pikachuModel = [[SampleApplication3DModel alloc] init];</div><div class="line">[pikachuModel pikachu_ReWrite];</div></pre></td></tr></table></figure>
</li>
<li><p>4、将ImageTargetsEAGLView.mm文件中所有的buildingModel替换为<strong>pikachuModel</strong>，最后调节一下变量<strong>kObjectScaleOffTargetTracking</strong>的值，这个值调节由自己决定。</p>
</li>
</ul>
<p>上述的修改灵感大多是来自头文件<strong>Teapot.h</strong>，但是我们使用obj2opengl时生成的文件中并没有Teapot.h中<strong>teapotIndices</strong>对应的数组。相反多了一个无符号的整形变量<code>xxxNumVerts</code>，所以除了上诉的方法以外还有另外一种方法，具体的代码修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/// ImageTargetsEAGLView.mm -&gt; renderFrameWithState方法中</div><div class="line">glVertexPointer(3, GL_FLOAT, 0, XY_PikachuMVerts);</div><div class="line">glNormalPointer(GL_FLOAT, 0, XY_PikachuMNormals);</div><div class="line">glTexCoordPointer(2, GL_FLOAT, 0, XY_PikachuMTexCoords);</div><div class="line"></div><div class="line">glDrawArrays(GL_TRIANGLES, 0, XY_PikachuMNumVerts);</div></pre></td></tr></table></figure></p>
<p>在使用这个方法时其（用obj2opengl生成的头文件的数组中的）数值比例是需要修改的，而且还需要对模型进行翻转。这个方法具体见<a href="https://developer.vuforia.com/forum/faq/android-how-do-i-replace-teapot" target="_blank" rel="external">How do I replace the Teapot</a>和<a href="https://library.vuforia.com/articles/Solution/Working-with-Vuforia-and-OpenGL-ES" target="_blank" rel="external">Replace the teapot model</a>。<br>在修改源码时主要就是在修改方法<code>renderFrameWithState</code>，它在介绍ImageTargetsEAGLView类时在文件的最开头就有提到，它是在每捕捉到一次tracker之后就会运行一次。<br>到这里一个很基本的Vuforia集成，源码的解读以及自定义tracker和模型就算完成了，最后附上Demo<a href="https://github.com/wangwangok/VuforiaSampleOBJC" target="_blank" rel="external">地址</a>。</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="http://heikobehrens.net/2009/08/27/obj2opengl/" target="_blank" rel="external">obj2opengl</a></li>
<li><a href="https://github.com/HBehrens/obj2opengl" target="_blank" rel="external">obj2opengl Github</a></li>
<li><a href="http://www.songho.ca/opengl/gl_transform.html" target="_blank" rel="external">OpenGL Transformation</a></li>
<li><a href="https://developer.vuforia.com/forum/faq/android-how-do-i-replace-teapot" target="_blank" rel="external">How do I replace the Teapot</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/619906-e5bbef9f60e5ee49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; alt=&quot;&quot;&gt;&lt;br&gt;  随着前有Apple在iOS11中提供了ARKit，后有Google推出的ARCore，显然掀起了一股AR热潮（都是一堆废话，说白了就是公司要求做）。&lt;br&gt;
    
    </summary>
    
      <category term="AR" scheme="http://yoursite.com/categories/AR/"/>
    
    
      <category term="AR" scheme="http://yoursite.com/tags/AR/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>OC与C的交互及其内存管理</title>
    <link href="http://yoursite.com/2017/08/01/oc_bridge_c_memory/"/>
    <id>http://yoursite.com/2017/08/01/oc_bridge_c_memory/</id>
    <published>2017-08-01T14:44:07.000Z</published>
    <updated>2017-09-13T14:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/619906-9ef7407a879ddf09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>  首先我们从最基本的C中三种链接属性，分别是：外部(external)、内部(internal)、无(none)。我们可以通过关键字<code>extern、static</code>来修改变量的链接属性。<br>  <a id="more"></a><br>  <strong>extern</strong>关键将一个变量声明为外部的链接属性之后，便可以去访问其他文件中同名该变量。<strong>static</strong>关键字在用于代码块外部的变量时是将其设置为内部链接属性，如果是在代码块内部则将该变量声明为静态变量。<br>  然后再来看看C中变量的存储类型。存储类型决定了变量的创建、销毁时机。存储变量的位置一共三个地方：<strong>普通内存、运行时堆栈、硬件寄存器</strong>。结合C中的三种链接属性，具体可以分为：</p>
<ul>
<li><strong>栈区</strong>：代码块中的变量在一般情况下为自动变量（由高地址向低地址生长）</li>
<li><strong>堆区</strong>：由<code>malloc、realloc、calloc</code>等函数动态生成的变量。这些变量我们只能访问其地址，而且当我们不再使用之后需要收到去free掉（由低地址向高地址生长）。</li>
<li><strong>全局区／静态区</strong>：代码块之外声明的变量总是存储于静态内存中（默认的链接属性为external）。未初始化的变量放在一起，已经初始化的紧挨地放着。<br>由于函数实参总是在堆栈中进行传递，所以函数的形参不能设置为static。</li>
<li><strong>常量区</strong>：常量字符串</li>
<li><strong>代码区</strong></li>
</ul>
<blockquote>
<p>在代码块内部声明的变量的缺省存储类型是自动的，即它存储于堆栈中，称为<strong>自动变量</strong>。<br>如果代码块被多次执行，那么自动变量将会重复创建，每一次创建时，它们在内存中的位置可能会不同。</p>
</blockquote>
<p>至于上面提到的寄存器中的变量，因为CPU对于寄存器的读取速度非常快，通常编译器会将使用频率很高的变量将其移到寄存器中。如果寄存器变量在多线程编程时出现了问题，我们可能需要显式将该变量声明为<code>volatile</code>，让编译器不对该变量进行优化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> 全局静态区</div><div class="line"> */</div><div class="line">int a = 10;  /// external</div><div class="line">extern int b;/// external</div><div class="line">static int c;/// internal</div><div class="line">int d(int e)&#123;/// 函数d 默认为external</div><div class="line">    int f = 15;/// auto 栈区</div><div class="line">    static int g = 20;/// 静态变量 静态区</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static int h(int i)&#123;/// 函数h 修改为static，internal</div><div class="line">    register int j;/// 寄存器类型，但是不一定起作用</div><div class="line">    int *k = malloc(sizeof(int));/// 堆区</div><div class="line">    free(k);</div><div class="line">    const int m = 25;/// 常量区</div><div class="line">    return 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="C中各个类型变量的内存管理"><a href="#C中各个类型变量的内存管理" class="headerlink" title="C中各个类型变量的内存管理"></a>C中各个类型变量的内存管理</h4><p>C语言中的内存管理与链接属性和所在内存区域都有直接关系。<strong>栈区</strong>的自动变量会在其作用域之后自动进行销毁；<strong>堆区</strong>的中由用户动态的创建的内存，需要手动调用<code>free</code>函数来释放（否则会造成内存泄漏）； <strong>全局区／静态区</strong>中的变量由系统创建和销毁，它们在程序开始运行之前就创建好，静态区的变量在程序运行过程中我们不能去修改； <strong>常量区</strong>程序结束后由系统释放。</p>
<blockquote>
<p>关于堆的一点儿说明：<br>如果我们在使用<code>malloc</code>和<code>free</code>时是无序的话，最终会产生堆碎片。<br>而且被分配的内存是经过对齐的，一般为2的乘方。</p>
</blockquote>
<p>堆的末端由一个称为<strong>break</strong>的指针来标识，当堆管理器需要更多内存时，它可以通过系统调用<code>brk</code>和<code>sbrk</code>来移动break指针。</p>
<hr>
<h2 id="OC与C的交互-bridge"><a href="#OC与C的交互-bridge" class="headerlink" title="OC与C的交互(__bridge)"></a>OC与C的交互(__bridge)</h2><p><img src="http://upload-images.jianshu.io/upload_images/619906-d75d32dc36154952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>当oc在和c相关的函数（CoreFoundataion、Runtime）进行交互时，我们需要将OC的类型传递到C中，也需要将C中的数据返回给OC使用。这其中就需要使用它们类型之间的转换。在<code>id</code>类型或者对象变量赋值给<code>void *</code>或者逆向赋值时都需要进行特定的转换，单纯的赋值我们可以使用 <code>__bridge</code> 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSObject *obj = [[NSObject alloc] init];</div><div class="line">void *p_obj = (__bridge void *)(obj);</div><div class="line">NSObject * r_obj = (__bridge NSObject *)(p_obj);</div></pre></td></tr></table></figure>
<p>相对于<code>__bridge</code>，我们可以使用<strong>``</strong>bridge_retained<code>修饰符，它即可以进行转换，也能持有被转换的对象__（上例中的</code>obj ``），因此该对象不会被废弃。其语法形式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__bridge_retained &lt;#CF type#&gt;)&lt;#expression#&gt;</div></pre></td></tr></table></figure>
<p><strong>bridge中还有个``</strong>bridge_transfer <code>，它的作用和__bridge_retained相反，被转换的变量（上例中的</code>p_obj <code>）所持有的对象（上例中的</code>obj <code>）会在</code>r_obj ``被赋值之后释放掉，其语法形式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__bridge_transfer &lt;#Objective-C type#&gt;)&lt;#expression#&gt;</div></pre></td></tr></table></figure>
<p>把上诉例子进行修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSObject *obj = [[NSObject alloc] init];</div><div class="line">void *p_obj = (__bridge_retained void *)(obj);</div><div class="line">NSObject * r_obj = (__bridge_transfer NSObject *)(p_obj);</div></pre></td></tr></table></figure>
<p>当我们在C语言的结构中，需要使用OC的类型作为结构成员，除了将OC的类型转换为<code>void *</code>之外，我们可以使用<code>__unsafe_unretained</code>修饰符（这个修饰符会在后面介绍）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/// 在C中使用OC的对象方式</div><div class="line">typedef struct rls_temp_ctx&#123;</div><div class="line">    NSObject __unsafe_unretained *obj;</div><div class="line">    void *target;</div><div class="line">&#125; rls_temp_context;</div><div class="line">/// 在C中传入OC对象</div><div class="line">rls_temp_context tmp_ctxs = &#123;</div><div class="line">    .obj = [NSObject new],</div><div class="line">    .target = (__bridge void *)(self)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>但是在使用<code>obj</code>时，由于<code>__unsafe_unretained</code>存在悬浮指针的问题，必须要判断该值是否存在。</p>
<hr>
<h2 id="OC内存管理"><a href="#OC内存管理" class="headerlink" title="OC内存管理"></a>OC内存管理</h2><p>前面看了C的内存管理，还看了C和OC的交互，最后就来看看在OC中内存管理应该注意的事项。<br>  现在我们讨论OC的内存管理是基于ARC的，其中对象变量的创建和释放问题和C的内存管理有点儿相似。大多数情况下系统会帮我们进行内存管理，我们只需要明确自己所声明的对象或者变量存在于什么区域（上面提到的内存区域），给它们添加合适的修饰符等等。<br>  大部分情况下，对于栈区、堆区、全局静态区的变量对象和C是相同的，我们可以类比来分析OC中对象或者变量的创建和释放时机。ARC中栈区用autoreleasepool管理的变量和C中的自动变量的内存管理时机很相似。<br>  在OC中使用基于C的函数时，通过<code>malloc</code>等函数声明的变量，都需要我们明确地调用<code>free</code>函数进行释放！抑或在使用CoreFondation、Runtime时，基本上如果遇到了包含有Copy， Create等关键字函数，在使用完成之后都需要手动释放内存。<br>2017-09-13更新：<br>当我们使用Runtime时，运用下面的方法来动态创建一个对象时，被创建的对象不会被释放，但是对应的<code>release</code>方法又是MRC时代的。所以我们可以使用如下方法来解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/// 创建对象</div><div class="line">id obj = ((id(*)(id,SEL))objc_msgSend)(((id(*)(id,SEL))objc_msgSend)([self class],@selector(alloc)),@selector(init));</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">/// 释放对象</div><div class="line">((id(*)(id,SEL))objc_msgSend)(obj,NSSelectorFromString(@&quot;release&quot;));</div></pre></td></tr></table></figure></p>
<h4 id="内存管理关键字"><a href="#内存管理关键字" class="headerlink" title="内存管理关键字"></a>内存管理关键字</h4><p>下面来介绍一下，在Objective-C的ARC中所涉及到的关键字。</p>
<ul>
<li><p>1、<code>__strong</code>为默认值，在声明成员变量和方法参数时也可以使用！</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__strong id obj_var = [[NSObject alloc] init];</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>作用：默认的行为。</strong></p>
<ul>
<li><p>2、<code>__weak</code>是不会持有对象实例，__weak修饰符可以避免循环引用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__weak id obj2 = nil;</div><div class="line">&#123;</div><div class="line">        __strong id obj_var = [[NSObject alloc] init];/// 自己生成对象并持有</div><div class="line">        obj2 = obj_var;/// obj2持有对象的弱引用</div><div class="line">        NSLog(@&quot;__weak %@&quot;,obj2);/// 此时由于在obj_var变量可用域中，obj2此时有值</div><div class="line">&#125;</div><div class="line">NSLog(@&quot;__weak %@&quot;,obj2);/// 由于不在obj_var作用域之外，obj_var被释放。而且obj2是弱引用于obj_var的，所以此时obj2值为空</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>作用：避免循环引用，不持有对象实例</strong></p>
<ul>
<li><p>3、<code>__unsafe_unretained</code>修饰符的变量不属于编译器的内存管理对象。它和__weak类似，不会持有对象实例；</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">__unsafe_unretained id obj1 = nil;</div><div class="line">&#123;</div><div class="line">/// 在obj_var作用域内，__unsafe_unretained和__weak是一样的</div><div class="line">        __strong id obj_var = [[NSObject alloc] init];</div><div class="line">        obj1 = obj_var;</div><div class="line">        NSLog(@&quot;__unsafe_unretained %@&quot;,obj1);</div><div class="line">&#125;</div><div class="line">NSLog(@&quot;__unsafe_unretained %@&quot;,obj1);/// 此时变量已经被遗弃，成为悬浮指针</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>在使用<code>__unsafe_unretained</code>修饰符时，赋值给<strong>strong修饰符的变量时，需要检查被赋值的对象是否存在（也就是被</strong>unsafe_unretained修饰的变量）</p>
</blockquote>
<p><strong>作用：在iOS4之前__weak的替代品，但是在将其赋值给其他时，最好做非空判断</strong></p>
<ul>
<li><p>4、<code>__autoreleasing</code>修饰符的变量替代调用MRC时代的<code>autorelease</code>方法，该对象会被注册到autoreleasepool中。以下是__autoreleasing修饰符的使用场景：</p>
<p>  1）、在生成对象时，编译器会检查方法名是否是以alloc/new/copy/mutablcopy开始（自己生成自由持有）。如果不是自己生成的则自动将返回值注册到autoreleasepool中。<br>2）、对象作为返回值时，编译器会自动将其注册到autoreleasing中。<br>3）、在使用<strong>weak修饰符的变量时就必定要使用注册到autoreleasepool中的对象。<br>4）、</strong>id的指针或者对象的指针(NSObject <strong>/NSError </strong>)在没有显示指定时会被附加上<code>__autoreleasing</code>修饰符__。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSError *error = nil;</div><div class="line">BOOL result = [self performOperationWithError:&amp;error];</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后还是去看看<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">这套题</a>，它的解释对于理解内存的释放很有益处。对于这套题我已经推荐了几次了，哈哈哈。</p>
<h4 id="相关引用"><a href="#相关引用" class="headerlink" title="相关引用"></a>相关引用</h4><ul>
<li><a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">ARC</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/619906-9ef7407a879ddf09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;  首先我们从最基本的C中三种链接属性，分别是：外部(external)、内部(internal)、无(none)。我们可以通过关键字&lt;code&gt;extern、static&lt;/code&gt;来修改变量的链接属性。&lt;br&gt;
    
    </summary>
    
      <category term="C、OC" scheme="http://yoursite.com/categories/C%E3%80%81OC/"/>
    
    
      <category term="内存管理" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>从头认识GCD——相关函数的使用</title>
    <link href="http://yoursite.com/2017/07/29/gcd_func/"/>
    <id>http://yoursite.com/2017/07/29/gcd_func/</id>
    <published>2017-07-29T10:33:38.000Z</published>
    <updated>2017-07-29T10:53:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/619906-d284587e19456111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>  在上一篇文章中，我们对GCD有了基本的认知，知道其中一些简单的类型，和一些简单函数。这本篇文章中，我们将继续学习GCD中我们在日常开发中使用较多的函数，及其使用方法。在本篇会介绍<strong>dispatch_after、dispatch_apply、dispatch_group_t、dispatch_semaphore_t和dispatch_barrier</strong>等相关函数。</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a><a id="more"></a> </h2><h3 id="dispatch-after／dispatch-time-t"><a href="#dispatch-after／dispatch-time-t" class="headerlink" title="dispatch_after／dispatch_time_t"></a>dispatch_after／dispatch_time_t</h3><p>我先来说说<code>dispatch_after</code>，从某种意义上来说，它属于任务提交的一种方式。在刚刚接触iOS开发的时候，我一直在想“ 对于<code>dispatch_after</code>它是同步提交代码块还是异步提交的代码块的呢？ ”。后来看到Apple的文档中说到”This function waits until the specified time and then asynchronously adds block to the specified queue”，也就是说它的延迟执行，并不是马上就将代码块就提交到指定的队列中，而是<strong>等到指定的时间通过异步的方式将提其提交到指定的队列中去</strong>。因此从这段话中也可以看出它仅仅是<code>dispatch_async</code>的一种。该函数的声明如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);</div></pre></td></tr></table></figure>
<p>到这里就需要来系统地说一说<code>dispatch_after</code>函数的第一个参数，一个<code>dispatch_time_t</code>类型的变量。<code>dispatch_time_t</code>实际是<code>uint64_t</code>类型。系统为该类型定义了两个特殊值，分别是<strong>DISPATCH_TIME_NOW、DISPATCH_TIME_FOREVER</strong>，其中<code>DISPATCH_TIME_NOW</code>表示值为0，而<code>DISPATCH_TIME_FOREVER</code>表示为无穷大（infinity）。除了这两个特殊值之外，我们可以使用函数<code>dispatch_time()</code>来创建相对于默认时钟的时间；或者使用<code>dispatch_walltime()</code>函数获取绝对时间。<br>对于<code>dispatch_time()</code>函数，第一个参数我们传入DISPATCH_TIME_NOW或者DISPATCH_TIME_FOREVER值。</p>
<blockquote>
<p><code>dispatch_time()</code>函数第二个参数接受的是<strong> 基于纳秒级别的数值 </strong>。</p>
</blockquote>
<p>这时候就需要将具体的数字乘以一个常数，在<a href="https://developer.apple.com/documentation/dispatch/dispatch_time_multiplier_constants?language=objc" target="_blank" rel="external">官方文档</a>中列出了相关的常数。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">常数</th>
<th style="text-align:left">意义</th>
<th style="text-align:left">具体数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NSEC_PER_SEC</td>
<td style="text-align:left">表示一秒能转换成多少纳秒</td>
<td style="text-align:left"><code>1000000000ull</code></td>
</tr>
<tr>
<td style="text-align:left">USEC_PER_SEC</td>
<td style="text-align:left">表示一秒能转换成多少微秒</td>
<td style="text-align:left"><code>1000000ull</code></td>
</tr>
<tr>
<td style="text-align:left">NSEC_PER_USEC</td>
<td style="text-align:left">表示一微秒转换成多少纳秒</td>
<td style="text-align:left"><code>1000ull</code></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/// 使用相对时间，相对于现在延迟五秒</div><div class="line">dispatch_time_t time_t = dispatch_time(DISPATCH_TIME_NOW, 5 * NSEC_PER_SEC);</div><div class="line">dispatch_after(time_t, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;Run&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果我们想要该代码块延迟到某一指定时刻去执行，我们只需要去修改<code>dispatch_after</code>中的<code>dispatch_time_t</code>类型中值，在这里我们使用函数<code>dispatch_walltime</code>来获取绝对的时间戳值。<code>dispatch_walltime()</code>函数的一个参数是<code>struct timespec</code>类型的一个变量，它是一个结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_STRUCT_TIMESPEC</div><div class="line">&#123;</div><div class="line">	__darwin_time_t  tv_sec;</div><div class="line">	long  tv_nsec;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>分别为秒和纳秒。<strong>timespec是基于纳秒级别的数值</strong>，关于<code>dispatch_walltime</code>具体是方式之一如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/// 延迟到某一绝对时刻执行</div><div class="line">struct timespec __tp;</div><div class="line">double sec, n_sec;</div><div class="line">n_sec = modf(1500794750.797543543, &amp;sec);</div><div class="line">__tp.tv_sec = sec;</div><div class="line">__tp.tv_nsec = n_sec;</div><div class="line">dispatch_after(dispatch_walltime(&amp;__tp, 0), dispatch_get_main_queue(), ^&#123;</div><div class="line">        ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上诉代码要等到时间戳为<code>1500794750</code>时才会将代码块提交到指定的事件队列中。</p>
<h3 id="dispatch-apply"><a href="#dispatch-apply" class="headerlink" title="dispatch_apply"></a>dispatch_apply</h3><p><strong><em>dispatch_apply</em></strong>是<code>dispatch_sync</code>函数配合不同的的<code>dispatch_queue_t</code>队列，来循环执行任务。</p>
<blockquote>
<p>如果在<code>dispatch_apply</code>函数中传入的是一个并发队列，那么block中的任务就可以被并发的调用！相对于一般的for循环来说要高效许多。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t apply_queue = dispatch_queue_create(&quot;com.example.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, apply_queue, ^(size_t index) &#123;</div><div class="line">        NSLog(@&quot;%zd&quot;,index);</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;End&quot;);</div></pre></td></tr></table></figure>
<p>结果如下<code>0, 2, 3, 1, 4, End</code>。但是我们将上面的并发队列改成串行队列之后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t apply_queue = dispatch_queue_create(&quot;com.example.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, apply_queue, ^(size_t index) &#123;</div><div class="line">        NSLog(@&quot;%zd&quot;,index);</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;End&quot;);</div></pre></td></tr></table></figure>
<p>返回的结果<code>0, 1, 2, 3, 4, End</code>和正常的for循环没有什么差距。但是不管是在并发的队列还是在串行的队列中，<code>End</code>总是最后才打印的。</p>
<h3 id="dispatch-group-t相关函数"><a href="#dispatch-group-t相关函数" class="headerlink" title="dispatch_group_t相关函数"></a>dispatch_group_t相关函数</h3><p>使用dispatch_group可以把许多操作进行合并。在将多个任务block提交之后，我们可以在dispatch_group中获取到这些操作全部完成的时间（不管是串行执行还是并行执行）。<br>现在我们有一个场景：第一步，我们需要将多个本地资源传递给服务器。我们用<code>dispatch_group</code>相关的技术来实现这个需求。创建一个<code>dispatch_group_t</code>类型的变量实现非常简单，不像其他GCD函数需要一些其他的参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t upload_group = dispatch_group_create();</div></pre></td></tr></table></figure>
<p>当创建好了dispatch_group之后，我们需要将这些任务进行提交，这里我使用上一节的<code>dispatch_apply</code>来将多个任务放在并发的队列中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t upload_queue = dispatch_queue_create(&quot;com.example.upload.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^(size_t index) &#123;</div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), upload_queue, ^&#123;</div><div class="line">  /// 模拟网络请求</div><div class="line">    NSLog(@&quot;Upload %zd&quot;,index);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在大部分的应用中的上传请求，都有一个上传完成的标志。第二步，那么在这个场景中我们如何知道所有图片已经上传成功呢？我们使用同步的方式，用户的交互不起作用，静静地等待上传完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t upload_group = dispatch_group_create();</div><div class="line">dispatch_queue_t upload_queue = dispatch_queue_create(&quot;com.example.upload.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^(size_t index) &#123;</div><div class="line">        dispatch_group_enter(upload_group);</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), upload_queue, ^&#123;/// 模拟网络请求</div><div class="line">            NSLog(@&quot;Upload %zd&quot;,index);</div><div class="line">            dispatch_group_leave(upload_group);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_wait(upload_group, DISPATCH_TIME_FOREVER);</div><div class="line">NSLog(@&quot;Upload Complete&quot;);</div></pre></td></tr></table></figure>
<p><code>dispatch_group</code>的管理是基于计数来做的。<code>dispatch_group_enter</code>会增加该Group内部的任务计数，<code>dispatch_group_leave</code>会减少该Group中未完成的计数，它们两个函数必须配对使用。<br><code>dispatch_group_wait</code>函数和我们在上一篇文中讲到的<code>dispatch_block_wait</code>函数功能类似，只不过<code>dispatch_group_wait</code>是针对多个block的<strong>同步方法</strong>，它会等到Group中所有的任务执行完毕之后才会去继续执行后面的内容。<br>  既然上面提到了<code>dispatch_group_wait</code>函数对应<code>dispatch_block_wait</code>函数，那么很明显应该存在<code>dispatch_block_notify</code>函数对应的Group函数。我们将上面的函数进行稍加改动，将同步的方式改为异步的方式，让用户能够做其他的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t upload_group = dispatch_group_create();</div><div class="line">dispatch_queue_t upload_queue = dispatch_queue_create(&quot;com.example.upload.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^(size_t index) &#123;</div><div class="line">        dispatch_group_enter(upload_group);</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), upload_queue, ^&#123;/// 模拟网络请求</div><div class="line">            NSLog(@&quot;Upload %zd&quot;,index);</div><div class="line">            dispatch_group_leave(upload_group);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_notify(upload_group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;Upload Complete&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  其实相对于使用繁琐的<code>dispatch_group_enter、dispatch_group_leave</code>，Apple给我们提供了更为简单的函数<code>dispatch_group_async</code>。我这样做的目的是为了在一开始就能让我们清楚，在Group内部是什么在决定着<code>dispatch_group_wait 、dispatch_group_notify</code>的触发时机，我们还是对上面的例子进行稍加修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t upload_group = dispatch_group_create();</div><div class="line">dispatch_queue_t upload_queue = dispatch_queue_create(&quot;com.example.upload.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_apply(5, dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^(size_t index) &#123;</div><div class="line">        dispatch_group_async(upload_group, upload_queue, ^&#123;</div><div class="line">            NSLog(@&quot;Upload %zd&quot;,index);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_notify(upload_group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;Upload Complete&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>很明显对于使用<code>dispatch_group_async</code>给我们带来便利的同时，在灵活性上也就出现缺失，再者就是在用Group做同步的时候使用<code>dispatch_group_enter、dispatch_group_leave</code>是更好的选择！</p>
<h3 id="dispatch-semaphore-t相关函数"><a href="#dispatch-semaphore-t相关函数" class="headerlink" title="dispatch_semaphore_t相关函数"></a>dispatch_semaphore_t相关函数</h3><p>在系统中，给予每一个进程一个信号量，代表每个进程目前的状态，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来（来自<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E8%99%9F%E6%A8%99" target="_blank" rel="external">维基百科</a>）。通俗一点儿讲就是说在进程内部有一原子递增和递减的计数器（也就是该数据变量<strong>具有原子性</strong>）。<br>如果触发了某个操作使得信号量小于等于0，那么该操作将会被阻塞，直到其信号量大于0。上面提到过，信号量是基于进程的。所以：</p>
<blockquote>
<p>信号量不依赖于任何队列，它可以在任何线程中使用。</p>
</blockquote>
<p>在GCD中，函数<code>dispatch_semaphore_signal</code>增加信号量计数，如果之前信号量计数小于等于0，该函数会唤醒当前正在等待的线程。相反，函数<code>dispatch_semaphore_wait</code>会减少信号量计数，如果当该信号量计数小于或者等于0之后，会阻塞当前线程，等待其他操作来增加信号量计数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (NSArray *)downloadSync&#123;</div><div class="line">    NSMutableArray *contents = [NSMutableArray array];</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</div><div class="line">    </div><div class="line">    dispatch_group_t upload_group = dispatch_group_create();</div><div class="line">    dispatch_queue_t upload_queue = dispatch_queue_create(&quot;com.example.download.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">    dispatch_apply(5, dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^(size_t index) &#123;</div><div class="line">        dispatch_group_enter(upload_group);</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), upload_queue, ^&#123;</div><div class="line">            NSString *cts = [NSString stringWithFormat:@&quot;%zd&quot;,index];</div><div class="line">            NSLog(@&quot;~ %@ ~&quot;,cts);</div><div class="line">            [contents addObject:cts];</div><div class="line">            dispatch_group_leave(upload_group);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_notify(upload_group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;);</div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    return contents;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们现在来看看上面这个方法可以正常的返回吗？除了<code>dispatch_semaphore_t</code>相关的代码，我都是直接从上面拷贝下来，没有做任何修改。当我跑起来之后，始终方法<code>downloadSync</code>不会返回，这里很明显的是造成了死锁的问题！由于<code>dispatch_semaphore_wait</code>函数会阻塞当前线程（它此时是处于主线程中），<code>dispatch_group_notify</code>函数的任务线程即为主线程对应的主任务队列。<code>dispatch_semaphore_wait</code>需要等到函数<code>dispatch_semaphore_signal</code>来增加信号量计数之后才会继续执行主线程，而<code>dispatch_group_notify</code>又要在主线程中执行（由于主线程被阻塞）之后才能去调用<code>dispatch_semaphore_signal</code>函数，因此就造成了死锁，程序永远不会继续执行！。<br>解决办法也很简单，将<code>dispatch_semaphore_signal</code>放在一个并行的任务队列中进行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_group_notify(upload_group, dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0), ^&#123;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面使用信号量的相关函数，实现了异步转同步的需求。</p>
<h3 id="dispatch-barrier"><a href="#dispatch-barrier" class="headerlink" title="dispatch_barrier"></a>dispatch_barrier</h3><p><code>dispatch_barrier</code>的作用是在并发队列中实现同步操作。在并发队列中，任务的提交顺序会影响到执行顺序，当异步提交的任务在<code>dispatch_barrier</code>之后，该任务需要等到<code>dispatch_barrier</code>提交的任务执行完成之后才会开始执行。<br>把上面的话用下面的图通俗的来解释一下：<br><img src="http://upload-images.jianshu.io/upload_images/619906-c458370900934975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>用下面的伪代码来实现一下上图中的相关任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_async(task_queue, task_1);</div><div class="line">dispatch_async(task_queue, task_2);</div><div class="line">dispatch_async(task_queue, task_3);</div><div class="line">dispatch_barrier_async(task_queue, task_4);</div><div class="line">dispatch_async(task_queue, task_5);</div></pre></td></tr></table></figure>
<p><strong>函数<code>dispatch_barrier_async</code>中block参数，会被目标队列复制并持有，直到任务完成时被释放</strong>。官方文档中提到：</p>
<blockquote>
<p>目标队列必须是用户手动创建的并发队列，如果传入的是串行队列或者是全局并发队列，那么这个函数就和<code>dispatch_async</code>类似。</p>
</blockquote>
<p><code>dispatch_barrier_sync</code>在做同步操作时和<code>dispatch_barrier_async</code>效果类似，但是它必须得等到block任务完成之后才会返回！而且<code>dispatch_barrier_sync</code>函数的目标线程不会复制和持有block。</p>
<h3 id="dispatch-once"><a href="#dispatch-once" class="headerlink" title="dispatch_once"></a>dispatch_once</h3><p>在这篇文章的最后以<code>dispatch_once</code>来做一个结尾，对于<code>dispatch_once</code>我们iOS开发者用的太多了。<strong>该函数在多线程环境下同样也是安全的</strong>，如果是在多线程中进行调用，它会同步地等待block任务执行完成！官方文档中提出：对于<code>dispatch_once</code>函数的</p>
<blockquote>
<p>第一个参数必须是存储在全局区或者静态区的变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static dispatch_once_t predicate;</div><div class="line">dispatch_once(&amp;predicate, ^&#123;</div><div class="line">  ...        </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>关于dispatch_once更多的文章见<a href="https://www.mikeash.com/pyblog/friday-qa-2014-06-06-secrets-of-dispatch_once.html" target="_blank" rel="external">dispatch_once</a>，以及对应的源码<a href="https://github.com/apple/swift-corelibs-libdispatch/blob/master/src/once.c" target="_blank" rel="external">once.c</a>。第三篇文章会在后面放出来，我准备写关于<code>dispatch_source</code>和<code>dispatch_data</code>以及<code>dispatch_io</code>等相关知识。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>根据文中出现顺序</p>
<ul>
<li><a href="https://apple.github.io/swift-corelibs-libdispatch/" target="_blank" rel="external">Apple Dispatch Github</a></li>
<li><a href="https://developer.apple.com/documentation/dispatch/dispatch_time_multiplier_constants?language=objc" target="_blank" rel="external">Dispatch Time Multiplier Constants</a></li>
<li><a href="http://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html" target="_blank" rel="external">Elapsed Time</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E8%99%9F%E6%A8%99" target="_blank" rel="external">信号量</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/619906-d284587e19456111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;  在上一篇文章中，我们对GCD有了基本的认知，知道其中一些简单的类型，和一些简单函数。这本篇文章中，我们将继续学习GCD中我们在日常开发中使用较多的函数，及其使用方法。在本篇会介绍&lt;strong&gt;dispatch_after、dispatch_apply、dispatch_group_t、dispatch_semaphore_t和dispatch_barrier&lt;/strong&gt;等相关函数。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="实战" scheme="http://yoursite.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>从头认识GCD——派发队列基础</title>
    <link href="http://yoursite.com/2017/07/29/gcd_basic/"/>
    <id>http://yoursite.com/2017/07/29/gcd_basic/</id>
    <published>2017-07-29T10:33:29.000Z</published>
    <updated>2017-07-29T11:55:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/619906-27e0e0084cc378cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>  本文包括了从最基础的获取任务队列开始，配置任务队列，创建任务，提交任务一步一步地来复习GCD中所涉及到的知识。（建议在PC端浏览）<br>  <a id="more"></a><br>  包括使用较少的<code>dispatch_qos_class_t 、dispatch_block_t</code>等等知识点。<br>  GCD任务队列能够让开发者能够更加专注于同步或者异步任务task，而不用把重点放在创建线程和具体同步和加锁等相关操作。但是如果我们想异步做更加灵活的任务的话（比如后台任务之类的），那选择线程肯定是更好的选择。毕竟操作简单带来就是灵活性的确实嘛！首先先来看看派发队列。<br>  当用户向某一线程提交一个task时，<strong>_dispatch_queue_t_</strong>作为任务队列以用户期望的方式来管理这些task。 管理的任务的方式有两种类型，分别是串行队列(<code>DISPATCH_QUEUE_SERIAL</code>)和并行队列(<code>DISPATCH_QUEUE_CONCURRENT</code>)，它们两个是由宏定义的。 <br></p>
<hr>
<h4 id="一、获取任务队列"><a href="#一、获取任务队列" class="headerlink" title="一、获取任务队列"></a>一、获取任务队列</h4><p>现在问题来了，我们既然知道有这么一个类型了，那我们总要有方式来得到它啊是吧。就目前而言，Apple给我们提供获取该类型变量的方式有三种，分别是：</p>
<ul>
<li><p><strong><em><a href="https://developer.apple.com/documentation/dispatch/1452921-dispatch_get_main_queue?language=objc" target="_blank" rel="external">dispatch_get_main_queue</a></em></strong>：程序主线程的任务队列，这是一个串行队列（<code>DISPATCH_QUEUE_SERIAL</code>）。在程序<code>main()</code>函数被调用之前由系统自动创建。在官方文档中还提到了，我们可以主动去执行被添加到<code>main_queue</code>的任务task（也就是说我们可以主动来调用添加到主线程队列的<strong>block</strong>）。三个方法分别是：<code>dispatch_main()、UIApplicationMain 、CFRunLoopRun()</code>，选用其中一个。我尝试了一下使用<code>dispatch_main()</code>会导致程序中断。</p>
</li>
<li><p><strong><em><a href="https://developer.apple.com/documentation/dispatch/1452927-dispatch_get_global_queue?language=objc" target="_blank" rel="external">dispatch_get_global_queue</a></em></strong>：由系统定义并管理的一个全局并行队列。在获取时，我们需要指定任务队列的系统等级（DISPATCH_QUEUE_PRIORITY_HIGH、DISPATCH_QUEUE_PRIORITY_DEFAULT、DISPATCH_QUEUE_PRIORITY_LOW、DISPATCH_QUEUE_PRIORITY_BACKGROUND）。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是在iOS8以后，使用枚举<code>qos_class_t</code>的值，提供了细粒度更高的全局任务队列，关于QOS在后面统一梳理一下。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_get_global_queue(QOS_CLASS_UTILITY, 0);</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>该函数的返回值上使用<code>dispatch_resume、dispatch_suspend</code>无效，</p>
</blockquote>
<ul>
<li><p><strong><em>dispatch_queue_create</em></strong>：除了上诉系统提供的两种类型的任务队列之外，我们还可以自己去创建任务队列。我们可以自己创建串行（<code>DISPATCH_QUEUE_SERIAL</code>）和并行（<code>DISPATCH_QUEUE_CONCURRENT</code>）两种类型的队列，但是它们都有一个变种DISPATCH_QUEUE_SERIAL_INACTIVE, DISPATCH_QUEUE_CONCURRENT_INACTIVE。它们同样会有涉及到QOS的创建方法，后面一起记录一下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_create(&quot;com.example.gcd&quot;, DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上诉三种就是获得任务队列方法，我们在设置<code>dispatch_ge_global_queue</code>的第二个参数时一般设置为<strong><em>0</em></strong>。上面这三种方式是我们在日常开发中，使用并发编程时通过GCD的方式来获取任务队列的方法。<strong>在大部分时间使用并行的任务队列时，<code>global_queue</code>能够基本满足需求；对于我来说创建线程的场景，主要是当我们需要一个串行的任务，但是又不想在主线程去执行时使用</strong>。既然我在上面提到了QOS，下面我们就系统的来认识一下QOS。</p>
<h4 id="二、通过QOS配置队列"><a href="#二、通过QOS配置队列" class="headerlink" title="二、通过QOS配置队列"></a>二、通过QOS配置队列</h4><p>  由于在我们的程序中，存在各种各样的场景，比如用户界面刷新，网络请求，资源下载，缓存存取之类的。为了能够保证程序的高效响应，需要对不同的任务对资源的消耗做出一些调整。<br>此时我们就可以使用QOS来解决不同任务的资源分配问题，QOS可以用于<code>dispatch_queue, NSOperation, NSOperationQueue, NSThread ,pthreads</code>中，这篇文章中主要讲一下在<strong><em>dispatch_queue</em></strong>中的使用场景。</p>
<blockquote>
<p>在官方文档中也说，关于QOS的只能在iOS8以后使用</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">QOS_CLASS</th>
<th style="text-align:left">执行时机</th>
<th style="text-align:center">相关使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>USER_INTERACTIVE</strong></td>
<td style="text-align:left">必须是要及时处理</td>
<td style="text-align:center">等级最高。主要用户用户交互，比如主线程上的刷新用户界面等等。</td>
</tr>
<tr>
<td style="text-align:left"><strong>USER_INITIATED</strong></td>
<td style="text-align:left">需要很快完成工作</td>
<td style="text-align:center">它主要用于比如已经开了一个任务，此时需要立刻执行的场景。意思就是说需要瞬间完成的工作</td>
</tr>
<tr>
<td style="text-align:left">❌ DEFAULT</td>
<td style="text-align:left">——</td>
<td style="text-align:center">这个我们一般不使用，<code>dispatch_get_global_queue</code>就是这一等级。</td>
</tr>
<tr>
<td style="text-align:left"><strong>UTILITY</strong></td>
<td style="text-align:left">可能需要相当长一段时间</td>
<td style="text-align:center">不需要及时响应，比如下载操作之类的，但是用户是可以看见进度之类的</td>
</tr>
<tr>
<td style="text-align:left"><strong>BACKGROUND</strong></td>
<td style="text-align:left">长时间类型任务</td>
<td style="text-align:center">完全是后台执行，用户不知道进度的</td>
</tr>
<tr>
<td style="text-align:left">❌ UNSPECIFIED</td>
<td style="text-align:left">——</td>
<td style="text-align:center">开发人员没有指定，系统根据情况进行选定QOS等级</td>
</tr>
</tbody>
</table>
</div>
<p>上诉QOS对应OC参数如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">QOS-Class</th>
<th style="text-align:left">对应OC</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">USER_INTERACTIVE</td>
<td style="text-align:left">NSQualityOfServiceUserInteractive</td>
</tr>
<tr>
<td style="text-align:left">USER_INITIATED</td>
<td style="text-align:left">NSQualityOfServiceUserInitiated</td>
</tr>
<tr>
<td style="text-align:left">UTILITY</td>
<td style="text-align:left">NSQualityOfServiceUtility</td>
</tr>
<tr>
<td style="text-align:left">BACKGROUND</td>
<td style="text-align:left">NSQualityOfServiceBackground</td>
</tr>
</tbody>
</table>
</div>
<p>在dispatch_queue中，如果我们想要指定QOS的等级的话，我们可以使用函数<a href="https://developer.apple.com/documentation/dispatch/1453028-dispatch_queue_attr_make_with_qo" target="_blank" rel="external">dispatch_queue_attr_make_with_qos_class</a>。在创建任务队列时使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_attr_t attr_qos = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INTERACTIVE, 0);</div><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd&quot;, attr_qos);</div></pre></td></tr></table></figure>
<p>因为 <strong>QOS对于<code>dispatch_queue</code>来说是无法变更的属性</strong>，以致于我们无法去更改已存在任务队列的QOS属性。但是我们可以使用<code>dispatch_queue_get_qos_class</code>函数来获取任务队列的QOS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(the_queue, 0);</div><div class="line">/// 一般用于 根据已知队列来获取同qos等级的全局任务队列</div><div class="line">dispatch_get_global_queue(dispatch_queue_get_qos_class(the_queue, nil), 0);</div><div class="line">/// 或者是 根据已知的全局任务队列来创建与其qos相等的任务队列</div><div class="line">dispatch_queue_t the_global = dispatch_get_global_queue(QOS_CLASS_UTILITY, 0);</div><div class="line">dispatch_queue_t the_queue = dispatch_queue_create(&quot;com.example.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, dispatch_queue_get_qos_class(the_global, 0), 0));</div></pre></td></tr></table></figure>
<p>当我们要获取全局队列时，在此之前可以使用<code>DISPATCH_QUEUE_PRIORITY_HIGH、DISPATCH_QUEUE_PRIORITY_DEFAULT、DISPATCH_QUEUE_PRIORITY_LOW、DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>。现在我们可以使用QOS来获取一个全局的并发任务队列，因此我们有必要来了解一下它们之间的差异和共性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">以前</th>
<th style="text-align:left">现在QOS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Main Thread</td>
<td style="text-align:left">QOS_CLASS_USER_INTERACTIVE</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_QUEUE_PRIORITY_HIGH</td>
<td style="text-align:left">QOS_CLASS_USER_INITIATED</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_QUEUE_PRIORITY_DEFAULT</td>
<td style="text-align:left">QOS_CLASS_DEFAULT</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_QUEUE_PRIORITY_LOW</td>
<td style="text-align:left">QOS_CLASS_UTILITY</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_QUEUE_PRIORITY_BACKGROUND</td>
<td style="text-align:left">QOS_CLASS_BACKGROUND</td>
</tr>
</tbody>
</table>
</div>
<p>具体使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_get_global_queue(QOS_CLASS_USER_INTERACTIVE, 0);</div></pre></td></tr></table></figure>
<p> 除此之外，我们还可以在<code>dispatch_block</code>中对每一个人任务块来设置Qos等级，这里我先将<code>dispatch_block</code>提出来，后面我会对其进行较为详细的解释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t the_block = dispatch_block_create_with_qos_class(0, QOS_CLASS_UTILITY, -8, ^&#123;</div><div class="line">        ...</div><div class="line">&#125;);</div><div class="line">dispatch_async(the_queue, the_block);///dispatch_sync, dispatch_after等等需要用到dispatch_block的地方</div></pre></td></tr></table></figure>
<h4 id="三、创建任务"><a href="#三、创建任务" class="headerlink" title="三、创建任务"></a>三、创建任务</h4><p>  前面两点说了任务的执行地点和怎样来创建和配置任务的执行地点，但是我们必须得知道任务是什么？怎么创建任务？在GCD中使用block来作为任务提交给特定的任务队列，例如<strong>_dispatch_block_t_</strong>或者直接是一个简单的block。<br>对于<code>dispatch_block_t</code>类型的变量，首先我们得要知道怎么去创建它。首先根据我们的尝试（下面的例子出自<a href="https://developer.apple.com/documentation/dispatch/dispatch_block_t" target="_blank" rel="external">Apple官方</a>），对block进行直接赋值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t error_block;</div><div class="line">NSInteger x = 0;</div><div class="line">if (x) &#123;</div><div class="line">        error_block = ^void(void)&#123;</div><div class="line">            NSLog(@&quot;TRUE&quot;);</div><div class="line">        &#125;;</div><div class="line">&#125;else&#123;</div><div class="line">        error_block = ^void(void)&#123;</div><div class="line">            NSLog(@&quot;FALSE&quot;);</div><div class="line">        &#125;;</div><div class="line">&#125;</div><div class="line">error_block();/// unsafe</div></pre></td></tr></table></figure>
<p>  官网中解释到：“ 由于该<code>dispatch_block_t</code>变量是在栈内存上声明的，如果执行过该变量作用域之后就有可能导致该变量被释放 ”。到这里我们还是不得不提一下<code>block</code>在MRC和ARC下的区别，我们先看一篇<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">测试</a>，在这篇测试中很明显的一个点便是：“ MRC中有NSStackBlock类型，NSMallocBlock类型，NSGlobalBlock类型同时存在。但是在ARC中不再存在NSStackBlock类型，而是直接声明为NSMallocBlock类型” 。也就是说在ARC中就算是在函数方法中声明的block变量也是被声明为NSMallocBlock类型。<br>  NSMallocBlock类型就不存在上诉官网中提到的变量被提前释放的问题，这一步我并没有去实践，所以上诉结论是否为真，既然官方不建议这么做，那便放弃使用该方法。使用一下两种方式来创建<code>dispatch_block_t</code>变量：</p>
<ul>
<li><strong><em>dispatch_block_create</em></strong></li>
<li><strong><em>dispatch_block_create_with_qos_class</em></strong></li>
</ul>
<p>当我们在使用上诉两种方法来创建<code>dispatch_block_t</code>变量时，遇到的第一个便是<code>dispatch_block_flags_t</code>参数。它是一个枚举类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">枚举类型</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_ASSIGN_CURRENT</strong></td>
<td style="text-align:left">说明该块会被分配在创建该对象的上下文中（直接执行该块对象时推荐使用）</td>
</tr>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_BARRIER</strong></td>
<td style="text-align:left">类似于在做同步操作时的<code>barrier</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_DETACHED</strong></td>
<td style="text-align:left">表明dispatch_block与当前的执行环境属性无关</td>
</tr>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_ENFORCE_QOS_CLASS</strong></td>
<td style="text-align:left">当dispatch_block提交到队列或者直接提交执行做同步操作时，该值是默认值</td>
</tr>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_INHERIT_QOS_CLASS</strong></td>
<td style="text-align:left">异步执行的默认值，优先级低于<code>DISPATCH_BLOCK_ENFORCE_QOS_CLASS</code>。可以用该值来覆盖原来QOS类</td>
</tr>
<tr>
<td style="text-align:left"><strong>DISPATCH_BLOCK_NO_QOS_CLASS</strong></td>
<td style="text-align:left">表明dispatch_block不分配QOS类</td>
</tr>
</tbody>
</table>
</div>
<p>来创建<code>dispatch_block</code>变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/// 第一种使用QOS的方式来创建dispatch_block</div><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;RUN&quot;);</div><div class="line">&#125;);</div><div class="line">/// 直接创建dispatch_block</div><div class="line">dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS, ^&#123;</div><div class="line">        ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于<code>dispatch_block_create_with_qos_class</code>方法中relative_priority的参数的规则是：<code>relative_priority</code>的值需要在0到<code>QOS_MIN_RELATIVE_PRIORITY</code>（-15）之间。<br>  我们<strong>创建的block会被拷贝到堆上，并由<code>dispatch_block_t</code>类型的变量所持有</strong>。创建完成之后，我们可以将其提交到对应的任务队列中（下一节提到的dispatch_async等等函数…），也可以直接去执行（比如：task_block()）。<br>  既然可以直接去输入一个block块，那为什么我们还需要去使用<code>dispatch_block_t</code>？存在即有价值，那么最明显的优势便是：我们可以对该任务块执行<strong>取消操作</strong>！例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;RUN&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), task_block);</div><div class="line">dispatch_block_cancel(task_block);</div></pre></td></tr></table></figure>
<p>但是<strong>如果dispatch_block已经开始执行，便无法取消该任务的执行</strong>。比如下面的例子中，我们对上面的代码进行一点小小的修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;RUN&quot;);/// 成功执行</div><div class="line">        /// 模拟一个长时间的耗时任务</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        NSLog(@&quot;End&quot;);/// 成功执行</div><div class="line">&#125;);</div><div class="line">dispatch_async(dispatch_get_main_queue(), task_block);</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        /// 保证dispatch_block_t已经开始执行</div><div class="line">        dispatch_block_cancel(task_block);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这里我们是无法去取消已经执行的块。<code>dispatch_block_testcancel</code>函数的作用是让我们能够知道当前任务块是否已经被取消。</p>
<blockquote>
<p>在调用<code>dispatch_block_cancel</code>函数时，我们必须要确定即将被cancle的块没有捕获任何其他外部变量，如果持有将会造成内存泄漏。</p>
</blockquote>
<p>  除此之外我们来认识一下<strong><em>dispatch_block_wait</em></strong> 函数，它的作用是以同步的方式执行并等待，得等待指定的任务块执行完成之后，抑或者是超时之后然后去执行当前线程的后续任务。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;Start&quot;);</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        NSLog(@&quot;End&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_async(dispatch_get_main_queue(), task_block);</div><div class="line">NSLog(@&quot;Before Wait&quot;);</div><div class="line">dispatch_block_wait(task_block, DISPATCH_TIME_FOREVER);</div><div class="line">NSLog(@&quot;After Wait&quot;);</div></pre></td></tr></table></figure>
<p>此时运行并不会得到<code>Start</code>。由于<code>dispatch_block_wait</code>函数是使用的同步的方式，只要是在该线程的执行流中，它不管你是同步提交还是异步提交（这两种提交方式在下面一节马上会讲）的方式，<code>dispatch_block_wait</code>函数如果是在被执行的block之前执行，后续的代码都会被挂起，并不仅仅是<code>dispatch_block_wait</code>函数后的代码，也包括block中的代码。因此也就导致了在同一个任务队列中（都处于main_queue中）的<code>dispatch_block_t</code>永远不会执行。解决办法也很简单，第一种我们先让block执行起来；第二种我们让它们处在不同队列中即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;Start&quot;);</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        NSLog(@&quot;End&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_queue_t block_queue = dispatch_queue_create(&quot;com.example.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_async(block_queue, task_block);</div><div class="line">NSLog(@&quot;Before Wait&quot;);</div><div class="line">dispatch_block_wait(task_block, DISPATCH_TIME_FOREVER);</div><div class="line">NSLog(@&quot;After Wait&quot;);</div></pre></td></tr></table></figure>
<p>我们可以利用这个方法来做由异步转同步的需求（后面还会介绍<code>dispatch_semaphore_t</code>，它同样可以达到这个效果）。<br>  最后来看一下函数<strong>_dispatch_block_notify_</strong>，它的作用是当指定的<code>dispatch_block_t</code>变量执行完了之后，通知到给特定的任务队列。在上面的例子中，我们在<code>block_queue</code>中去执行了我们的任务块，但是我们想要在它执行完了以后在<code>main_queue</code>中来执行相关的操作，比如我们需要在<code>main_queue</code>中更新UI界面之类的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t task_block = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_USER_INITIATED, -8, ^&#123;</div><div class="line">        NSLog(@&quot;Start&quot;);</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        NSLog(@&quot;End&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_queue_t block_queue = dispatch_queue_create(&quot;com.example.gcd&quot;, dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_CONCURRENT, QOS_CLASS_USER_INITIATED, 0));</div><div class="line">dispatch_async(block_queue, task_block);</div><div class="line">dispatch_block_notify(task_block, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;Notify&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="四、将任务提交到队列"><a href="#四、将任务提交到队列" class="headerlink" title="四、将任务提交到队列"></a>四、将任务提交到队列</h4><p>  在文章的最后，我们来看看怎样把已经创建好的任务提交到特定的任务队列中去！对于提交操作主要涉及到的函数有：<strong>dispatch_async、dispatch_sync、dispatch_block_perform、dispatch_group_async、dispatch_barrier_async、dispatch_barrier_sync</strong>。在这篇文章中先讲前面三个。再后面文章中详解dispatch_group_t、dispatch_barrier时在进行对应的学习。<br>  <code>dispatch_async</code>使用异步地方式去提交任务块，何为异步？异步方法调用它通过使用一种立即返回的异步的变体并提供额外的方法来支持接受完成通知以及完成等待改进长期运行的(同步)方法（出自<a href="https://zh.wikipedia.org/wiki/%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8" target="_blank" rel="external">维基百科</a>）。<code>dispatch_sync</code>使用同步的方式取提交任务块。下图是根据我自己的理解来解释了一下异步和同步的差异性。<br></p>
<p><img src="http://upload-images.jianshu.io/upload_images/619906-601bf2002a932ad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异步和同步的对比"><br>上诉函数分别有对应的版本，分别是<code>dispatch_async_f、dispatch_sync_f</code>。它们两个和前面的区别在于，这两个函数不使用block的方式，而是使用C函数指针的方式来执行任务。它们中的<strong>context</strong>是以<code>void *</code>类型的变量作为参数，传递给函数指针指向的具体函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/// 异步使用block</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">        ...</div><div class="line">&#125;);</div><div class="line">/// 同步使用block</div><div class="line">dispatch_sync(queue, ^&#123;</div><div class="line">        ...</div><div class="line">&#125;);</div><div class="line">/// 异步使用函数指针</div><div class="line">dispatch_async_f(dispatch_get_main_queue(),  (__bridge void * _Nullable)(self), task_place);</div><div class="line">void task_place(void *data)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">/// 同步使用函数指针</div><div class="line">dispatch_sync_f(block_queue, (__bridge void * _Nullable)(self), task_place);</div><div class="line">void task_place(void *data)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们来看看本应属于<code>dispatch_block_t</code>中应该讲解的函数<code>dispatch_block_perform</code>，但是它作为一个提交任务的函数，放在这里讲我觉得要更为合适一点。它会创建一个<code>dispatch_block_t</code>变量，并在该任务队列中以同步的方式来执行block中的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_block_perform(DISPATCH_BLOCK_BARRIER, ^&#123;</div><div class="line">        NSLog(@&quot;Start&quot;);</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        NSLog(@&quot;End&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码以下代码效果一样（取自<a href="https://developer.apple.com/documentation/dispatch/1431048-dispatch_block_perform?language=objc" target="_blank" rel="external">Apple官方文档</a>）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_block_t b = dispatch_block_create(flags, block);</div><div class="line">b();</div><div class="line">Block_release(b);</div></pre></td></tr></table></figure>
<p>但是<code>dispatch_block_perform</code>方法可以以更加高效的方式来进行以上步骤，而不需要在对象分配时将block拷贝到指定堆中。<br>  到这里把最基础的部分算是走了一遍，可以说是走了最小的一步，但是本文的目的是力求以清晰地路线把每一步所涉及到的知识深挖严查。在后续的文章中会继续介绍GCD中的其他函数和相关的使用方法。</p>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p>以文章中出现顺序：</p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/Performance/Conceptual/EnergyGuide-iOS/PrioritizeWorkWithQoS.html#//apple_ref/doc/uid/TP40015243-CH39-SW1" target="_blank" rel="external">Prioritize Work with Quality of Service Classes</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW17" target="_blank" rel="external">Concurrency Programming Guide</a></li>
<li><a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">Objective-C Blocks Quiz</a></li>
<li><a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">Transitioning to ARC Release Notes</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8" target="_blank" rel="external">异步调用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/619906-27e0e0084cc378cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;  本文包括了从最基础的获取任务队列开始，配置任务队列，创建任务，提交任务一步一步地来复习GCD中所涉及到的知识。（建议在PC端浏览）&lt;br&gt;
    
    </summary>
    
      <category term="实战" scheme="http://yoursite.com/categories/%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>最大堆（创建、删除、插入和堆排序）</title>
    <link href="http://yoursite.com/2017/05/09/data_struct_max_heap/"/>
    <id>http://yoursite.com/2017/05/09/data_struct_max_heap/</id>
    <published>2017-05-09T14:20:26.000Z</published>
    <updated>2018-05-18T15:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>  什么是最大堆和最小堆？最大（小）堆是指在树中，存在一个结点而且该结点有儿子结点，该结点的data域值都不小于（大于）其儿子结点的data域值，并且它是一个完全二叉树（不是满二叉树）。<br><a id="more"></a><br>  注意区分选择树，因为<strong>_选择树（selection tree）_</strong>概念和最小堆有些类似，他们都有一个特点是<strong>_“树中的根结点都表示树中的最小元素结点”_</strong>。同理最大堆的根结点是树中元素最大的。那么来看具体的看一下它长什么样？（最小堆这里省略）<br><img src="http://upload-images.jianshu.io/upload_images/619906-6866218c0158cfdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图-1"></p>
<blockquote>
<p>这里需要注意的是：在多个子树中，并不是说其中一个子树的父结点一定大于另一个子树的儿子结点。最大堆是树结构，而且一定要是完全二叉树。</p>
</blockquote>
<h4 id="最大堆ADT"><a href="#最大堆ADT" class="headerlink" title="最大堆ADT"></a>最大堆ADT</h4><p>那么我们在做最大堆的抽象数据类型（ADT）时就需要考虑三个操作：<br>（1）、创建一个最大堆；<br>（2）、最大堆的插入操作；<br>（3）、最大堆的删除操作；<br>最大堆ADT如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Max_Heap &#123;</div><div class="line">  object: 由多个元素组成的完全二叉树，其每个结点都不小于该结点的子结点关键字值</div><div class="line">  functions:</div><div class="line">    其中heap∈Max_Heap,n,max_size∈int,Element为堆中的元素类型，item∈ Element</div><div class="line">    Max_Heap createHeap(max_size)       := 创建一个总容量不大于max_size的空堆</div><div class="line">    void max_heap_insert(heap, item ,n) := 插入一个元素到heap中</div><div class="line">    Element max_heap_delete(heap,n)     := if(heap不为空) &#123;return 被删除的元素 &#125;else&#123;return NULL&#125;</div><div class="line">&#125;</div><div class="line">///其中:=符号组读作“定义为”</div></pre></td></tr></table></figure>
<h4 id="最大堆内存表现形式"><a href="#最大堆内存表现形式" class="headerlink" title="最大堆内存表现形式"></a>最大堆内存表现形式</h4><p>  我们只是简单的定义了最大堆的ADT，为了能够用代码实现它就必须要考虑最大堆的内存表现形式。从最大堆的定义中，我们知道不管是对最大堆做插入还是删除操作，<strong>我们必须要保证插入或者删除完成之后，该二叉树仍然是一个完全二叉树</strong>。基于此，我们就必须要去操作某一个结点的父结点。<br>  第一种方式，我们使用链表的方式来实现，那么我们需要添加一个额外的指针来指向该结点的父结点。此时就包括了左子结点指针、右子结点指针和父结点指针，那么空链的数目有可能是很大的，比如叶子结点的左右子结点指针和根结点的父结点指针，所以不选择这种实现方式（关于用链表实现一般二叉树时处理左右子结点指针的问题在线索二叉树中有提及）。<br>  第二种方式，使用数组实现，在二叉树进行遍历的方法分为：先序遍历、中序遍历、后序遍历和层序遍历。我们可以通过层序遍历的方式将二叉树结点存储在数组中，由于最大堆是完全二叉树不会存在数组的空间浪费。那么来看看层序遍历是怎么做的？对下图的最大堆进行层序遍历：<br><img src="http://upload-images.jianshu.io/upload_images/619906-f1c0ab6c89bc68d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/619906-4ef737815fce2175.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="层序遍历流程变化">从这里可以看出最后得到的顺序和上面图中所标的顺序是一样的。<br>  那么对于数组我们怎么操作父结点和左右子结点呢？对于完全二叉树采用顺序存储表示，那么对于任意一个下标为i(1 ≤ i ≤ n)的结点：<br>（1）、父结点为：<strong>_i / 2（i ≠ 1）_</strong>，若i = 1，则i是根节点。<br>（2）、左子结点：<strong>_2i（2i ≤ n）_</strong>， 若不满足则无左子结点。<br>（3）、右子结点：<strong>_2i + 1(2i + 1 ≤ n)_</strong>，若不满足则无右子结点。<img src="http://upload-images.jianshu.io/upload_images/619906-4fc0e1d7aa95f1de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>最终我们选择<strong>_数组_</strong>作为最大堆的内存表现形式。</p>
</blockquote>
<p>基本定义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#define MAX_ELEMENTS 20</div><div class="line">#define HEAP_FULL(n) (MAX_ELEMENTS - 1 == n)</div><div class="line">#define HEAP_EMPTY(n) (!n)</div><div class="line">typedef struct &#123;</div><div class="line">    int key;</div><div class="line">&#125;element;</div><div class="line">element heap[MAX_ELEMENTS];</div></pre></td></tr></table></figure>
<p>下面来看看最大堆的插入、删除和创建这三个最基本的操作。</p>
<h3 id="最大堆的插入"><a href="#最大堆的插入" class="headerlink" title="最大堆的插入"></a>最大堆的插入</h3><p>最大堆的插入操作可以简单看成是<strong>“结点上浮”</strong>。当我们在向最大堆中插入一个结点我们必须满足完全二叉树的标准，那么被插入结点的位置的是固定的。而且要满足父结点关键字值不小于子结点关键字值，那么我们就需要去移动父结点和子结点的相互位置关系。具体的位置变化，可以看看下面我画的一个简单的图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void insert_max_heap(element item ,int *n)&#123;</div><div class="line">    if(HEAP_FULL(*n))&#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    int i = ++(*n);</div><div class="line">    for(;(i != 1) &amp;&amp; (item.key &gt; heap[i/2].key);i = i / 2)&#123;/// i ≠ 1是因为数组的第一个元素并没有保存堆结点</div><div class="line">      heap[i] = heap[i/2];/// 这里其实和递归操作类似，就是去找父结点</div><div class="line">    &#125;</div><div class="line">    heap[i] = item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/619906-5ee33c128001bd5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>由于堆是一棵完全二叉树，存在n个元素，那么他的高度为:<strong>_log2(n+1)_</strong>，这就说明代码中的for循环会执行<strong>_O(log2(n))_</strong>次。因此插入函数的时间复杂度为：<strong>_O(log2(n))_</strong>。</p>
<h3 id="最大堆的删除"><a href="#最大堆的删除" class="headerlink" title="最大堆的删除"></a>最大堆的删除</h3><p><strong>最大堆的删除操作，总是从堆的根结点删除元素</strong>。同样根元素被删除之后为了能够保证该树还是一个完全二叉树，我们需要来移动完全二叉树的最后一个结点，让其继续符合完全二叉树的定义，从这里可以看作是<strong>_最大堆最后一个结点的下沉_</strong>操作。例如在下面的最大堆中执行删除操作：<br><img src="http://upload-images.jianshu.io/upload_images/619906-2b9aae16dedbf7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">解答：</div><div class="line">1）、对于最大堆的删除，我们不能自己进行选择删除某一个结点，我们只能删除堆的根结点。因此在图a中，我们删除根结点20；</div><div class="line">2）、当删除根结点20之后明显不是一个完全二叉树，更确切地说被分成了两棵树。</div><div class="line">3）、我们需要移动子树的某一个结点来充当该树的根节点，那么在(15,2,14,10,1)这些结点中移动哪一个呢？显然是移动结点1，如果移动了其他结点（比如14，10）就不再是一个完全二叉树了。</div><div class="line">4）、此时在结点（15，2）中选择较大的一个和1做比较，即15 &gt; 1的，所以15上浮到之前的20的结点处。</div><div class="line">5）、同第4步类似，找出（14，10）之间较大的和1做比较，即14&gt;1的，所以14上浮到原来15所处的结点。</div><div class="line">6）、因为原来14的结点是叶子结点，所以将1放在原来14所处的结点处。</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/619906-cd7ca08102c205b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这图中是用<code>temp</code>分别和图中的<code>max</code>做比较，来看<code>temp</code>是否会下沉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">element delete_max_heap(int *n)&#123;</div><div class="line">  int parent, child;</div><div class="line">  element temp, item;</div><div class="line">  temp = heap[(*n)--];</div><div class="line">  item = heap[1];</div><div class="line">  parent = 1,child=2;</div><div class="line">  for(;child &lt;= *n; child = child * 2)&#123;</div><div class="line">   if( (child &lt; *n) &amp;&amp; heap[child].key &lt; heap[child+1].key)&#123;/// 这一步是为了看当前结点是左子结点大还是右子结点大，然后选择较大的那个子结点</div><div class="line">        child++;</div><div class="line">      &#125;</div><div class="line">      if(temp.key &gt;= heap[child].key)&#123;</div><div class="line">        break;</div><div class="line">      &#125;</div><div class="line">      heap[parent] = heap[child];///这就是上图中第二步和第三步中黄色部分操作</div><div class="line">      parent = child;/// 这其实就是一个递归操作，让parent指向当前子树的根结点</div><div class="line">   &#125;</div><div class="line">  heap[parent] = temp;</div><div class="line">  return item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同最大堆的插入操作类似，同样包含n个元素的最大堆，其高度为:<strong>_log2(n+1)_</strong>，其时间复杂度为：<strong>_O(log2(n))_</strong>。</p>
<blockquote>
<p>总结：由此可以看出，在已经确定的最大堆中做删除操作，被删除的元素是固定的，需要被移动的结点也是固定的，这里我说的被移动的元素是指最初的移动，即最大堆的最后一个元素。移动方式为从最大的结点开始比较。</p>
</blockquote>
<h3 id="最大堆的创建"><a href="#最大堆的创建" class="headerlink" title="最大堆的创建"></a>最大堆的创建</h3><p>为什么要把最大堆的创建放在最后来讲？因为在堆的创建过程中，有两个方法。会分别用到最大堆的插入和最大堆的删除原理。创建最大堆有两种方法：<br>（1）、先创建一个空堆，然后根据元素一个一个去插入结点。由于插入操作的时间复杂度为<strong>_O(log2(n))_</strong>，那么n个元素插入进去，总的时间复杂度为<strong>_O(n * log2(n))_</strong>。<br>（2）、将这n个元素先顺序放入一个二叉树中形成一个完全二叉树，然后来调整各个结点的位置来满足最大堆的特性。<br>现在我们就来试一试第二种方法来创建一个最大堆：假如我们有12个元素分别为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;79,66,43,83,30,87,38,55,91,72,49,9&#125;</div></pre></td></tr></table></figure>
<p>将上诉15个数字放入一个二叉树中，确切地说是放入一个完全二叉树中，如下：<br><img src="http://upload-images.jianshu.io/upload_images/619906-f14895940e2c1ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>但是这明显不符合最大堆的定义，所以我们需要让该完全二叉树转换成最大堆！怎么转换成一个最大堆呢？<br>  最大堆有一个特点就是<strong>其各个子树都是一个最大堆</strong>，那么我们就可以从把最小子树转换成一个最大堆，然后依次转换它的父节点对应的子树，直到最后的根节点所在的整个完全二叉树变成最大堆。那么从哪一个子树开始调整？</p>
<blockquote>
<p>我们从该完全二叉树中的最后一个非叶子节点为根节点的子树进行调整，然后依次去找倒数第二个倒数第三个非叶子节点…</p>
</blockquote>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>在做最大堆的创建具体步骤中，我们会用到最大堆删除操作中结点位置互换的原理，<strong>_即关键字值较小的结点会做下沉操作_</strong>。</p>
<ul>
<li>1）、就如同上面所说找到二叉树中倒数第一个非叶子结点<code>87</code>，然后看以该非叶子结点为根结点的子树。查看该子树是否满足最大堆要求，很明显目前该子树满足最大堆，所以我们不需要移动结点。<strong>_该子树最大移动次数为1_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-dfabe32d4e8d1df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>2）、现在来到结点<code>30</code>，明显该子树不满足最大堆。在该结点的子结点较大的为<code>72</code>，所以结点72和结点30进行位置互换。<strong>_该子树最大移动次数为1_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-15d2b9fc8dde0ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>3）、同样对结点<code>83</code>做类似的操作。<strong>_该子树最大移动次数为1_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-7405036f2377c8b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>4）、现在来到结点<code>43</code>，该结点的子结点有<code>{87,38,9}</code>，对该子树做同样操作。由于结点43可能是其子树结点中最小的，所以<strong>_该子树最大移动次数为2_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-ceeb433a5b997243.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>5）、结点<code>66</code>同样操作，<strong>_该子树最大移动次数为2_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-0a942422c933d117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>6）、最后来到根结点<code>79</code>，该二叉树最高深度为4，所以<strong>_该子树最大移动次数为3_</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/619906-59de31f16ee7c2ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<p>自此通过上诉步骤创建的最大堆为:<br><img src="http://upload-images.jianshu.io/upload_images/619906-c7887558467cf8c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>所以从上面可以看出，该二叉树总的需要移动结点次数最大为：<strong>10</strong>。</p>
</blockquote>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">void create_max_heap(void)&#123;</div><div class="line">    int total = (*heap).key;</div><div class="line">    /// 求倒数第一个非叶子结点</div><div class="line">    int child = 2,parent = 1;</div><div class="line">    for (int node = total/2;node &gt; 0; node--) &#123;</div><div class="line">        parent = node;</div><div class="line">        child = 2*node;</div><div class="line">        int max_node = 2*parent+1;</div><div class="line">        element temp = *(heap + parent);</div><div class="line">        for(;child &lt;= max_node &amp;&amp; max_node &lt;= total; child = child * 2,max_node = 2*parent+1)&#123;</div><div class="line">            if ((*(heap + child)).key &lt; (*(heap + child + 1)).key) &#123;/// 取右子结点</div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            if (temp.key &gt; (*(heap + child)).key) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            *(heap + parent) = *(heap + child);</div><div class="line">            parent = child;</div><div class="line">        &#125;</div><div class="line">        *(heap + parent) = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> *</div><div class="line"> * @param heap  最大堆；</div><div class="line"> * @param items 输入的数据源</div><div class="line"> * @return 1成功，0失败</div><div class="line"> */</div><div class="line">int create_binary_tree(element *heap,int items[MAX_ELEMENTS])&#123;</div><div class="line">    int total;</div><div class="line">    if (!items) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    element *temp = heap;</div><div class="line">    heap++;</div><div class="line">    for (total = 1; *items;total++,(heap)++,items = items + 1) &#123;</div><div class="line">        element ele = &#123;*items&#125;;</div><div class="line">        element temp_key = &#123;total&#125;;</div><div class="line">        *temp = temp_key;</div><div class="line">        *heap = ele;</div><div class="line">    &#125;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line">///函数调用</div><div class="line">int items[MAX_ELEMENTS] = &#123;79,66,43,83,30,87,38,55,91,72,49,9&#125;;</div><div class="line">element *position = heap;</div><div class="line">create_binary_tree(position, items);</div><div class="line">for (int i = 0; (*(heap+i)).key &gt; 0; i++) &#123;</div><div class="line">  printf(&quot;binary tree element is %d\n&quot;,(*(heap + i)).key);</div><div class="line">&#125;</div><div class="line">create_max_heap();</div><div class="line">for (int i = 0; (*(heap+i)).key &gt; 0; i++) &#123;</div><div class="line">  printf(&quot;heap element is %d\n&quot;,(*(heap + i)).key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上诉代码在我机器上能够成功的构建一个最大堆。由于该完全二叉树存在n个元素，那么他的高度为:<strong>_log2(n+1)_</strong>，这就说明代码中的for循环会执行<strong>_O(log2(n))_</strong>次。因此其时间复杂度为：<strong>_O(log2(n))_</strong>。</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>  堆排序要比空间复杂度为<strong>_O(n)_</strong>的归并排序要慢一些，但是要比空间复杂度为<strong>_O(1)_</strong>的归并排序要快！<br>  通过上面<strong>最大堆创建</strong>一节中我们能够创建一个最大堆。出于该最大堆太大，我将其进行缩小以便进行画图演示。<br><img src="http://upload-images.jianshu.io/upload_images/619906-8b1f79e817875e10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>最大堆的排序过程其实是和最大堆的删除操作类似，由于最大堆的删除只能在根结点进行，当将根结点删除完成之后，就是将剩下的结点进行整理让其符合最大堆的标准。</p>
<ul>
<li>1）、把最大堆根结点<code>91</code>“删除”，第一次排序图示：<br><img src="http://upload-images.jianshu.io/upload_images/619906-35b9c48c809f231b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>进过这一次排序之后，<code>91</code>就处在最终的正确位置上，所以我们只需要对余下的最大堆进行操作！这里需要注意一点：</li>
</ul>
<blockquote>
<p>⚠️⚠️⚠️注意，关于对余下进行最大堆操作时：<br>并不需要像创建最大堆时，从倒数第一个非叶子结点开始。因为在我们只是对第一个和最后一个结点进行了交换，所以<strong>_只有根结点的顺序不满足最大堆的约束，我们只需要对第一个元素进行处理即可_</strong></p>
</blockquote>
<ul>
<li><p>2）、继续对结点<code>87</code>进行相同的操作：<br><img src="http://upload-images.jianshu.io/upload_images/619906-b14307ce0d5322e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>同样，<code>87</code>的位置确定。</p>
</li>
<li><p>3）、现在我们来确定结点<code>83</code>的位置：<br><img src="http://upload-images.jianshu.io/upload_images/619906-df936cc131e51cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>4）、经过上诉步骤就不难理解堆排序的原理所在，最后排序结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/619906-9a2dbb64df3a5702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ul>
<p>经过上诉多个步骤之后，最终的排序结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[38、43、72、79、83、87、91]</div></pre></td></tr></table></figure>
<p>很明显这是一个正确的从小到大的顺序。</p>
<h4 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h4><p>这里需要对上面的代码进行一些修改！因为在排序中，我们的第0个元素是不用去放一个哨兵的，我们的元素从原来的第一个位置改为从第0个位置开始放置元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">void __swap(element *lhs,element *rhs)&#123;</div><div class="line">    element temp = *lhs;</div><div class="line">    *lhs = *rhs;</div><div class="line">    *rhs = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int create_binarytree(element *heap, int items[MAX_SIZE], int n)&#123;</div><div class="line">    if (n &lt;= 0) return 0;</div><div class="line">    for (int i = 0; i &lt; n; i++,heap++) &#123;</div><div class="line">        element value = &#123;items[i]&#125;;</div><div class="line">        *heap = value;</div><div class="line">    &#125;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void adapt_maxheap(element *heap ,int node ,int n)&#123;</div><div class="line">    int parent = node - 1 &lt; 0 ? 0 : node - 1;</div><div class="line">    int child = 2 * parent + 1;/// 因为没有哨兵，所以在数组中的关系由原来的：parent = 2 * child =&gt; parent = 2 * child + 1</div><div class="line">    int max_node = max_node = 2*parent+2 &lt; n - 1 ? 2*parent+2 : n - 1;</div><div class="line">    element temp = *(heap + parent);</div><div class="line">    for (;child &lt;= max_node; parent = child,child = child * 2 + 1,max_node = 2*parent+2 &lt; n - 1 ? 2*parent+2 : n - 1) &#123;</div><div class="line">        if ((heap + child)-&gt;key &lt;= (heap + child + 1)-&gt;key &amp;&amp; child + 1 &lt; n) &#123;</div><div class="line">            child++;</div><div class="line">        &#125;</div><div class="line">        if ((heap + child)-&gt;key &lt; temp.key) &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        *(heap + parent) = *(heap + child);</div><div class="line">    &#125;</div><div class="line">    *(heap + parent) = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int create_maxheap(element *heap ,int n)&#123;</div><div class="line"></div><div class="line">    for (int node = n/2; node &gt; 0; node--) &#123;</div><div class="line">        adapt_maxheap(heap, node, n);</div><div class="line">    &#125;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void heap_sort(element *heap ,int n)&#123;</div><div class="line">    ///创建一个最大堆</div><div class="line">    create_maxheap(heap, n);</div><div class="line">    ///进行排序过程</div><div class="line">    int i = n - 1;</div><div class="line">    while (i &gt;= 0) &#123;</div><div class="line">        __swap(heap+0, heap + i);/// 将第一个和最后一个进行交换</div><div class="line">        adapt_maxheap(heap, 0, i--);///将总的元素个数减一，适配成最大堆，这里只需要对首元素进行最大堆的操作</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/// 堆排序</div><div class="line">int n = 7;</div><div class="line">int items[7] = &#123;87,79,38,83,72,43,91&#125;;</div><div class="line">element heap[7];</div><div class="line">create_binarytree(heap, items, n);</div><div class="line">heap_sort(heap, n);</div></pre></td></tr></table></figure></p>
<p>在实现堆排序时最需要注意的就是当没有哨兵之后，父结点和左右孩子结点之间的关系发生了变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parent = 2 * child + 1;///左孩子</div><div class="line">parent = 2 * child + 2;///右孩子</div></pre></td></tr></table></figure></p>
<p>关于对排序相关的知识点已经整理完了。其时间复杂度和归并排序的时间时间复杂度是一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  什么是最大堆和最小堆？最大（小）堆是指在树中，存在一个结点而且该结点有儿子结点，该结点的data域值都不小于（大于）其儿子结点的data域值，并且它是一个完全二叉树（不是满二叉树）。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>栈（Stack）和堆（Heap）</title>
    <link href="http://yoursite.com/2017/03/21/stack_heap_with_c/"/>
    <id>http://yoursite.com/2017/03/21/stack_heap_with_c/</id>
    <published>2017-03-21T12:40:24.000Z</published>
    <updated>2017-08-01T13:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>  目前来说我们知道怎么去声明一个基础类型的变量，比如int，float，等等。以及复杂数据类型数组和结构，声明它们的时候C会把这些变量放在栈上。<strong>每个线程都有一个栈，而程序通常只有一个堆</strong>。<br><a id="more"></a> </p>
<h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><p>  什么是栈？它是内存中一块特殊的区域，<strong>用于保存在函数中声明的零时变量</strong>（其中也包括<code>main()</code>函数）。栈是LIFO(Last in First Out 后进先出)的数据结构，进出操作是由CPU来管理和优化的。每当函数声明了一个变量，该变量就会被<strong>推入(Pushed)</strong>栈中。每当函数退出时，所有的变量都会被函数推出栈，并被<strong>释放掉(Free)</strong>。一旦变量被释放，该内存区域就可以被其他栈变量使用。<br>  使用栈的优势是它会为你管理内存，而不需要你手动去分配或者释放内存。更进一步说，由于CPU可以有效地管理栈内存，所以从栈中读写变量是很快的。<br>  理解栈的关键是需要知道函数什么时候退出，此时栈中所有的变量被推出，因此<strong>栈变量是局部的</strong>（也就是局部变量）。C中经常出现的一个错误就是，在函数返回以后去访问函数内部中栈变量。<br>  如果使用太多的栈空间会导致溢出，比如在使用递归的时候，该函数使用了太多的局部变量在递归过程中就有可能造成<strong>栈溢出</strong>。</p>
<blockquote>
<p>总结</p>
<ul>
<li>栈是LIFO数据结构；</li>
<li>CPU管理内存，而不需要手动去管理。正是因为这个原因从栈中读写变量<strong>很快</strong>的；</li>
<li>栈变量是局部的（也就是局部变量）；</li>
<li>栈的容量会随着函数的Push和Pop变化；</li>
</ul>
</blockquote>
<h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>  堆也是内存中一块特定区域，但是CPU并不会自动管理相关的操作，而且它的空间大小会有一定的浮动。在堆上分配内存的时候，在C中使用<code>malloc()</code>和<code>calloc()</code>函数。在不需要堆上这块内存之后，需要使用<code>free()</code>函数释放掉它。<strong>如果不释放的话就会造成内存泄漏</strong>，这块内存就会被闲置。<br>  和栈不同之处在于，<strong>堆内存数据的读写速度会比栈慢</strong>。</p>
<h3 id="栈（Stack）和堆（Heap）的差异"><a href="#栈（Stack）和堆（Heap）的差异" class="headerlink" title="栈（Stack）和堆（Heap）的差异"></a>栈（Stack）和堆（Heap）的差异</h3><h4 id="配置堆栈大小"><a href="#配置堆栈大小" class="headerlink" title="配置堆栈大小"></a>配置堆栈大小</h4><p>  堆的大小在程序启动时分配，数值在不同操作系统中可能有所不同。<br>  在Cocoa中想要修改线程的栈大小的话，可以使用<code>NSThread</code>的实例方法<code>setStackSize:</code>，如果使用POSIX线程技术创建的线程的话，想要设置栈大小的话使用<code>pthread_attr_setstacksize</code>函数。</p>
<blockquote>
<p>⚠️如果要设置栈大小就必须要在创建线程之前完成。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/</div><div class="line">// 第一种</div><div class="line">NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(backgroudMethod:) object:nil];</div><div class="line">[thread setStackSize:1024];</div><div class="line">[thread start];</div><div class="line"></div><div class="line">/// 第二种</div><div class="line">pthread_attr_t attr;</div><div class="line">pthread_t posix_tread_id;</div><div class="line">int returnVal;</div><div class="line">returnVal = pthread_attr_init(&amp;attr);</div><div class="line">returnVal = pthread_attr_setstacksize(&amp;attr, 1024);/// 在创建线程前设置堆栈大小</div><div class="line">char *data;</div><div class="line">data = &quot;To ensure that a thread knows what work to do&quot;;</div><div class="line">int thread_error = pthread_create(&amp;posix_tread_id, &amp;attr, posix_thread_mainroutine, data);</div></pre></td></tr></table></figure>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>  栈是和线程相关联的，意思就是说当线程退出时，栈被回收。而堆通常是在启动程序时分配，当程序退出之后被回收。</p>
<h3 id="什么时候使用栈什么时候使用堆"><a href="#什么时候使用栈什么时候使用堆" class="headerlink" title="什么时候使用栈什么时候使用堆"></a>什么时候使用栈什么时候使用堆</h3><ul>
<li>需要申请较大内存空间（比如struct，array之类的），而且需要该变量存在较长时间，就是将该变量放在<strong>堆</strong>中；</li>
<li>如果需要动态修改struct或者array的大小，将该变量放在<strong>堆</strong>上。使用<code>malloc()，calloc()，realloc()和free()</code>等函数来管理内存；</li>
<li>如果使用相对较小的变量，并且只在函数中使用它们，此时该变量就存在于栈上。这样做会更快而且更简单；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  目前来说我们知道怎么去声明一个基础类型的变量，比如int，float，等等。以及复杂数据类型数组和结构，声明它们的时候C会把这些变量放在栈上。&lt;strong&gt;每个线程都有一个栈，而程序通常只有一个堆&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="基础知识" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>动画中关于KVC官方文档翻译</title>
    <link href="http://yoursite.com/2017/03/08/animation_kvc_translate/"/>
    <id>http://yoursite.com/2017/03/08/animation_kvc_translate/</id>
    <published>2017-03-08T12:59:45.000Z</published>
    <updated>2017-03-08T13:46:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>CoreAnimation让CAAnimation和CALayer都遵守NSKeyValueCoding协议，因此为它们增加了一些默认的keys（对应的value），添加的keyPath中包含了了CGPoint,CGRect,CGSize和CATransform3D类型。<br><a id="more"></a> </p>
<h2 id="1-键值编码兼容的容器类"><a href="#1-键值编码兼容的容器类" class="headerlink" title="1.键值编码兼容的容器类"></a>1.键值编码兼容的容器类</h2><p>CAAnimation和CALayer类就是作为键值编码兼容的容器类，我们可以根据任意的keys来设置对应的value，即便这个key不是CALayer公开的属性，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[theLayer setValue:[NSNumber numberWithInteger:50] forKey:@&quot;someKey&quot;];</div></pre></td></tr></table></figure></p>
<p>同样也可以通过任意已知的keys来查找对应的values，可以使用下面的代码通过预先设置好的somekey来检索values：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">someKeyValue=[theLayer valueForKey:@&quot;someKey&quot;];</div></pre></td></tr></table></figure></p>
<h2 id="2-默认支持的value"><a href="#2-默认支持的value" class="headerlink" title="2.默认支持的value"></a>2.默认支持的value</h2><p>CoreAnimation在键值编码时规定：一个类可以给没有value的key提供一个默认值。CAAnimation和CALayer类都提供了类方法<code>defaultValueForKey</code>。</p>
<blockquote>
<p>对于为key提供了默认value的类，在创建这个类的子类时必须要重写它的<code>defaultValueForKey</code>方法。</p>
</blockquote>
<p>当你在实现这个方法的时候，需要检查key的参数列表，并且返回一个合适的value值，下面提供了一个例子，layer提供了<code>defaultValueForKey:</code>方法，为<code>maskToBounds</code>属性设置默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (id)defaultValueForKey:(NSString *)key&#123;</div><div class="line">   if ([key isEqualToString:@&quot;masksToBounds&quot;])</div><div class="line">      return [NSNumber numberWithBool:YES];</div><div class="line">      return [super defaultValueForKey:key];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p>当一个key的数据是由一个标量值或者一个C的数据结构时，<strong>你必须要在其被分配到layer之前对其进行封装</strong>。同样的，当要访问这些Type时，也必须检查对象，然后使用合适的方法来打开合适的值。下表显示了Objective-c和c类型封装</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>C type</th>
<th style="text-align:center">输入</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developer.apple.com/reference/coregraphics/cgpoint" target="_blank" rel="external">CGPoint</a></td>
<td style="text-align:center"><a href="https://developer.apple.com/reference/foundation/nsvalue" target="_blank" rel="external">NSValue</a></td>
</tr>
<tr>
<td><a href="https://developer.apple.com/reference/coregraphics/cgsize" target="_blank" rel="external">CGSize</a></td>
<td style="text-align:center">NSValue</td>
</tr>
<tr>
<td><a href="https://developer.apple.com/reference/coregraphics/cgrect" target="_blank" rel="external">CGRect</a></td>
<td style="text-align:center">NSValue</td>
</tr>
<tr>
<td><a href="https://developer.apple.com/reference/quartzcore/catransform3d" target="_blank" rel="external">CATransform3D</a></td>
<td style="text-align:center">NSValue</td>
</tr>
<tr>
<td><a href="https://developer.apple.com/reference/coregraphics/cgaffinetransform" target="_blank" rel="external">CGAffineTransform</a></td>
<td style="text-align:center"><a href="https://developer.apple.com/reference/foundation/nsaffinetransform" target="_blank" rel="external">NSAffineTransform</a> (OS X only)</td>
</tr>
</tbody>
</table>
</div>
<p>不同类型封装的类</p>
<h2 id="4-为KeyPath的提供的结构"><a href="#4-为KeyPath的提供的结构" class="headerlink" title="4.为KeyPath的提供的结构"></a>4.为KeyPath的提供的结构</h2><p>CAAnimation和CALayer类使用KeyPath来访问指定的字段，这功能可以让你在做动画时为特定的KeyPath提供数据。使用<code>setValue:forKeyPath和valueForKeyPath:</code>方法设置，然后用<code>valueForKeyPath:</code>获取相应的值。</p>
<h4 id="1-、CATransform3D-KeyPaths"><a href="#1-、CATransform3D-KeyPaths" class="headerlink" title="(1)、CATransform3D KeyPaths"></a>(1)、CATransform3D KeyPaths</h4><p>你可以使用更强大的KeyPath，查找包含了<code>CATransform3D</code>类型属性的值。在需要指定layer的<code>transforms</code>完整的KeyPath时，我们可以根据下表中提供的数据，使用<code>transform</code>和<code>sublayerTransform</code>的值。例如，我们需要制定绕着layer的z轴旋转时，我就需要指定KeyPath为<code>transform.rotation.z</code>。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Field Key Path</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>rotation.x</td>
<td style="text-align:center">围绕X轴，旋转值为弧度，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>rotation.y</td>
<td style="text-align:center">围绕y轴，旋转值为弧度，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>rotation.z</td>
<td style="text-align:center">围绕z轴，旋转值为弧度，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>rotation</td>
<td style="text-align:center">围绕z轴，旋转值为弧度，<code>NSNumber</code>类型，它和设置<code>rotation.z</code>一样</td>
</tr>
<tr>
<td>scale.x</td>
<td style="text-align:center">x轴缩放，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>scale.y</td>
<td style="text-align:center">y轴缩放，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>scale.z</td>
<td style="text-align:center">z轴缩放，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>scale</td>
<td style="text-align:center">三个轴缩放的平均值，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>translation.x</td>
<td style="text-align:center">x轴位移，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>translation.y</td>
<td style="text-align:center">y轴位移，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>translation.z</td>
<td style="text-align:center">z轴位移，<code>NSNumber</code>类型</td>
</tr>
<tr>
<td>translation</td>
<td style="text-align:center">x，y上面位移，<code>NSSize</code> 和<code>CGSize</code></td>
</tr>
</tbody>
</table>
</div>
<p>下面展示了怎样通过setValue:forKeyPath方法来修改一个layer，这个例子设置了layer在x轴上位移了10个像素点，来显示layer在x轴上的移动:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[myLayer setValue:[NSNumber numberWithFloat:10.0] forKeyPath:@&quot;transform.translation.x&quot;];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>⚠注意：通过keyPath来设置value值的时候不能像Objective-C里面对属性的赋值，必须配合KeyPath字符串使用setValue:forKeyPath方法来进行赋值。</p>
</blockquote>
<h4 id="2-、CGPoint-KeyPath"><a href="#2-、CGPoint-KeyPath" class="headerlink" title="(2)、CGPoint KeyPath"></a>(2)、CGPoint KeyPath</h4><p>如果当前给的是一个<code>CGPoint</code>类型，则可以根据下表进行设置。例如，当我们想要修改layer的<code>position</code>的x值时，可以在KeyPath中写<code>position.x</code>。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Structure Field</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td style="text-align:center">x的分量</td>
</tr>
<tr>
<td>y</td>
<td style="text-align:center">y的分量</td>
</tr>
</tbody>
</table>
</div>
<h4 id="3-、CGSize-KeyPath"><a href="#3-、CGSize-KeyPath" class="headerlink" title="(3)、CGSize KeyPath"></a>(3)、CGSize KeyPath</h4><div class="table-container">
<table>
<thead>
<tr>
<th>Structure Field</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td style="text-align:center">size的width值</td>
</tr>
<tr>
<td>height</td>
<td style="text-align:center">size的height值</td>
</tr>
</tbody>
</table>
</div>
<h4 id="4-、CGRect-KeyPath"><a href="#4-、CGRect-KeyPath" class="headerlink" title="(4)、CGRect KeyPath"></a>(4)、CGRect KeyPath</h4><p>例如，要更改layer的<code>bounds</code>属性的width值，可以写入关键路径<code>bounds.size.width</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Structure Field</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>origin</td>
<td style="text-align:center">坐标，类型<code>CGPoint</code></td>
</tr>
<tr>
<td>origin.x</td>
<td style="text-align:center">坐标的x值，类型<code>CGFloat</code></td>
</tr>
<tr>
<td>origin.y</td>
<td style="text-align:center">坐标的y值，类型<code>CGFloat</code></td>
</tr>
<tr>
<td>size</td>
<td style="text-align:center">大小，类型<code>CGSize</code></td>
</tr>
<tr>
<td>size.width</td>
<td style="text-align:center">size的width值</td>
</tr>
<tr>
<td>size.height</td>
<td style="text-align:center">size的height值</td>
</tr>
</tbody>
</table>
</div>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>翻译这篇文章的目的因为我在做动画中需要每次都差到对应的KeyPath，很麻烦，索性我就将其翻译出来。<br>到目前为止，这片文章大部分翻译算是完成了，看起来很粗糙，能看懂就最好了。</p>
<p>原来地址：<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html" target="_blank" rel="external">Key-Value Coding Extensions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CoreAnimation让CAAnimation和CALayer都遵守NSKeyValueCoding协议，因此为它们增加了一些默认的keys（对应的value），添加的keyPath中包含了了CGPoint,CGRect,CGSize和CATransform3D类型。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
